As of Dec 2, 2021:

    * entire user guide
        experimental -> src, how to do it.

    * test, document, polish all src & experimental: algorithms, utilities,
        and tests.
        as of Dec 2: testing is at 95%.  Only untested functions are
        4 experimental/algoritms: lcc, cdlp, scc, and msf.

    * unify error return values as much as possible, now that v2.0 C API
        has assigned enum values to GrB_Info.  Suggest we use GrB_Info
        values, as ints, as much as possible

    * many TODOs and FIXMEs throughout

    * check function names and API (LAGraph_IsEqual for GrB_Matrix, and
        LAGraph_Vector_IsEqual for GrB_Vectors for example,o
        but LAGraph_Matrix_print and LAGraph_Vector_print)

    * missing features:

        (1) file I/O with GrB serialize/deserialize.  Add a JSON header to the
            binary file so we know what library (and version) the file is
            written with.
            Pros: very fast, very compact, easy to do in LAGraph.
            Cons: only works to save then load in the same library.

        (2) file I/O with a common, binary, non-opaque format that all
            GraphBLAS libraries can read.  Ideally using compression
            (see SuiteSparse:GraphBLAS uses LZ4 for its GrB_Matrix_serialize/
            deserialize and it would not be hard to add LZ4 to LAGraph).

        (3) random matrix generation.  Would be easy to do based on
            LAGraph_Random (generates random vectors, in
            experimental/utility).

    * need new GxB methods in GraphBLAS for CC, ideally for v1.0 of LAGraph:
        GxB_select with GxB_RankUnaryOp, and GxB_extract with GrB_Vectors as
        inputs instead of (GrB_Index *) arrays.

    * move LICENSE, etc to doc/ ?

--------------------------------------------------------------------------------

FUTURE: can we exploit asynch algorithms? C += A*C for example?
        Gauss-Seidel, Afforest, etc?  I can do it in GraphBLAS; can LAGraph
        use it?

FUTURE: need GrB_Matrix_type or type_name.  use GxB_Matrix_type_name instead
    of GxB_Matrix_type.
    (type query needs to be added to the GraphBLAS API Specification)

FUTURE: add interfaces to external packages.

    GTgraph: (Madduri and Bader) for generating synthetic graphs
    CSparse or CXSparse (for depth-first search, scc, dmperm, amd,
        in the sequential case)
    graph partitioning: METIS, Mongoose, etc
    SuiteSparse solvers (UMFPACK, CHOLMOD, KLU, ...)
    others?

FUTURE: interfaces to MATLAB, Python, Julia, etc.

FUTURE: need more algorithms and utilities

