Start testing: Dec 07 10:31 EST
----------------------------------------------------------
1/40 Testing: ctest_Betweenness
1/40 Test: ctest_Betweenness
Command: "/home/afanasyev/LAGraph/build/src/test/test_Betweenness"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Betweenness" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_bc...                                 
karate bc:
karate:   err: 2.288818e-05

west0067 bc:
west0067: err: 4.673004e-05
[ OK ]
Test test_bc_brutal...                          
brutal test at line  304: LG_nmalloc: 46
method: LAGraph_VertexCentrality_Betweenness (&centrality, G, karate_sources, 4, msg)
brutal test at line  304: LG_nmalloc: 48, succeeded with 140 mallocs
karate:   err: 2.288818e-05
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"ctest_Betweenness" end time: Dec 07 10:31 EST
"ctest_Betweenness" time elapsed: 00:00:00
----------------------------------------------------------

2/40 Testing: ctest_BreadthFirstSearch
2/40 Test: ctest_BreadthFirstSearch
Command: "/home/afanasyev/LAGraph/build/src/test/test_BreadthFirstSearch"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_BreadthFirstSearch" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test BreadthFirstSearch_invalid_graph...        [ OK ]
Test BreadthFirstSearch_invalid_src...          [ OK ]
Test BreadthFirstSearch_neither...              [ OK ]
Test BreadthFirstSearch_parent...               [ OK ]
Test BreadthFirstSearch_level...                [ OK ]
Test BreadthFirstSearch_both...                 [ OK ]
Test BreadthFirstSearch_many...                 
Matrix: A.mtx
src 0 n: 7 max level: 2 nvisited: 7
src 0 n: 7 max level: 2 nvisited: 7
src 2 n: 7 max level: 2 nvisited: 7
src 2 n: 7 max level: 2 nvisited: 7
src 4 n: 7 max level: 2 nvisited: 7
src 4 n: 7 max level: 2 nvisited: 7
src 6 n: 7 max level: 2 nvisited: 7
src 6 n: 7 max level: 2 nvisited: 7

Matrix: cover.mtx
src 0 n: 7 max level: 3 nvisited: 7
src 0 n: 7 max level: 3 nvisited: 7
src 2 n: 7 max level: 1 nvisited: 2
src 2 n: 7 max level: 1 nvisited: 2
src 4 n: 7 max level: 2 nvisited: 3
src 4 n: 7 max level: 2 nvisited: 3
src 6 n: 7 max level: 3 nvisited: 7
src 6 n: 7 max level: 3 nvisited: 7

Matrix: jagmesh7.mtx
src 0 n: 1138 max level: 54 nvisited: 1138
src 0 n: 1138 max level: 54 nvisited: 1138
src 853 n: 1138 max level: 48 nvisited: 1138
src 853 n: 1138 max level: 48 nvisited: 1138

Matrix: ldbc-cdlp-directed-example.mtx
src 0 n: 8 max level: 3 nvisited: 8
src 0 n: 8 max level: 3 nvisited: 8
src 3 n: 8 max level: 3 nvisited: 5
src 3 n: 8 max level: 3 nvisited: 5
src 6 n: 8 max level: 2 nvisited: 5
src 6 n: 8 max level: 2 nvisited: 5

Matrix: ldbc-cdlp-undirected-example.mtx
src 0 n: 8 max level: 3 nvisited: 8
src 0 n: 8 max level: 3 nvisited: 8
src 3 n: 8 max level: 4 nvisited: 8
src 3 n: 8 max level: 4 nvisited: 8
src 6 n: 8 max level: 2 nvisited: 8
src 6 n: 8 max level: 2 nvisited: 8

Matrix: ldbc-directed-example.mtx
src 0 n: 10 max level: 2 nvisited: 6
src 0 n: 10 max level: 2 nvisited: 6
src 3 n: 10 max level: 0 nvisited: 1
src 3 n: 10 max level: 0 nvisited: 1
src 6 n: 10 max level: 1 nvisited: 2
src 6 n: 10 max level: 1 nvisited: 2
src 9 n: 10 max level: 0 nvisited: 1
src 9 n: 10 max level: 0 nvisited: 1

Matrix: ldbc-undirected-example.mtx
src 0 n: 9 max level: 4 nvisited: 9
src 0 n: 9 max level: 4 nvisited: 9
src 3 n: 9 max level: 2 nvisited: 9
src 3 n: 9 max level: 2 nvisited: 9
src 6 n: 9 max level: 2 nvisited: 9
src 6 n: 9 max level: 2 nvisited: 9

Matrix: ldbc-wcc-example.mtx
src 0 n: 10 max level: 3 nvisited: 10
src 0 n: 10 max level: 3 nvisited: 10
src 3 n: 10 max level: 2 nvisited: 10
src 3 n: 10 max level: 2 nvisited: 10
src 6 n: 10 max level: 3 nvisited: 10
src 6 n: 10 max level: 3 nvisited: 10
src 9 n: 10 max level: 3 nvisited: 10
src 9 n: 10 max level: 3 nvisited: 10

Matrix: LFAT5.mtx
src 0 n: 14 max level: 4 nvisited: 8
src 0 n: 14 max level: 4 nvisited: 8
src 4 n: 14 max level: 3 nvisited: 8
src 4 n: 14 max level: 3 nvisited: 8
src 8 n: 14 max level: 2 nvisited: 8
src 8 n: 14 max level: 2 nvisited: 8
src 12 n: 14 max level: 3 nvisited: 8
src 12 n: 14 max level: 3 nvisited: 8

Matrix: msf1.mtx
src 0 n: 6 max level: 2 nvisited: 5
src 0 n: 6 max level: 2 nvisited: 5
src 2 n: 6 max level: 1 nvisited: 2
src 2 n: 6 max level: 1 nvisited: 2
src 4 n: 6 max level: 3 nvisited: 4
src 4 n: 6 max level: 3 nvisited: 4

Matrix: msf2.mtx
src 0 n: 8 max level: 3 nvisited: 8
src 0 n: 8 max level: 3 nvisited: 8
src 3 n: 8 max level: 1 nvisited: 3
src 3 n: 8 max level: 1 nvisited: 3
src 6 n: 8 max level: 0 nvisited: 1
src 6 n: 8 max level: 0 nvisited: 1

Matrix: msf3.mtx
src 0 n: 5 max level: 2 nvisited: 5
src 0 n: 5 max level: 2 nvisited: 5
src 2 n: 5 max level: 1 nvisited: 3
src 2 n: 5 max level: 1 nvisited: 3
src 4 n: 5 max level: 0 nvisited: 1
src 4 n: 5 max level: 0 nvisited: 1

Matrix: sample2.mtx
src 0 n: 8 max level: 3 nvisited: 8
src 0 n: 8 max level: 3 nvisited: 8
src 3 n: 8 max level: 2 nvisited: 8
src 3 n: 8 max level: 2 nvisited: 8
src 6 n: 8 max level: 3 nvisited: 8
src 6 n: 8 max level: 3 nvisited: 8

Matrix: sample.mtx
src 0 n: 8 max level: 4 nvisited: 8
src 0 n: 8 max level: 4 nvisited: 8
src 3 n: 8 max level: 3 nvisited: 6
src 3 n: 8 max level: 3 nvisited: 6
src 6 n: 8 max level: 1 nvisited: 2
src 6 n: 8 max level: 1 nvisited: 2

Matrix: olm1000.mtx
src 0 n: 1000 max level: 499 nvisited: 1000
src 0 n: 1000 max level: 499 nvisited: 1000
src 750 n: 1000 max level: 375 nvisited: 1000
src 750 n: 1000 max level: 375 nvisited: 1000

Matrix: bcsstk13.mtx
LG_check_bfs init  time: 0.000118122 sec
LG_check_bfs bfs   time: 0.000155844 sec
LG_check_bfs check time: 0.000115823 sec
src 0 n: 2003 max level: 11 nvisited: 2003
LG_check_bfs init  time: 0.000227522 sec
LG_check_bfs bfs   time: 0.000150993 sec
LG_check_bfs check time: 0.00011 sec
src 0 n: 2003 max level: 11 nvisited: 2003
LG_check_bfs init  time: 5.54994e-05 sec
LG_check_bfs bfs   time: 0.000145532 sec
LG_check_bfs check time: 0.000105061 sec
LG_check_bfs init  time: 5.75297e-05 sec
LG_check_bfs bfs   time: 0.000146993 sec
LG_check_bfs check time: 0.000105232 sec
LG_check_bfs init  time: 5.54435e-05 sec
LG_check_bfs bfs   time: 0.000144761 sec
LG_check_bfs check time: 4.04939e-06 sec
LG_check_bfs init  time: 5.72689e-05 sec
LG_check_bfs bfs   time: 0.000146445 sec
LG_check_bfs check time: 4.06057e-06 sec
LG_check_bfs init  time: 0.000111222 sec
LG_check_bfs bfs   time: 0.000146899 sec
LG_check_bfs check time: 0.000107501 sec
LG_check_bfs init  time: 0.000222731 sec
LG_check_bfs bfs   time: 0.000150364 sec
LG_check_bfs check time: 0.000109263 sec
LG_check_bfs init  time: 5.53019e-05 sec
LG_check_bfs bfs   time: 0.000146102 sec
LG_check_bfs check time: 0.000105493 sec
LG_check_bfs init  time: 5.79916e-05 sec
LG_check_bfs bfs   time: 0.00014637 sec
LG_check_bfs check time: 0.000107229 sec
LG_check_bfs init  time: 5.55441e-05 sec
LG_check_bfs bfs   time: 0.000144932 sec
LG_check_bfs check time: 4.03821e-06 sec
LG_check_bfs init  time: 5.72912e-05 sec
LG_check_bfs bfs   time: 0.000145275 sec
LG_check_bfs check time: 4.12017e-06 sec
LG_check_bfs init  time: 0.000118881 sec
LG_check_bfs bfs   time: 0.000149611 sec
LG_check_bfs check time: 0.000120029 sec
src 1502 n: 2003 max level: 9 nvisited: 2003
LG_check_bfs init  time: 0.000234883 sec
LG_check_bfs bfs   time: 0.000154182 sec
LG_check_bfs check time: 0.000120021 sec
src 1502 n: 2003 max level: 9 nvisited: 2003
LG_check_bfs init  time: 5.55329e-05 sec
LG_check_bfs bfs   time: 0.000147954 sec
LG_check_bfs check time: 0.000115 sec
LG_check_bfs init  time: 5.75781e-05 sec
LG_check_bfs bfs   time: 0.000149112 sec
LG_check_bfs check time: 0.000115402 sec
LG_check_bfs init  time: 5.54621e-05 sec
LG_check_bfs bfs   time: 0.000147715 sec
LG_check_bfs check time: 4.04939e-06 sec
LG_check_bfs init  time: 5.86323e-05 sec
LG_check_bfs bfs   time: 0.000148419 sec
LG_check_bfs check time: 3.90038e-06 sec
LG_check_bfs init  time: 0.000110842 sec
LG_check_bfs bfs   time: 0.000149753 sec
LG_check_bfs check time: 0.000116441 sec
LG_check_bfs init  time: 0.000225801 sec
LG_check_bfs bfs   time: 0.00015239 sec
LG_check_bfs check time: 0.000118222 sec
LG_check_bfs init  time: 5.56298e-05 sec
LG_check_bfs bfs   time: 0.000148833 sec
LG_check_bfs check time: 0.000112891 sec
LG_check_bfs init  time: 5.77904e-05 sec
LG_check_bfs bfs   time: 0.000149414 sec
LG_check_bfs check time: 0.000114009 sec
LG_check_bfs init  time: 5.54323e-05 sec
LG_check_bfs bfs   time: 0.000148442 sec
LG_check_bfs check time: 4.01214e-06 sec
LG_check_bfs init  time: 5.78202e-05 sec
LG_check_bfs bfs   time: 0.000146963 sec
LG_check_bfs check time: 3.66941e-06 sec

Matrix: cryg2500.mtx
LG_check_bfs init  time: 0.000147048 sec
LG_check_bfs bfs   time: 2.75895e-05 sec
LG_check_bfs check time: 8.04514e-05 sec
src 0 n: 2500 max level: 97 nvisited: 2500
LG_check_bfs init  time: 0.000312634 sec
LG_check_bfs bfs   time: 2.90796e-05 sec
LG_check_bfs check time: 6.73197e-05 sec
src 0 n: 2500 max level: 97 nvisited: 2500
LG_check_bfs init  time: 6.81877e-05 sec
LG_check_bfs bfs   time: 2.43895e-05 sec
LG_check_bfs check time: 7.16634e-05 sec
LG_check_bfs init  time: 6.85602e-05 sec
LG_check_bfs bfs   time: 2.5183e-05 sec
LG_check_bfs check time: 6.44326e-05 sec
LG_check_bfs init  time: 6.82808e-05 sec
LG_check_bfs bfs   time: 2.48291e-05 sec
LG_check_bfs check time: 3.42727e-06 sec
LG_check_bfs init  time: 6.80089e-05 sec
LG_check_bfs bfs   time: 2.44305e-05 sec
LG_check_bfs check time: 3.08827e-06 sec
LG_check_bfs init  time: 0.0001343 sec
LG_check_bfs bfs   time: 2.44603e-05 sec
LG_check_bfs check time: 7.43307e-05 sec
LG_check_bfs init  time: 0.000309192 sec
LG_check_bfs bfs   time: 2.90684e-05 sec
LG_check_bfs check time: 7.10711e-05 sec
LG_check_bfs init  time: 6.79083e-05 sec
LG_check_bfs bfs   time: 2.48179e-05 sec
LG_check_bfs check time: 7.21999e-05 sec
LG_check_bfs init  time: 6.83405e-05 sec
LG_check_bfs bfs   time: 2.47806e-05 sec
LG_check_bfs check time: 6.37695e-05 sec
LG_check_bfs init  time: 6.80313e-05 sec
LG_check_bfs bfs   time: 2.48887e-05 sec
LG_check_bfs check time: 3.12179e-06 sec
LG_check_bfs init  time: 6.77705e-05 sec
LG_check_bfs bfs   time: 2.46018e-05 sec
LG_check_bfs check time: 3.22983e-06 sec
LG_check_bfs init  time: 0.000134293 sec
LG_check_bfs bfs   time: 2.84724e-05 sec
LG_check_bfs check time: 7.74525e-05 sec
src 1875 n: 2500 max level: 63 nvisited: 2500
LG_check_bfs init  time: 0.000309683 sec
LG_check_bfs bfs   time: 3.19183e-05 sec
LG_check_bfs check time: 7.24792e-05 sec
src 1875 n: 2500 max level: 63 nvisited: 2500
LG_check_bfs init  time: 6.82734e-05 sec
LG_check_bfs bfs   time: 2.73287e-05 sec
LG_check_bfs check time: 7.64616e-05 sec
LG_check_bfs init  time: 6.83218e-05 sec
LG_check_bfs bfs   time: 2.81781e-05 sec
LG_check_bfs check time: 6.78897e-05 sec
LG_check_bfs init  time: 6.82324e-05 sec
LG_check_bfs bfs   time: 2.75783e-05 sec
LG_check_bfs check time: 3.36021e-06 sec
LG_check_bfs init  time: 6.81728e-05 sec
LG_check_bfs bfs   time: 2.68407e-05 sec
LG_check_bfs check time: 3.4906e-06 sec
LG_check_bfs init  time: 0.000134263 sec
LG_check_bfs bfs   time: 2.68891e-05 sec
LG_check_bfs check time: 7.75084e-05 sec
LG_check_bfs init  time: 0.000310276 sec
LG_check_bfs bfs   time: 3.14787e-05 sec
LG_check_bfs check time: 7.04303e-05 sec
LG_check_bfs init  time: 6.80014e-05 sec
LG_check_bfs bfs   time: 2.69897e-05 sec
LG_check_bfs check time: 7.96579e-05 sec
LG_check_bfs init  time: 6.83405e-05 sec
LG_check_bfs bfs   time: 2.74889e-05 sec
LG_check_bfs check time: 6.7912e-05 sec
LG_check_bfs init  time: 6.78301e-05 sec
LG_check_bfs bfs   time: 2.75709e-05 sec
LG_check_bfs check time: 3.14787e-06 sec
LG_check_bfs init  time: 6.77183e-05 sec
LG_check_bfs bfs   time: 2.70568e-05 sec
LG_check_bfs check time: 3.01003e-06 sec

Matrix: tree-example.mtx
src 0 n: 6 max level: 4 nvisited: 6
src 0 n: 6 max level: 4 nvisited: 6
src 2 n: 6 max level: 3 nvisited: 6
src 2 n: 6 max level: 3 nvisited: 6
src 4 n: 6 max level: 2 nvisited: 6
src 4 n: 6 max level: 2 nvisited: 6

Matrix: west0067.mtx
src 0 n: 67 max level: 5 nvisited: 67
src 0 n: 67 max level: 5 nvisited: 67
src 17 n: 67 max level: 4 nvisited: 67
src 17 n: 67 max level: 4 nvisited: 67
src 34 n: 67 max level: 4 nvisited: 67
src 34 n: 67 max level: 4 nvisited: 67
src 51 n: 67 max level: 4 nvisited: 67
src 51 n: 67 max level: 4 nvisited: 67

Matrix: karate.mtx
src 0 n: 34 max level: 3 nvisited: 34
src 0 n: 34 max level: 3 nvisited: 34
src 9 n: 34 max level: 4 nvisited: 34
src 9 n: 34 max level: 4 nvisited: 34
src 18 n: 34 max level: 5 nvisited: 34
src 18 n: 34 max level: 5 nvisited: 34
src 27 n: 34 max level: 4 nvisited: 34
src 27 n: 34 max level: 4 nvisited: 34

Matrix: matrix_bool.mtx
src 0 n: 7 max level: 3 nvisited: 7
src 0 n: 7 max level: 3 nvisited: 7
src 2 n: 7 max level: 1 nvisited: 2
src 2 n: 7 max level: 1 nvisited: 2
src 4 n: 7 max level: 2 nvisited: 3
src 4 n: 7 max level: 2 nvisited: 3
src 6 n: 7 max level: 3 nvisited: 7
src 6 n: 7 max level: 3 nvisited: 7

Matrix: skew_fp32.mtx
src 0 n: 6 max level: 2 nvisited: 6
src 0 n: 6 max level: 2 nvisited: 6
src 2 n: 6 max level: 2 nvisited: 6
src 2 n: 6 max level: 2 nvisited: 6
src 4 n: 6 max level: 2 nvisited: 6
src 4 n: 6 max level: 2 nvisited: 6

Matrix: pushpull.mtx
LG_check_bfs init  time: 0.000234425 sec
LG_check_bfs bfs   time: 0.000477515 sec
LG_check_bfs check time: 0.000148915 sec
src 0 n: 4000 max level: 2005 nvisited: 4000
LG_check_bfs init  time: 0.000363756 sec
LG_check_bfs bfs   time: 0.000466477 sec
LG_check_bfs check time: 0.000147082 sec
src 0 n: 4000 max level: 2005 nvisited: 4000
LG_check_bfs init  time: 0.000108603 sec
LG_check_bfs bfs   time: 0.000457887 sec
LG_check_bfs check time: 0.000143293 sec
LG_check_bfs init  time: 0.000109114 sec
LG_check_bfs bfs   time: 0.000459135 sec
LG_check_bfs check time: 0.000141609 sec
LG_check_bfs init  time: 0.00010867 sec
LG_check_bfs bfs   time: 0.000458777 sec
LG_check_bfs check time: 6.37025e-06 sec
LG_check_bfs init  time: 0.000108443 sec
LG_check_bfs bfs   time: 0.000462145 sec
LG_check_bfs check time: 8.3074e-06 sec
LG_check_bfs init  time: 0.000214752 sec
LG_check_bfs bfs   time: 0.000470966 sec
LG_check_bfs check time: 0.000147291 sec
LG_check_bfs init  time: 0.000358015 sec
LG_check_bfs bfs   time: 0.000459768 sec
LG_check_bfs check time: 0.000147142 sec
LG_check_bfs init  time: 0.000108223 sec
LG_check_bfs bfs   time: 0.000469815 sec
LG_check_bfs check time: 0.000141531 sec
LG_check_bfs init  time: 0.000113323 sec
LG_check_bfs bfs   time: 0.000457406 sec
LG_check_bfs check time: 0.00014114 sec
LG_check_bfs init  time: 0.000108425 sec
LG_check_bfs bfs   time: 0.000464525 sec
LG_check_bfs check time: 7.58842e-06 sec
LG_check_bfs init  time: 0.000109442 sec
LG_check_bfs bfs   time: 0.000457738 sec
LG_check_bfs check time: 6.29947e-06 sec
LG_check_bfs init  time: 0.000215042 sec
LG_check_bfs bfs   time: 0.000479087 sec
LG_check_bfs check time: 0.000148892 sec
src 3000 n: 4000 max level: 1006 nvisited: 4000
LG_check_bfs init  time: 0.000398424 sec
LG_check_bfs bfs   time: 0.000491276 sec
LG_check_bfs check time: 0.000147313 sec
src 3000 n: 4000 max level: 1006 nvisited: 4000
LG_check_bfs init  time: 0.000108592 sec
LG_check_bfs bfs   time: 0.000481505 sec
LG_check_bfs check time: 0.000142369 sec
LG_check_bfs init  time: 0.000108801 sec
LG_check_bfs bfs   time: 0.000481874 sec
LG_check_bfs check time: 0.000142481 sec
LG_check_bfs init  time: 0.000108555 sec
LG_check_bfs bfs   time: 0.000483934 sec
LG_check_bfs check time: 5.77047e-06 sec
LG_check_bfs init  time: 0.00010867 sec
LG_check_bfs bfs   time: 0.000487655 sec
LG_check_bfs check time: 6.18771e-06 sec
LG_check_bfs init  time: 0.000214532 sec
LG_check_bfs bfs   time: 0.000492364 sec
LG_check_bfs check time: 0.000146125 sec
LG_check_bfs init  time: 0.000396714 sec
LG_check_bfs bfs   time: 0.000485118 sec
LG_check_bfs check time: 0.000145391 sec
LG_check_bfs init  time: 0.000108622 sec
LG_check_bfs bfs   time: 0.000486448 sec
LG_check_bfs check time: 0.000142403 sec
LG_check_bfs init  time: 0.000108853 sec
LG_check_bfs bfs   time: 0.000479396 sec
LG_check_bfs check time: 0.000139933 sec
LG_check_bfs init  time: 0.000108242 sec
LG_check_bfs bfs   time: 0.000484828 sec
LG_check_bfs check time: 6.67945e-06 sec
LG_check_bfs init  time: 0.000108633 sec
LG_check_bfs bfs   time: 0.000476219 sec
LG_check_bfs check time: 6.13928e-06 sec
[ OK ]
Test BreadthFirstSearch_brutal...               
Matrix: A.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 51, succeeded with 32 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 39 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 39 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs

Matrix: cover.mtx
brutal test at line  640: LG_nmalloc: 52
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 56, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 47 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 33 mallocs

Matrix: jagmesh7.mtx
skipped

Matrix: ldbc-cdlp-directed-example.mtx
brutal test at line  640: LG_nmalloc: 52
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 56, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 43 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 33 mallocs

Matrix: ldbc-cdlp-undirected-example.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 51, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 35 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs

Matrix: ldbc-directed-example.mtx
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 26 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 36 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 43 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 26 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 36 mallocs

Matrix: ldbc-undirected-example.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 51, succeeded with 42 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 43 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs

Matrix: ldbc-wcc-example.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 51, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 41 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 45 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 41 mallocs

Matrix: LFAT5.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 53, succeeded with 47 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 45 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 43 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 41 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 54, succeeded with 43 mallocs

Matrix: msf1.mtx
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 60, succeeded with 35 mallocs

Matrix: msf2.mtx
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 26 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 36 mallocs

Matrix: msf3.mtx
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 32 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 26 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 36 mallocs

Matrix: sample2.mtx
brutal test at line  640: LG_nmalloc: 52
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 56, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 41 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 39 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 41 mallocs

Matrix: sample.mtx
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 42 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 35 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 35 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 55
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 61, succeeded with 43 mallocs

Matrix: olm1000.mtx
skipped

Matrix: bcsstk13.mtx
skipped

Matrix: cryg2500.mtx
skipped

Matrix: tree-example.mtx
brutal test at line  640: LG_nmalloc: 47
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 51, succeeded with 42 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 53 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 31 mallocs

Matrix: west0067.mtx
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 52 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 56 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 54 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 54 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 54
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 58, succeeded with 54 mallocs

Matrix: karate.mtx
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 44 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 52 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 48 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 46 mallocs
brutal test at line  640: LG_nmalloc: 48
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 52, succeeded with 46 mallocs

Matrix: matrix_bool.mtx
brutal test at line  640: LG_nmalloc: 52
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 56, succeeded with 37 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 33 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 59, succeeded with 47 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 40 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 33 mallocs

Matrix: skew_fp32.mtx
brutal test at line  640: LG_nmalloc: 52
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 56, succeeded with 32 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 31 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 34 mallocs
brutal test at line  640: LG_nmalloc: 53
method: LAGraph_BreadthFirstSearch (&level, &parent, G, src, (_Bool) pushpull, msg)
brutal test at line  640: LG_nmalloc: 57, succeeded with 31 mallocs

Matrix: pushpull.mtx
skipped
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   1.03 sec
----------------------------------------------------------
Test Passed.
"ctest_BreadthFirstSearch" end time: Dec 07 10:31 EST
"ctest_BreadthFirstSearch" time elapsed: 00:00:01
----------------------------------------------------------

3/40 Testing: ctest_CheckGraph
3/40 Test: ctest_CheckGraph
Command: "/home/afanasyev/LAGraph/build/src/test/test_CheckGraph"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_CheckGraph" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test CheckGraph...                              [ OK ]
Test CheckGraph_failures...                     
Testing LAGraph_CheckGraph error handling:
msg: adjacency matrix invalid
msg: G->AT matrix invalid
msg: A and AT types are different
msg: only by-row format supported
msg: rowdegree invalid size
msg: rowdegree has wrong type
msg: coldegree invalid size
msg: coldegree has wrong type
msg: only by-row format supported
msg: graph kind invalid
msg: graph adjacency matrix is NULL
msg: graph is NULL
[ OK ]
Test CheckGraph_brutal...                       
brutal test at line  265: LG_nmalloc: 46
method: LAGraph_CheckGraph (G, msg)
brutal test at line  265: LG_nmalloc: 46, succeeded with 0 mallocs
brutal test at line  268: LG_nmalloc: 46
method: LAGraph_Property_AT (G, msg)
brutal test at line  268: LG_nmalloc: 46, succeeded with 0 mallocs
brutal test at line  269: LG_nmalloc: 46
method: LAGraph_CheckGraph (G, msg)
brutal test at line  269: LG_nmalloc: 46, succeeded with 0 mallocs
brutal test at line  270: LG_nmalloc: 46
method: LAGraph_Property_RowDegree (G, msg)
brutal test at line  270: LG_nmalloc: 48, succeeded with 6 mallocs
brutal test at line  271: LG_nmalloc: 48
method: LAGraph_CheckGraph (G, msg)
brutal test at line  271: LG_nmalloc: 48, succeeded with 0 mallocs
brutal test at line  272: LG_nmalloc: 48
method: LAGraph_Property_ColDegree (G, msg)
brutal test at line  272: LG_nmalloc: 48, succeeded with 0 mallocs
brutal test at line  273: LG_nmalloc: 48
method: LAGraph_CheckGraph (G, msg)
brutal test at line  273: LG_nmalloc: 48, succeeded with 0 mallocs
brutal test at line  274: LG_nmalloc: 48
method: LAGraph_Delete (&G, msg)
brutal test at line  274: LG_nmalloc: 41, succeeded with 0 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_CheckGraph" end time: Dec 07 10:31 EST
"ctest_CheckGraph" time elapsed: 00:00:00
----------------------------------------------------------

4/40 Testing: ctest_ConnectedComponents
4/40 Test: ctest_ConnectedComponents
Command: "/home/afanasyev/LAGraph/build/src/test/test_ConnectedComponents"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_ConnectedComponents" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test cc...                                      
Matrix: karate.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 34 entries: 34
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: karate.mtx
# of components: 1
Component 0, size 34
LG_check_cc init  time: 8.88109e-06 sec
LG_check_cc component time: 1.04681e-06 sec
LG_check_cc check time: 2.30968e-06 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 4.40702e-06 sec
LG_check_cc component time: 9.61125e-07 sec
LG_check_cc check time: 1.13994e-06 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 4.73857e-06 sec
LG_check_cc component time: 7.71135e-07 sec
LG_check_cc check time: 1.13994e-06 sec

------ CC_LACC:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 4.70132e-06 sec
LG_check_cc component time: 1.01328e-06 sec
LG_check_cc check time: 1.19954e-06 sec

------ CC_LACC:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 4.40329e-06 sec
LG_check_cc component time: 7.41333e-07 sec
LG_check_cc check time: 1.18837e-06 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 34 entries: 34
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: karate.mtx
# of components: 1
Component 0, size 34
LG_check_cc init  time: 3.8892e-06 sec
LG_check_cc component time: 6.18398e-07 sec
LG_check_cc check time: 1.07288e-06 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 3.90038e-06 sec
LG_check_cc component time: 5.69969e-07 sec
LG_check_cc check time: 1.05053e-06 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 34
LG_check_cc init  time: 3.93018e-06 sec
LG_check_cc component time: 4.99189e-07 sec
LG_check_cc check time: 1.12876e-06 sec

Matrix: A.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 7 entries: 7
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
# components:      1 Matrix: A.mtx
# of components: 1
Component 0, size 7
LG_check_cc init  time: 5.5097e-06 sec
LG_check_cc component time: 3.42727e-07 sec
LG_check_cc check time: 1.02818e-06 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 2.64123e-06 sec
LG_check_cc component time: 2.49594e-07 sec
LG_check_cc check time: 1.02073e-06 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 2.92063e-06 sec
LG_check_cc component time: 2.30968e-07 sec
LG_check_cc check time: 9.68575e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 3.16277e-06 sec
LG_check_cc component time: 2.98023e-07 sec
LG_check_cc check time: 1.13994e-06 sec

------ CC_LACC:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 3.12179e-06 sec
LG_check_cc component time: 2.57045e-07 sec
LG_check_cc check time: 1.03936e-06 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 7 entries: 7
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
# components:      1 Matrix: A.mtx
# of components: 1
Component 0, size 7
LG_check_cc init  time: 2.65986e-06 sec
LG_check_cc component time: 2.30968e-07 sec
LG_check_cc check time: 9.87202e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 2.70084e-06 sec
LG_check_cc component time: 2.01166e-07 sec
LG_check_cc check time: 1.06916e-06 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 7
LG_check_cc init  time: 2.84985e-06 sec
LG_check_cc component time: 2.19792e-07 sec
LG_check_cc check time: 1.13994e-06 sec

Matrix: jagmesh7.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 1138 entries: 1138
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: jagmesh7.mtx
# of components: 1
LG_check_cc init  time: 3.58187e-05 sec
LG_check_cc component time: 2.69488e-05 sec
LG_check_cc check time: 1.24052e-06 sec

------ CC_FastSV5:
# of components: 1
LG_check_cc init  time: 4.14513e-05 sec
LG_check_cc component time: 3.12999e-05 sec
LG_check_cc check time: 1.57207e-06 sec

------ CC_BORUVKA:
# of components: 1
LG_check_cc init  time: 3.82513e-05 sec
LG_check_cc component time: 2.93404e-05 sec
LG_check_cc check time: 1.54972e-06 sec

------ CC_LACC:
# of components: 1
LG_check_cc init  time: 3.72604e-05 sec
LG_check_cc component time: 2.77013e-05 sec
LG_check_cc check time: 1.09151e-06 sec

------ CC_LACC:
# of components: 1
LG_check_cc init  time: 3.79197e-05 sec
LG_check_cc component time: 3.07783e-05 sec
LG_check_cc check time: 1.11759e-06 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 1138 entries: 1138
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: jagmesh7.mtx
# of components: 1
LG_check_cc init  time: 3.56622e-05 sec
LG_check_cc component time: 2.59504e-05 sec
LG_check_cc check time: 8.60542e-07 sec

------ CC_FastSV5:
# of components: 1
LG_check_cc init  time: 4.11794e-05 sec
LG_check_cc component time: 2.63304e-05 sec
LG_check_cc check time: 1.44169e-06 sec

------ CC_BORUVKA:
# of components: 1
LG_check_cc init  time: 3.79086e-05 sec
LG_check_cc component time: 2.71201e-05 sec
LG_check_cc check time: 1.00955e-06 sec

Matrix: ldbc-cdlp-undirected-example.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 8 entries: 8
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
# components:      1 Matrix: ldbc-cdlp-undirected-example.mtx
# of components: 1
Component 0, size 8
LG_check_cc init  time: 6.47083e-06 sec
LG_check_cc component time: 3.7998e-07 sec
LG_check_cc check time: 7.18981e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.68966e-06 sec
LG_check_cc component time: 3.20375e-07 sec
LG_check_cc check time: 5.81145e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.57045e-06 sec
LG_check_cc component time: 2.83122e-07 sec
LG_check_cc check time: 4.99189e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.98023e-06 sec
LG_check_cc component time: 2.38419e-07 sec
LG_check_cc check time: 6.33299e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.90945e-06 sec
LG_check_cc component time: 2.19792e-07 sec
LG_check_cc check time: 5.88596e-07 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 8 entries: 8
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
# components:      1 Matrix: ldbc-cdlp-undirected-example.mtx
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.36928e-06 sec
LG_check_cc component time: 2.08616e-07 sec
LG_check_cc check time: 7.22706e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.57045e-06 sec
LG_check_cc component time: 2.12342e-07 sec
LG_check_cc check time: 5.51343e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 8
LG_check_cc init  time: 2.56673e-06 sec
LG_check_cc component time: 2.12342e-07 sec
LG_check_cc check time: 5.40167e-07 sec

Matrix: ldbc-undirected-example.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 9 entries: 9
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
# components:      1 Matrix: ldbc-undirected-example.mtx
# of components: 1
Component 0, size 9
LG_check_cc init  time: 5.21168e-06 sec
LG_check_cc component time: 3.7998e-07 sec
LG_check_cc check time: 5.58794e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.44752e-06 sec
LG_check_cc component time: 4.32134e-07 sec
LG_check_cc check time: 5.28991e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.54065e-06 sec
LG_check_cc component time: 2.79397e-07 sec
LG_check_cc check time: 5.7742e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.80887e-06 sec
LG_check_cc component time: 2.42144e-07 sec
LG_check_cc check time: 6.92904e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.80142e-06 sec
LG_check_cc component time: 3.98606e-07 sec
LG_check_cc check time: 6.63102e-07 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 9 entries: 9
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
# components:      1 Matrix: ldbc-undirected-example.mtx
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.44752e-06 sec
LG_check_cc component time: 3.98606e-07 sec
LG_check_cc check time: 5.81145e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.39164e-06 sec
LG_check_cc component time: 4.76837e-07 sec
LG_check_cc check time: 4.80562e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 9
LG_check_cc init  time: 2.56673e-06 sec
LG_check_cc component time: 3.91155e-07 sec
LG_check_cc check time: 4.99189e-07 sec

Matrix: ldbc-wcc-example.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 10 entries: 10
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
# components:      1 Matrix: ldbc-wcc-example.mtx
# of components: 1
Component 0, size 10
LG_check_cc init  time: 5.04032e-06 sec
LG_check_cc component time: 4.39584e-07 sec
LG_check_cc check time: 5.40167e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.76044e-06 sec
LG_check_cc component time: 3.50177e-07 sec
LG_check_cc check time: 5.28991e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.86102e-06 sec
LG_check_cc component time: 3.31551e-07 sec
LG_check_cc check time: 5.28991e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.96161e-06 sec
LG_check_cc component time: 3.27826e-07 sec
LG_check_cc check time: 6.10948e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.9318e-06 sec
LG_check_cc component time: 2.6077e-07 sec
LG_check_cc check time: 6.70552e-07 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 10 entries: 10
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
# components:      1 Matrix: ldbc-wcc-example.mtx
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.52947e-06 sec
LG_check_cc component time: 2.30968e-07 sec
LG_check_cc check time: 4.99189e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.67848e-06 sec
LG_check_cc component time: 2.79397e-07 sec
LG_check_cc check time: 4.99189e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 10
LG_check_cc init  time: 2.5779e-06 sec
LG_check_cc component time: 2.19792e-07 sec
LG_check_cc check time: 5.58794e-07 sec

Matrix: LFAT5.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 14 entries: 14
    (0)   0
    (1)   1
    (2)   2
    (3)   0
    (4)   0
    (5)   1
    (6)   2
    (7)   0
    (8)   0
    (9)   1
    (10)   2
    (11)   0
    (12)   0
    (13)   0
# components:      3 Matrix: LFAT5.mtx
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 6.64964e-06 sec
LG_check_cc component time: 4.80562e-07 sec
LG_check_cc check time: 5.21541e-07 sec

------ CC_FastSV5:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 3.75137e-06 sec
LG_check_cc component time: 4.28408e-07 sec
LG_check_cc check time: 5.40167e-07 sec

------ CC_BORUVKA:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 3.63216e-06 sec
LG_check_cc component time: 3.42727e-07 sec
LG_check_cc check time: 5.10365e-07 sec

------ CC_LACC:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 4.33996e-06 sec
LG_check_cc component time: 3.7998e-07 sec
LG_check_cc check time: 1.03936e-06 sec

------ CC_LACC:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 4.42192e-06 sec
LG_check_cc component time: 3.91155e-07 sec
LG_check_cc check time: 1.08033e-06 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 14 entries: 14
    (0)   0
    (1)   1
    (2)   2
    (3)   0
    (4)   0
    (5)   1
    (6)   2
    (7)   0
    (8)   0
    (9)   1
    (10)   2
    (11)   0
    (12)   0
    (13)   0
# components:      3 Matrix: LFAT5.mtx
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 3.95998e-06 sec
LG_check_cc component time: 3.7998e-07 sec
LG_check_cc check time: 1.0021e-06 sec

------ CC_FastSV5:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 4.1686e-06 sec
LG_check_cc component time: 2.98023e-07 sec
LG_check_cc check time: 1.00955e-06 sec

------ CC_BORUVKA:
# of components: 3
Component 0, size 8
Component 1, size 3
Component 2, size 3
LG_check_cc init  time: 3.90783e-06 sec
LG_check_cc component time: 2.71946e-07 sec
LG_check_cc check time: 1.06171e-06 sec

Matrix: LFAT5_two.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 28 entries: 28
    (0)   0
    (1)   1
    (2)   2
    (3)   0
    (4)   0
    (5)   1
    (6)   2
    (7)   0
    (8)   0
    (9)   1
    (10)   2
    (11)   0
    (12)   0
    (13)   0
    (14)   14
    (15)   15
    (16)   16
    (17)   14
    (18)   14
    (19)   15
    (20)   16
    (21)   14
    (22)   14
    (23)   15
    (24)   16
    (25)   14
    (26)   14
    (27)   14
# components:      6 Matrix: LFAT5_two.mtx
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 6.53043e-06 sec
LG_check_cc component time: 4.80562e-07 sec
LG_check_cc check time: 1.04308e-06 sec

------ CC_FastSV5:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 6.23986e-06 sec
LG_check_cc component time: 4.09782e-07 sec
LG_check_cc check time: 9.42498e-07 sec

------ CC_BORUVKA:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 6.06105e-06 sec
LG_check_cc component time: 3.61353e-07 sec
LG_check_cc check time: 9.574e-07 sec

------ CC_LACC:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 1.26697e-05 sec
LG_check_cc component time: 5.88596e-07 sec
LG_check_cc check time: 7.1153e-07 sec

------ CC_LACC:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 5.99772e-06 sec
LG_check_cc component time: 7.07805e-07 sec
LG_check_cc check time: 6.70552e-07 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 28 entries: 28
    (0)   0
    (1)   1
    (2)   2
    (3)   0
    (4)   0
    (5)   1
    (6)   2
    (7)   0
    (8)   0
    (9)   1
    (10)   2
    (11)   0
    (12)   0
    (13)   0
    (14)   14
    (15)   15
    (16)   16
    (17)   14
    (18)   14
    (19)   15
    (20)   16
    (21)   14
    (22)   14
    (23)   15
    (24)   16
    (25)   14
    (26)   14
    (27)   14
# components:      6 Matrix: LFAT5_two.mtx
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 5.37187e-06 sec
LG_check_cc component time: 3.7998e-07 sec
LG_check_cc check time: 5.99772e-07 sec

------ CC_FastSV5:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 5.49853e-06 sec
LG_check_cc component time: 3.61353e-07 sec
LG_check_cc check time: 5.58794e-07 sec

------ CC_BORUVKA:
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 5.55068e-06 sec
LG_check_cc component time: 3.39001e-07 sec
LG_check_cc check time: 5.21541e-07 sec

Matrix: bcsstk13.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 2003 entries: 2003
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: bcsstk13.mtx
# of components: 1
LG_check_cc init  time: 6.62729e-05 sec
LG_check_cc component time: 0.000208464 sec
LG_check_cc check time: 2.01166e-06 sec

------ CC_FastSV5:
# of components: 1
LG_check_cc init  time: 7.0367e-05 sec
LG_check_cc component time: 0.000187814 sec
LG_check_cc check time: 1.76951e-06 sec

------ CC_BORUVKA:
# of components: 1
LG_check_cc init  time: 6.72303e-05 sec
LG_check_cc component time: 0.000183593 sec
LG_check_cc check time: 1.75834e-06 sec

------ CC_LACC:
# of components: 1
LG_check_cc init  time: 6.71111e-05 sec
LG_check_cc component time: 0.000179853 sec
LG_check_cc check time: 2.07871e-06 sec

------ CC_LACC:
# of components: 1
LG_check_cc init  time: 6.53788e-05 sec
LG_check_cc component time: 0.000196792 sec
LG_check_cc check time: 2.00048e-06 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 2003 entries: 2003
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
# components:      1 Matrix: bcsstk13.mtx
# of components: 1
LG_check_cc init  time: 7.49789e-05 sec
LG_check_cc component time: 0.000266381 sec
LG_check_cc check time: 2.51085e-06 sec

------ CC_FastSV5:
# of components: 1
LG_check_cc init  time: 8.32006e-05 sec
LG_check_cc component time: 0.000340994 sec
LG_check_cc check time: 3.42727e-06 sec

------ CC_BORUVKA:
# of components: 1
LG_check_cc init  time: 7.23302e-05 sec
LG_check_cc component time: 0.000164039 sec
LG_check_cc check time: 2.14204e-06 sec

Matrix: tree-example.mtx

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 6 entries: 6
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
# components:      1 Matrix: tree-example.mtx
# of components: 1
Component 0, size 6
LG_check_cc init  time: 6.66082e-06 sec
LG_check_cc component time: 4.58211e-07 sec
LG_check_cc check time: 7.37607e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.68966e-06 sec
LG_check_cc component time: 3.09199e-07 sec
LG_check_cc check time: 6.4075e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.70084e-06 sec
LG_check_cc component time: 3.31551e-07 sec
LG_check_cc check time: 5.28991e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.95788e-06 sec
LG_check_cc component time: 2.79397e-07 sec
LG_check_cc check time: 6.70552e-07 sec

------ CC_LACC:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.71946e-06 sec
LG_check_cc component time: 3.50177e-07 sec
LG_check_cc check time: 6.51926e-07 sec

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
GrB_UINT32 vector: n: 6 entries: 6
    (0)   0
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
# components:      1 Matrix: tree-example.mtx
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.42144e-06 sec
LG_check_cc component time: 2.71946e-07 sec
LG_check_cc check time: 6.63102e-07 sec

------ CC_FastSV5:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.2091e-06 sec
LG_check_cc component time: 3.68804e-07 sec
LG_check_cc check time: 5.28991e-07 sec

------ CC_BORUVKA:
# of components: 1
Component 0, size 6
LG_check_cc init  time: 2.48849e-06 sec
LG_check_cc component time: 5.10365e-07 sec
LG_check_cc check time: 6.48201e-07 sec
[ OK ]
Test cc_brutal...                               
brutal test at line  200: LG_nmalloc: 46
method: LAGraph_CheckGraph (G, msg)
brutal test at line  200: LG_nmalloc: 46, succeeded with 0 mallocs

--- CC: FastSV6 if SuiteSparse, Boruvka if vanilla:
brutal test at line  204: LG_nmalloc: 46
method: LAGraph_ConnectedComponents (&C, G, msg)
brutal test at line  204: LG_nmalloc: 48, succeeded with 39 mallocs
brutal test at line  205: LG_nmalloc: 48
method: LAGraph_Vector_print (C, 2, stdout, msg)
GrB_UINT32 vector: n: 28 entries: 28
GrB_UINT32 vector: n: 28 entries: 28
GrB_UINT32 vector: n: 28 entries: 28
    (0)   0
    (1)   1
    (2)   2
    (3)   0
    (4)   0
    (5)   1
    (6)   2
    (7)   0
    (8)   0
    (9)   1
    (10)   2
    (11)   0
    (12)   0
    (13)   0
    (14)   14
    (15)   15
    (16)   16
    (17)   14
    (18)   14
    (19)   15
    (20)   16
    (21)   14
    (22)   14
    (23)   15
    (24)   16
    (25)   14
    (26)   14
    (27)   14
brutal test at line  205: LG_nmalloc: 48, succeeded with 2 mallocs
# components:      6 Matrix: LFAT_two
# of components: 6
Component 0, size 8
Component 1, size 3
Component 2, size 3
Component 14, size 8
Component 15, size 3
Component 16, size 3
LG_check_cc init  time: 9.76026e-06 sec
LG_check_cc component time: 1.00955e-06 sec
LG_check_cc check time: 2.2687e-06 sec
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.13 sec
----------------------------------------------------------
Test Passed.
"ctest_ConnectedComponents" end time: Dec 07 10:31 EST
"ctest_ConnectedComponents" time elapsed: 00:00:00
----------------------------------------------------------

5/40 Testing: ctest_DeleteProperties
5/40 Test: ctest_DeleteProperties
Command: "/home/afanasyev/LAGraph/build/src/test/test_DeleteProperties"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_DeleteProperties" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Property_DeleteProperties...               
Graph: ndiag -1, symmetric structure: 0
  adj matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   1
    (3)   2
    (4)   1
    (5)   1
    (6)   3
  adj transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8
  col degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   1

Graph: ndiag -1, symmetric structure: 0
  adj matrix: GrB_FP64 matrix: 10-by-10 entries: 17
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (4)   3
    (5)   2
    (6)   1
    (7)   1
    (8)   1
  adj transposed: GrB_FP64 matrix: 10-by-10 entries: 17
    (0, 2)   0.53
    (0, 7)   0.39
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52
  col degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   2
    (2)   3
    (3)   5
    (4)   3
    (7)   2
    (9)   2

Graph: ndiag -1, symmetric structure: 1
  adj matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   0.9
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Graph: ndiag -1, symmetric structure: 1
  adj matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 1)   1
    (4, 3)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 6)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   5
    (2)   5
    (3)   5
    (4)   3
    (5)   4
    (6)   5

Graph: ndiag -1, symmetric structure: 1
  adj matrix: GrB_FP64 matrix: 2003-by-2003 entries: 83883
    (0, 0)   2.77281e+08
    (0, 1)   3.10192e+06
    (0, 2)   -5.11313e+07
    (0, 3)   -1.31227e+06
    (0, 4)   -6.12603e+07
    (0, 5)   1.0235e+09
    (0, 6)   -4.75432e+07
    (0, 7)   -1.32204e+06
    (0, 8)   3.74131e+06
    (0, 9)   1.24027e+06
    (0, 10)   84564.5
    (0, 11)   -3.7798e+07
    (0, 36)   -2.03602e+08
    (0, 40)   6.09325e+07
    (0, 41)   1.0613e+09
    (0, 156)   -1.59304e+07
    (0, 157)   -1.11585e+06
    (0, 158)   5.11313e+07
    (0, 159)   1.24027e+06
    (0, 160)   84564.5
    (0, 161)   264.818
    (0, 162)   -1.16509e+07
    (0, 163)   -664028
    (0, 164)   -3.74131e+06
    (0, 165)   -1.31227e+06
    (0, 166)   -6.12603e+07
    (0, 167)   26864.5
    (0, 168)   1.44571e+06
    (0, 172)   6.09325e+07
    (0, 173)   26599.7
    ...
  row degree: GrB_INT64 vector: n: 2003 entries: 2003
    (0)   30
    (1)   28
    (2)   21
    (3)   24
    (4)   28
    (5)   26
    (6)   36
    (7)   36
    (8)   24
    (9)   33
    (10)   33
    (11)   30
    (12)   36
    (13)   36
    (14)   24
    (15)   33
    (16)   33
    (17)   30
    (18)   36
    (19)   36
    (20)   24
    (21)   33
    (22)   33
    (23)   30
    (24)   30
    (25)   28
    (26)   21
    (27)   24
    (28)   28
    (29)   26
    ...
[ OK ]
Test Property_DeleteProperties_brutal...        [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.10 sec
----------------------------------------------------------
Test Passed.
"ctest_DeleteProperties" end time: Dec 07 10:31 EST
"ctest_DeleteProperties" time elapsed: 00:00:00
----------------------------------------------------------

6/40 Testing: ctest_DisplayGraph
6/40 Test: ctest_DisplayGraph
Command: "/home/afanasyev/LAGraph/build/src/test/test_DisplayGraph"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_DisplayGraph" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test DisplayGraph...                            
############################# TRIAL: 0

########### cover.mtx: pr: -1 (nothing)

########### cover.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 7 entries: 12 type: int32

########### cover.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12

########### cover.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

########### cover.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

########### cover.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

########### cover.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

############################# TRIAL: 1

########### cover.mtx: pr: -1 (nothing)

########### cover.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 7 entries: 12 type: int32

########### cover.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12

########### cover.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

########### cover.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

########### cover.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

########### cover.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

############################# TRIAL: 0

########### ldbc-directed-example.mtx: pr: -1 (nothing)

########### ldbc-directed-example.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 10 entries: 18 type: double

########### ldbc-directed-example.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18

########### ldbc-directed-example.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

########### ldbc-directed-example.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

########### ldbc-directed-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

########### ldbc-directed-example.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

############################# TRIAL: 1

########### ldbc-directed-example.mtx: pr: -1 (nothing)

########### ldbc-directed-example.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 10 entries: 18 type: double

########### ldbc-directed-example.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18

########### ldbc-directed-example.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

########### ldbc-directed-example.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

########### ldbc-directed-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159265358979
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

########### ldbc-directed-example.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159265358979
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

############################# TRIAL: 0

########### ldbc-undirected-example.mtx: pr: -1 (nothing)

########### ldbc-undirected-example.mtx: pr: 0 (single line)
Graph: kind: undirected, nodes: 9 entries: 24 type: double

########### ldbc-undirected-example.mtx: pr: 1 (terse)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24

########### ldbc-undirected-example.mtx: pr: 2 (summary)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 3 (all)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

############################# TRIAL: 1

########### ldbc-undirected-example.mtx: pr: -1 (nothing)

########### ldbc-undirected-example.mtx: pr: 0 (single line)
Graph: kind: undirected, nodes: 9 entries: 24 type: double

########### ldbc-undirected-example.mtx: pr: 1 (terse)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24

########### ldbc-undirected-example.mtx: pr: 2 (summary)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 3 (all)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

############################# TRIAL: 0

########### west0067.mtx: pr: -1 (nothing)

########### west0067.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 67 entries: 295 type: double

########### west0067.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295

########### west0067.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...

########### west0067.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    (7, 10)   0.4
    (7, 15)   0.4
    (8, 0)   -0.0632598
    (8, 5)   -0.8
    (8, 6)   0.0117829
    (8, 11)   0.4
    (8, 16)   0.4
    (9, 12)   -1.26582
    (9, 13)   -1.01266
    (9, 14)   -0.759494
    (9, 15)   -0.506329
    (9, 16)   -0.253165
    (9, 17)   1
    (10, 12)   0.333333
    (10, 19)   -0.207176
    (10, 20)   -1
    (11, 13)   0.333333
    (11, 19)   -0.214039
    (11, 21)   -1
    (12, 14)   0.333333
    (12, 19)   -0.214421
    (12, 22)   -1
    (13, 15)   0.333333
    (13, 19)   -0.198677
    (13, 23)   -1
    (14, 16)   0.333333
    (14, 18)   0.666667
    (14, 19)   -0.165687
    (14, 24)   -1
    (15, 19)   0.124305
    (15, 20)   0.6
    (15, 25)   0.45
    (15, 30)   -0.207099
    (15, 31)   -1.05
    (16, 19)   0.128423
    (16, 21)   0.6
    (16, 26)   0.45
    (16, 30)   -0.2233
    (16, 32)   -1.05
    (17, 19)   0.128652
    (17, 22)   0.6
    (17, 27)   0.45
    (17, 30)   -0.228626
    (17, 33)   -1.05
    (18, 19)   0.119206
    (18, 23)   0.6
    (18, 28)   0.45
    (18, 30)   -0.202453
    (18, 34)   -1.05
    (19, 19)   0.0994125
    (19, 24)   0.6
    (19, 29)   0.45
    (19, 30)   -0.138523
    (19, 35)   -1.05
    (20, 1)   -0.915953
    (20, 37)   1.5674
    (20, 42)   -0.278842
    (21, 2)   -0.915953
    (21, 38)   1.25392
    (21, 42)   -0.268019
    (22, 3)   -0.915953
    (22, 39)   0.940439
    (22, 42)   -0.232372
    (23, 4)   -0.915953
    (23, 40)   0.626959
    (23, 42)   -0.157508
    (24, 0)   0.139421
    (24, 1)   0.4
    (24, 30)   -0.207099
    (24, 31)   -1.05
    (24, 36)   0.0814745
    (24, 37)   0.65
    (25, 0)   0.134009
    (25, 2)   0.4
    (25, 30)   -0.2233
    (25, 32)   -1.05
    (25, 36)   0.0978901
    (25, 38)   0.65
    (26, 0)   0.116186
    (26, 3)   0.4
    (26, 30)   -0.228626
    (26, 33)   -1.05
    (26, 36)   0.113161
    (26, 39)   0.65
    (27, 0)   0.0787541
    (27, 4)   0.4
    (27, 30)   -0.202453
    (27, 34)   -1.05
    (27, 36)   0.115056
    (27, 40)   0.65
    (28, 0)   0.0316299
    (28, 5)   0.4
    (28, 30)   -0.138523
    (28, 35)   -1.05
    (28, 36)   0.0924191
    (28, 41)   0.65
    (29, 37)   -1.5674
    (29, 38)   -1.25392
    (29, 39)   -0.940439
    (29, 40)   -0.626959
    (29, 41)   -0.31348
    (29, 42)   1
    (30, 36)   0.0905272
    (30, 37)   0.722222
    (30, 43)   0.25
    (30, 48)   -0.158163
    (30, 49)   -0.972222
    (31, 36)   0.108767
    (31, 38)   0.722222
    (31, 44)   0.25
    (31, 48)   -0.194771
    (31, 50)   -0.972222
    (32, 36)   0.125734
    (32, 39)   0.722222
    (32, 45)   0.25
    (32, 48)   -0.230392
    (32, 51)   -0.972222
    (33, 36)   0.127839
    (33, 40)   0.722222
    (33, 46)   0.25
    (33, 48)   -0.236285
    (33, 52)   -0.972222
    (34, 36)   0.102688
    (34, 41)   0.722222
    (34, 47)   0.25
    (34, 48)   -0.18039
    (34, 53)   -0.972222
    (35, 25)   -0.958319
    (35, 55)   1.86335
    (35, 60)   -0.206995
    (36, 26)   -0.958319
    (36, 56)   1.49068
    (36, 60)   -0.235647
    (37, 27)   -0.958319
    (37, 57)   1.11801
    (37, 60)   -0.247567
    (38, 28)   -0.958319
    (38, 58)   0.745342
    (38, 60)   -0.207487
    (39, 25)   0.5
    (39, 48)   -0.158163
    (39, 49)   -0.972222
    (39, 54)   0.0532286
    (39, 55)   0.472222
    (40, 26)   0.5
    (40, 48)   -0.194771
    (40, 50)   -0.972222
    (40, 54)   0.0757454
    (40, 56)   0.472222
    (41, 27)   0.5
    (41, 48)   -0.230392
    (41, 51)   -0.972222
    (41, 54)   0.106103
    (41, 57)   0.472222
    (42, 28)   0.5
    (42, 48)   -0.236285
    (42, 52)   -0.972222
    (42, 54)   0.133388
    (42, 58)   0.472222
    (43, 29)   0.5
    (43, 48)   -0.18039
    (43, 53)   -0.972222
    (43, 54)   0.131535
    (43, 59)   0.472222
    (44, 55)   -1.86335
    (44, 56)   -1.49068
    (44, 57)   -1.11801
    (44, 58)   -0.745342
    (44, 59)   -0.372671
    (44, 60)   1
    (45, 43)   -0.824225
    (45, 61)   1.86335
    (45, 66)   -0.144335
    (46, 44)   -0.824225
    (46, 62)   1.49068
    (46, 66)   -0.191856
    (47, 45)   -0.824225
    (47, 63)   1.11801
    (47, 66)   -0.24215
    (48, 46)   -0.824225
    (48, 64)   0.745342
    (48, 66)   -0.254119
    (49, 43)   0.5
    (49, 54)   -0.106457
    (49, 55)   -0.944444
    (49, 61)   0.444444
    (50, 44)   0.5
    (50, 54)   -0.151491
    (50, 56)   -0.944444
    (50, 62)   0.444444
    (51, 45)   0.5
    (51, 54)   -0.212206
    (51, 57)   -0.944444
    (51, 63)   0.444444
    (52, 46)   0.5
    (52, 54)   -0.266776
    (52, 58)   -0.944444
    (52, 64)   0.444444
    (53, 47)   0.5
    (53, 54)   -0.263071
    (53, 59)   -0.944444
    (53, 65)   0.444444
    (54, 61)   -1.86335
    (54, 62)   -1.49068
    (54, 63)   -1.11801
    (54, 64)   -0.745342
    (54, 65)   -0.372671
    (54, 66)   1
    (55, 18)   1
    (56, 7)   1
    (56, 8)   1
    (56, 9)   1
    (56, 10)   1
    (56, 11)   1
    (57, 12)   1
    (57, 13)   1
    (57, 14)   1
    (57, 15)   1
    (57, 16)   1
    (58, 20)   1
    (58, 21)   1
    (58, 22)   1
    (58, 23)   1
    (58, 24)   1
    (59, 31)   1
    (59, 32)   1
    (59, 33)   1
    (59, 34)   1
    (59, 35)   1
    (60, 1)   1
    (60, 2)   1
    (60, 3)   1
    (60, 4)   1
    (60, 5)   1
    (61, 37)   1
    (61, 38)   1
    (61, 39)   1
    (61, 40)   1
    (61, 41)   1
    (62, 49)   1
    (62, 50)   1
    (62, 51)   1
    (62, 52)   1
    (62, 53)   1
    (63, 25)   1
    (63, 26)   1
    (63, 27)   1
    (63, 28)   1
    (63, 29)   1
    (64, 55)   1
    (64, 56)   1
    (64, 57)   1
    (64, 58)   1
    (64, 59)   1
    (65, 43)   1
    (65, 44)   1
    (65, 45)   1
    (65, 46)   1
    (65, 47)   1
    (66, 61)   1
    (66, 62)   1
    (66, 63)   1
    (66, 64)   1
    (66, 65)   1

########### west0067.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...

########### west0067.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    (7, 6)   0.04759439
    (7, 10)   0.4
    (7, 15)   0.4
    (8, 0)   -0.06325978
    (8, 5)   -0.8
    (8, 6)   0.01178291
    (8, 11)   0.4
    (8, 16)   0.4
    (9, 12)   -1.265823
    (9, 13)   -1.012658
    (9, 14)   -0.7594937
    (9, 15)   -0.5063291
    (9, 16)   -0.2531646
    (9, 17)   1
    (10, 12)   0.3333333
    (10, 19)   -0.2071759
    (10, 20)   -1
    (11, 13)   0.3333333
    (11, 19)   -0.2140392
    (11, 21)   -1
    (12, 14)   0.3333333
    (12, 19)   -0.2144206
    (12, 22)   -1
    (13, 15)   0.3333333
    (13, 19)   -0.1986768
    (13, 23)   -1
    (14, 16)   0.3333333
    (14, 18)   0.6666667
    (14, 19)   -0.1656874
    (14, 24)   -1
    (15, 19)   0.1243055
    (15, 20)   0.6
    (15, 25)   0.45
    (15, 30)   -0.2070986
    (15, 31)   -1.05
    (16, 19)   0.1284235
    (16, 21)   0.6
    (16, 26)   0.45
    (16, 30)   -0.2232997
    (16, 32)   -1.05
    (17, 19)   0.1286524
    (17, 22)   0.6
    (17, 27)   0.45
    (17, 30)   -0.2286264
    (17, 33)   -1.05
    (18, 19)   0.1192061
    (18, 23)   0.6
    (18, 28)   0.45
    (18, 30)   -0.2024528
    (18, 34)   -1.05
    (19, 19)   0.09941246
    (19, 24)   0.6
    (19, 29)   0.45
    (19, 30)   -0.1385226
    (19, 35)   -1.05
    (20, 1)   -0.9159533
    (20, 37)   1.567398
    (20, 42)   -0.2788416
    (21, 2)   -0.9159533
    (21, 38)   1.253918
    (21, 42)   -0.2680186
    (22, 3)   -0.9159533
    (22, 39)   0.9404389
    (22, 42)   -0.2323717
    (23, 4)   -0.9159533
    (23, 40)   0.6269592
    (23, 42)   -0.1575082
    (24, 0)   0.1394208
    (24, 1)   0.4
    (24, 30)   -0.2070986
    (24, 31)   -1.05
    (24, 36)   0.08147449
    (24, 37)   0.65
    (25, 0)   0.1340093
    (25, 2)   0.4
    (25, 30)   -0.2232997
    (25, 32)   -1.05
    (25, 36)   0.09789015
    (25, 38)   0.65
    (26, 0)   0.1161859
    (26, 3)   0.4
    (26, 30)   -0.2286264
    (26, 33)   -1.05
    (26, 36)   0.1131608
    (26, 39)   0.65
    (27, 0)   0.07875411
    (27, 4)   0.4
    (27, 30)   -0.2024528
    (27, 34)   -1.05
    (27, 36)   0.1150555
    (27, 40)   0.65
    (28, 0)   0.03162989
    (28, 5)   0.4
    (28, 30)   -0.1385226
    (28, 35)   -1.05
    (28, 36)   0.09241909
    (28, 41)   0.65
    (29, 37)   -1.567398
    (29, 38)   -1.253918
    (29, 39)   -0.9404389
    (29, 40)   -0.6269592
    (29, 41)   -0.3134796
    (29, 42)   1
    (30, 36)   0.09052721
    (30, 37)   0.7222222
    (30, 43)   0.25
    (30, 48)   -0.1581626
    (30, 49)   -0.9722222
    (31, 36)   0.1087668
    (31, 38)   0.7222222
    (31, 44)   0.25
    (31, 48)   -0.1947711
    (31, 50)   -0.9722222
    (32, 36)   0.1257342
    (32, 39)   0.7222222
    (32, 45)   0.25
    (32, 48)   -0.2303917
    (32, 51)   -0.9722222
    (33, 36)   0.1278394
    (33, 40)   0.7222222
    (33, 46)   0.25
    (33, 48)   -0.2362845
    (33, 52)   -0.9722222
    (34, 36)   0.1026879
    (34, 41)   0.7222222
    (34, 47)   0.25
    (34, 48)   -0.18039
    (34, 53)   -0.9722222
    (35, 25)   -0.9583187
    (35, 55)   1.863354
    (35, 60)   -0.2069954
    (36, 26)   -0.9583187
    (36, 56)   1.490683
    (36, 60)   -0.2356469
    (37, 27)   -0.9583187
    (37, 57)   1.118012
    (37, 60)   -0.2475675
    (38, 28)   -0.9583187
    (38, 58)   0.7453416
    (38, 60)   -0.2074873
    (39, 25)   0.5
    (39, 48)   -0.1581626
    (39, 49)   -0.9722222
    (39, 54)   0.05322864
    (39, 55)   0.4722222
    (40, 26)   0.5
    (40, 48)   -0.1947711
    (40, 50)   -0.9722222
    (40, 54)   0.07574542
    (40, 56)   0.4722222
    (41, 27)   0.5
    (41, 48)   -0.2303917
    (41, 51)   -0.9722222
    (41, 54)   0.1061028
    (41, 57)   0.4722222
    (42, 28)   0.5
    (42, 48)   -0.2362845
    (42, 52)   -0.9722222
    (42, 54)   0.1333878
    (42, 58)   0.4722222
    (43, 29)   0.5
    (43, 48)   -0.18039
    (43, 53)   -0.9722222
    (43, 54)   0.1315353
    (43, 59)   0.4722222
    (44, 55)   -1.863354
    (44, 56)   -1.490683
    (44, 57)   -1.118012
    (44, 58)   -0.7453416
    (44, 59)   -0.3726708
    (44, 60)   1
    (45, 43)   -0.8242248
    (45, 61)   1.863354
    (45, 66)   -0.1443354
    (46, 44)   -0.8242248
    (46, 62)   1.490683
    (46, 66)   -0.1918557
    (47, 45)   -0.8242248
    (47, 63)   1.118012
    (47, 66)   -0.2421498
    (48, 46)   -0.8242248
    (48, 64)   0.7453416
    (48, 66)   -0.2541193
    (49, 43)   0.5
    (49, 54)   -0.1064573
    (49, 55)   -0.9444444
    (49, 61)   0.4444444
    (50, 44)   0.5
    (50, 54)   -0.1514908
    (50, 56)   -0.9444444
    (50, 62)   0.4444444
    (51, 45)   0.5
    (51, 54)   -0.2122056
    (51, 57)   -0.9444444
    (51, 63)   0.4444444
    (52, 46)   0.5
    (52, 54)   -0.2667757
    (52, 58)   -0.9444444
    (52, 64)   0.4444444
    (53, 47)   0.5
    (53, 54)   -0.2630706
    (53, 59)   -0.9444444
    (53, 65)   0.4444444
    (54, 61)   -1.863354
    (54, 62)   -1.490683
    (54, 63)   -1.118012
    (54, 64)   -0.7453416
    (54, 65)   -0.3726708
    (54, 66)   1
    (55, 18)   1
    (56, 7)   1
    (56, 8)   1
    (56, 9)   1
    (56, 10)   1
    (56, 11)   1
    (57, 12)   1
    (57, 13)   1
    (57, 14)   1
    (57, 15)   1
    (57, 16)   1
    (58, 20)   1
    (58, 21)   1
    (58, 22)   1
    (58, 23)   1
    (58, 24)   1
    (59, 31)   1
    (59, 32)   1
    (59, 33)   1
    (59, 34)   1
    (59, 35)   1
    (60, 1)   1
    (60, 2)   1
    (60, 3)   1
    (60, 4)   1
    (60, 5)   1
    (61, 37)   1
    (61, 38)   1
    (61, 39)   1
    (61, 40)   1
    (61, 41)   1
    (62, 49)   1
    (62, 50)   1
    (62, 51)   1
    (62, 52)   1
    (62, 53)   1
    (63, 25)   1
    (63, 26)   1
    (63, 27)   1
    (63, 28)   1
    (63, 29)   1
    (64, 55)   1
    (64, 56)   1
    (64, 57)   1
    (64, 58)   1
    (64, 59)   1
    (65, 43)   1
    (65, 44)   1
    (65, 45)   1
    (65, 46)   1
    (65, 47)   1
    (66, 61)   1
    (66, 62)   1
    (66, 63)   1
    (66, 64)   1
    (66, 65)   1

############################# TRIAL: 1

########### west0067.mtx: pr: -1 (nothing)

########### west0067.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 67 entries: 295 type: double

########### west0067.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295

########### west0067.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.278842
    (0, 5)   -0.268019
    (0, 6)   -0.232372
    (0, 7)   -0.157508
    (0, 8)   -0.0632598
    (0, 24)   0.139421
    (0, 25)   0.134009
    (0, 26)   0.116186
    (0, 27)   0.0787541
    (0, 28)   0.0316299
    (1, 0)   3.14159
    (1, 4)   -0.8
    (1, 20)   -0.915953
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.915953
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.915953
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.915953
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    ...

########### west0067.mtx: pr: 3 (all)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    (7, 10)   0.4
    (7, 15)   0.4
    (8, 0)   -0.0632598
    (8, 5)   -0.8
    (8, 6)   0.0117829
    (8, 11)   0.4
    (8, 16)   0.4
    (9, 12)   -1.26582
    (9, 13)   -1.01266
    (9, 14)   -0.759494
    (9, 15)   -0.506329
    (9, 16)   -0.253165
    (9, 17)   1
    (10, 12)   0.333333
    (10, 19)   -0.207176
    (10, 20)   -1
    (11, 13)   0.333333
    (11, 19)   -0.214039
    (11, 21)   -1
    (12, 14)   0.333333
    (12, 19)   -0.214421
    (12, 22)   -1
    (13, 15)   0.333333
    (13, 19)   -0.198677
    (13, 23)   -1
    (14, 16)   0.333333
    (14, 18)   0.666667
    (14, 19)   -0.165687
    (14, 24)   -1
    (15, 19)   0.124305
    (15, 20)   0.6
    (15, 25)   0.45
    (15, 30)   -0.207099
    (15, 31)   -1.05
    (16, 19)   0.128423
    (16, 21)   0.6
    (16, 26)   0.45
    (16, 30)   -0.2233
    (16, 32)   -1.05
    (17, 19)   0.128652
    (17, 22)   0.6
    (17, 27)   0.45
    (17, 30)   -0.228626
    (17, 33)   -1.05
    (18, 19)   0.119206
    (18, 23)   0.6
    (18, 28)   0.45
    (18, 30)   -0.202453
    (18, 34)   -1.05
    (19, 19)   0.0994125
    (19, 24)   0.6
    (19, 29)   0.45
    (19, 30)   -0.138523
    (19, 35)   -1.05
    (20, 1)   -0.915953
    (20, 37)   1.5674
    (20, 42)   -0.278842
    (21, 2)   -0.915953
    (21, 38)   1.25392
    (21, 42)   -0.268019
    (22, 3)   -0.915953
    (22, 39)   0.940439
    (22, 42)   -0.232372
    (23, 4)   -0.915953
    (23, 40)   0.626959
    (23, 42)   -0.157508
    (24, 0)   0.139421
    (24, 1)   0.4
    (24, 30)   -0.207099
    (24, 31)   -1.05
    (24, 36)   0.0814745
    (24, 37)   0.65
    (25, 0)   0.134009
    (25, 2)   0.4
    (25, 30)   -0.2233
    (25, 32)   -1.05
    (25, 36)   0.0978901
    (25, 38)   0.65
    (26, 0)   0.116186
    (26, 3)   0.4
    (26, 30)   -0.228626
    (26, 33)   -1.05
    (26, 36)   0.113161
    (26, 39)   0.65
    (27, 0)   0.0787541
    (27, 4)   0.4
    (27, 30)   -0.202453
    (27, 34)   -1.05
    (27, 36)   0.115056
    (27, 40)   0.65
    (28, 0)   0.0316299
    (28, 5)   0.4
    (28, 30)   -0.138523
    (28, 35)   -1.05
    (28, 36)   0.0924191
    (28, 41)   0.65
    (29, 37)   -1.5674
    (29, 38)   -1.25392
    (29, 39)   -0.940439
    (29, 40)   -0.626959
    (29, 41)   -0.31348
    (29, 42)   1
    (30, 36)   0.0905272
    (30, 37)   0.722222
    (30, 43)   0.25
    (30, 48)   -0.158163
    (30, 49)   -0.972222
    (31, 36)   0.108767
    (31, 38)   0.722222
    (31, 44)   0.25
    (31, 48)   -0.194771
    (31, 50)   -0.972222
    (32, 36)   0.125734
    (32, 39)   0.722222
    (32, 45)   0.25
    (32, 48)   -0.230392
    (32, 51)   -0.972222
    (33, 36)   0.127839
    (33, 40)   0.722222
    (33, 46)   0.25
    (33, 48)   -0.236285
    (33, 52)   -0.972222
    (34, 36)   0.102688
    (34, 41)   0.722222
    (34, 47)   0.25
    (34, 48)   -0.18039
    (34, 53)   -0.972222
    (35, 25)   -0.958319
    (35, 55)   1.86335
    (35, 60)   -0.206995
    (36, 26)   -0.958319
    (36, 56)   1.49068
    (36, 60)   -0.235647
    (37, 27)   -0.958319
    (37, 57)   1.11801
    (37, 60)   -0.247567
    (38, 28)   -0.958319
    (38, 58)   0.745342
    (38, 60)   -0.207487
    (39, 25)   0.5
    (39, 48)   -0.158163
    (39, 49)   -0.972222
    (39, 54)   0.0532286
    (39, 55)   0.472222
    (40, 26)   0.5
    (40, 48)   -0.194771
    (40, 50)   -0.972222
    (40, 54)   0.0757454
    (40, 56)   0.472222
    (41, 27)   0.5
    (41, 48)   -0.230392
    (41, 51)   -0.972222
    (41, 54)   0.106103
    (41, 57)   0.472222
    (42, 28)   0.5
    (42, 48)   -0.236285
    (42, 52)   -0.972222
    (42, 54)   0.133388
    (42, 58)   0.472222
    (43, 29)   0.5
    (43, 48)   -0.18039
    (43, 53)   -0.972222
    (43, 54)   0.131535
    (43, 59)   0.472222
    (44, 55)   -1.86335
    (44, 56)   -1.49068
    (44, 57)   -1.11801
    (44, 58)   -0.745342
    (44, 59)   -0.372671
    (44, 60)   1
    (45, 43)   -0.824225
    (45, 61)   1.86335
    (45, 66)   -0.144335
    (46, 44)   -0.824225
    (46, 62)   1.49068
    (46, 66)   -0.191856
    (47, 45)   -0.824225
    (47, 63)   1.11801
    (47, 66)   -0.24215
    (48, 46)   -0.824225
    (48, 64)   0.745342
    (48, 66)   -0.254119
    (49, 43)   0.5
    (49, 54)   -0.106457
    (49, 55)   -0.944444
    (49, 61)   0.444444
    (50, 44)   0.5
    (50, 54)   -0.151491
    (50, 56)   -0.944444
    (50, 62)   0.444444
    (51, 45)   0.5
    (51, 54)   -0.212206
    (51, 57)   -0.944444
    (51, 63)   0.444444
    (52, 46)   0.5
    (52, 54)   -0.266776
    (52, 58)   -0.944444
    (52, 64)   0.444444
    (53, 47)   0.5
    (53, 54)   -0.263071
    (53, 59)   -0.944444
    (53, 65)   0.444444
    (54, 61)   -1.86335
    (54, 62)   -1.49068
    (54, 63)   -1.11801
    (54, 64)   -0.745342
    (54, 65)   -0.372671
    (54, 66)   1
    (55, 18)   1
    (56, 7)   1
    (56, 8)   1
    (56, 9)   1
    (56, 10)   1
    (56, 11)   1
    (57, 12)   1
    (57, 13)   1
    (57, 14)   1
    (57, 15)   1
    (57, 16)   1
    (58, 20)   1
    (58, 21)   1
    (58, 22)   1
    (58, 23)   1
    (58, 24)   1
    (59, 31)   1
    (59, 32)   1
    (59, 33)   1
    (59, 34)   1
    (59, 35)   1
    (60, 1)   1
    (60, 2)   1
    (60, 3)   1
    (60, 4)   1
    (60, 5)   1
    (61, 37)   1
    (61, 38)   1
    (61, 39)   1
    (61, 40)   1
    (61, 41)   1
    (62, 49)   1
    (62, 50)   1
    (62, 51)   1
    (62, 52)   1
    (62, 53)   1
    (63, 25)   1
    (63, 26)   1
    (63, 27)   1
    (63, 28)   1
    (63, 29)   1
    (64, 55)   1
    (64, 56)   1
    (64, 57)   1
    (64, 58)   1
    (64, 59)   1
    (65, 43)   1
    (65, 44)   1
    (65, 45)   1
    (65, 46)   1
    (65, 47)   1
    (66, 61)   1
    (66, 62)   1
    (66, 63)   1
    (66, 64)   1
    (66, 65)   1
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.278842
    (0, 5)   -0.268019
    (0, 6)   -0.232372
    (0, 7)   -0.157508
    (0, 8)   -0.0632598
    (0, 24)   0.139421
    (0, 25)   0.134009
    (0, 26)   0.116186
    (0, 27)   0.0787541
    (0, 28)   0.0316299
    (1, 0)   3.14159
    (1, 4)   -0.8
    (1, 20)   -0.915953
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.915953
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.915953
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.915953
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    (6, 4)   0.134462
    (6, 5)   0.117568
    (6, 6)   0.0885926
    (6, 7)   0.0475944
    (6, 8)   0.0117829
    (7, 0)   -0.834182
    (7, 4)   0.4
    (7, 56)   1
    (8, 1)   -0.834182
    (8, 5)   0.4
    (8, 56)   1
    (9, 2)   -0.834182
    (9, 6)   0.4
    (9, 56)   1
    (10, 3)   -0.834182
    (10, 7)   0.4
    (10, 56)   1
    (11, 8)   0.4
    (11, 56)   1
    (12, 0)   1.26582
    (12, 4)   0.4
    (12, 9)   -1.26582
    (12, 10)   0.333333
    (12, 57)   1
    (13, 1)   1.01266
    (13, 5)   0.4
    (13, 9)   -1.01266
    (13, 11)   0.333333
    (13, 57)   1
    (14, 2)   0.759494
    (14, 6)   0.4
    (14, 9)   -0.759494
    (14, 12)   0.333333
    (14, 57)   1
    (15, 3)   0.506329
    (15, 7)   0.4
    (15, 9)   -0.506329
    (15, 13)   0.333333
    (15, 57)   1
    (16, 8)   0.4
    (16, 9)   -0.253165
    (16, 14)   0.333333
    (16, 57)   1
    (17, 0)   -0.336156
    (17, 1)   -0.29392
    (17, 2)   -0.221481
    (17, 3)   -0.118986
    (17, 9)   1
    (18, 14)   0.666667
    (18, 55)   1
    (19, 10)   -0.207176
    (19, 11)   -0.214039
    (19, 12)   -0.214421
    (19, 13)   -0.198677
    (19, 14)   -0.165687
    (19, 15)   0.124305
    (19, 16)   0.128423
    (19, 17)   0.128652
    (19, 18)   0.119206
    (19, 19)   0.0994125
    (20, 10)   -1
    (20, 15)   0.6
    (20, 58)   1
    (21, 11)   -1
    (21, 16)   0.6
    (21, 58)   1
    (22, 12)   -1
    (22, 17)   0.6
    (22, 58)   1
    (23, 13)   -1
    (23, 18)   0.6
    (23, 58)   1
    (24, 14)   -1
    (24, 19)   0.6
    (24, 58)   1
    (25, 15)   0.45
    (25, 35)   -0.958319
    (25, 39)   0.5
    (25, 63)   1
    (26, 16)   0.45
    (26, 36)   -0.958319
    (26, 40)   0.5
    (26, 63)   1
    (27, 17)   0.45
    (27, 37)   -0.958319
    (27, 41)   0.5
    (27, 63)   1
    (28, 18)   0.45
    (28, 38)   -0.958319
    (28, 42)   0.5
    (28, 63)   1
    (29, 19)   0.45
    (29, 43)   0.5
    (29, 63)   1
    (30, 15)   -0.207099
    (30, 16)   -0.2233
    (30, 17)   -0.228626
    (30, 18)   -0.202453
    (30, 19)   -0.138523
    (30, 24)   -0.207099
    (30, 25)   -0.2233
    (30, 26)   -0.228626
    (30, 27)   -0.202453
    (30, 28)   -0.138523
    (31, 15)   -1.05
    (31, 24)   -1.05
    (31, 59)   1
    (32, 16)   -1.05
    (32, 25)   -1.05
    (32, 59)   1
    (33, 17)   -1.05
    (33, 26)   -1.05
    (33, 59)   1
    (34, 18)   -1.05
    (34, 27)   -1.05
    (34, 59)   1
    (35, 19)   -1.05
    (35, 28)   -1.05
    (35, 59)   1
    (36, 24)   0.0814745
    (36, 25)   0.0978901
    (36, 26)   0.113161
    (36, 27)   0.115056
    (36, 28)   0.0924191
    (36, 30)   0.0905272
    (36, 31)   0.108767
    (36, 32)   0.125734
    (36, 33)   0.127839
    (36, 34)   0.102688
    (37, 20)   1.5674
    (37, 24)   0.65
    (37, 29)   -1.5674
    (37, 30)   0.722222
    (37, 61)   1
    (38, 21)   1.25392
    (38, 25)   0.65
    (38, 29)   -1.25392
    (38, 31)   0.722222
    (38, 61)   1
    (39, 22)   0.940439
    (39, 26)   0.65
    (39, 29)   -0.940439
    (39, 32)   0.722222
    (39, 61)   1
    (40, 23)   0.626959
    (40, 27)   0.65
    (40, 29)   -0.626959
    (40, 33)   0.722222
    (40, 61)   1
    (41, 28)   0.65
    (41, 29)   -0.31348
    (41, 34)   0.722222
    (41, 61)   1
    (42, 20)   -0.278842
    (42, 21)   -0.268019
    (42, 22)   -0.232372
    (42, 23)   -0.157508
    (42, 29)   1
    (43, 30)   0.25
    (43, 45)   -0.824225
    (43, 49)   0.5
    (43, 65)   1
    (44, 31)   0.25
    (44, 46)   -0.824225
    (44, 50)   0.5
    (44, 65)   1
    (45, 32)   0.25
    (45, 47)   -0.824225
    (45, 51)   0.5
    (45, 65)   1
    (46, 33)   0.25
    (46, 48)   -0.824225
    (46, 52)   0.5
    (46, 65)   1
    (47, 34)   0.25
    (47, 53)   0.5
    (47, 65)   1
    (48, 30)   -0.158163
    (48, 31)   -0.194771
    (48, 32)   -0.230392
    (48, 33)   -0.236285
    (48, 34)   -0.18039
    (48, 39)   -0.158163
    (48, 40)   -0.194771
    (48, 41)   -0.230392
    (48, 42)   -0.236285
    (48, 43)   -0.18039
    (49, 30)   -0.972222
    (49, 39)   -0.972222
    (49, 62)   1
    (50, 31)   -0.972222
    (50, 40)   -0.972222
    (50, 62)   1
    (51, 32)   -0.972222
    (51, 41)   -0.972222
    (51, 62)   1
    (52, 33)   -0.972222
    (52, 42)   -0.972222
    (52, 62)   1
    (53, 34)   -0.972222
    (53, 43)   -0.972222
    (53, 62)   1
    (54, 39)   0.0532286
    (54, 40)   0.0757454
    (54, 41)   0.106103
    (54, 42)   0.133388
    (54, 43)   0.131535
    (54, 49)   -0.106457
    (54, 50)   -0.151491
    (54, 51)   -0.212206
    (54, 52)   -0.266776
    (54, 53)   -0.263071
    (55, 35)   1.86335
    (55, 39)   0.472222
    (55, 44)   -1.86335
    (55, 49)   -0.944444
    (55, 64)   1
    (56, 36)   1.49068
    (56, 40)   0.472222
    (56, 44)   -1.49068
    (56, 50)   -0.944444
    (56, 64)   1
    (57, 37)   1.11801
    (57, 41)   0.472222
    (57, 44)   -1.11801
    (57, 51)   -0.944444
    (57, 64)   1
    (58, 38)   0.745342
    (58, 42)   0.472222
    (58, 44)   -0.745342
    (58, 52)   -0.944444
    (58, 64)   1
    (59, 43)   0.472222
    (59, 44)   -0.372671
    (59, 53)   -0.944444
    (59, 64)   1
    (60, 35)   -0.206995
    (60, 36)   -0.235647
    (60, 37)   -0.247567
    (60, 38)   -0.207487
    (60, 44)   1
    (61, 45)   1.86335
    (61, 49)   0.444444
    (61, 54)   -1.86335
    (61, 66)   1
    (62, 46)   1.49068
    (62, 50)   0.444444
    (62, 54)   -1.49068
    (62, 66)   1
    (63, 47)   1.11801
    (63, 51)   0.444444
    (63, 54)   -1.11801
    (63, 66)   1
    (64, 48)   0.745342
    (64, 52)   0.444444
    (64, 54)   -0.745342
    (64, 66)   1
    (65, 53)   0.444444
    (65, 54)   -0.372671
    (65, 66)   1
    (66, 45)   -0.144335
    (66, 46)   -0.191856
    (66, 47)   -0.24215
    (66, 48)   -0.254119
    (66, 54)   1

########### west0067.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.2788416
    (0, 5)   -0.2680186
    (0, 6)   -0.2323717
    (0, 7)   -0.1575082
    (0, 8)   -0.06325978
    (0, 24)   0.1394208
    (0, 25)   0.1340093
    (0, 26)   0.1161859
    (0, 27)   0.07875411
    (0, 28)   0.03162989
    (1, 0)   3.14159265358979
    (1, 4)   -0.8
    (1, 20)   -0.9159533
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.9159533
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.9159533
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.9159533
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    ...

########### west0067.mtx: pr: 5 (all (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    (7, 6)   0.04759439
    (7, 10)   0.4
    (7, 15)   0.4
    (8, 0)   -0.06325978
    (8, 5)   -0.8
    (8, 6)   0.01178291
    (8, 11)   0.4
    (8, 16)   0.4
    (9, 12)   -1.265823
    (9, 13)   -1.012658
    (9, 14)   -0.7594937
    (9, 15)   -0.5063291
    (9, 16)   -0.2531646
    (9, 17)   1
    (10, 12)   0.3333333
    (10, 19)   -0.2071759
    (10, 20)   -1
    (11, 13)   0.3333333
    (11, 19)   -0.2140392
    (11, 21)   -1
    (12, 14)   0.3333333
    (12, 19)   -0.2144206
    (12, 22)   -1
    (13, 15)   0.3333333
    (13, 19)   -0.1986768
    (13, 23)   -1
    (14, 16)   0.3333333
    (14, 18)   0.6666667
    (14, 19)   -0.1656874
    (14, 24)   -1
    (15, 19)   0.1243055
    (15, 20)   0.6
    (15, 25)   0.45
    (15, 30)   -0.2070986
    (15, 31)   -1.05
    (16, 19)   0.1284235
    (16, 21)   0.6
    (16, 26)   0.45
    (16, 30)   -0.2232997
    (16, 32)   -1.05
    (17, 19)   0.1286524
    (17, 22)   0.6
    (17, 27)   0.45
    (17, 30)   -0.2286264
    (17, 33)   -1.05
    (18, 19)   0.1192061
    (18, 23)   0.6
    (18, 28)   0.45
    (18, 30)   -0.2024528
    (18, 34)   -1.05
    (19, 19)   0.09941246
    (19, 24)   0.6
    (19, 29)   0.45
    (19, 30)   -0.1385226
    (19, 35)   -1.05
    (20, 1)   -0.9159533
    (20, 37)   1.567398
    (20, 42)   -0.2788416
    (21, 2)   -0.9159533
    (21, 38)   1.253918
    (21, 42)   -0.2680186
    (22, 3)   -0.9159533
    (22, 39)   0.9404389
    (22, 42)   -0.2323717
    (23, 4)   -0.9159533
    (23, 40)   0.6269592
    (23, 42)   -0.1575082
    (24, 0)   0.1394208
    (24, 1)   0.4
    (24, 30)   -0.2070986
    (24, 31)   -1.05
    (24, 36)   0.08147449
    (24, 37)   0.65
    (25, 0)   0.1340093
    (25, 2)   0.4
    (25, 30)   -0.2232997
    (25, 32)   -1.05
    (25, 36)   0.09789015
    (25, 38)   0.65
    (26, 0)   0.1161859
    (26, 3)   0.4
    (26, 30)   -0.2286264
    (26, 33)   -1.05
    (26, 36)   0.1131608
    (26, 39)   0.65
    (27, 0)   0.07875411
    (27, 4)   0.4
    (27, 30)   -0.2024528
    (27, 34)   -1.05
    (27, 36)   0.1150555
    (27, 40)   0.65
    (28, 0)   0.03162989
    (28, 5)   0.4
    (28, 30)   -0.1385226
    (28, 35)   -1.05
    (28, 36)   0.09241909
    (28, 41)   0.65
    (29, 37)   -1.567398
    (29, 38)   -1.253918
    (29, 39)   -0.9404389
    (29, 40)   -0.6269592
    (29, 41)   -0.3134796
    (29, 42)   1
    (30, 36)   0.09052721
    (30, 37)   0.7222222
    (30, 43)   0.25
    (30, 48)   -0.1581626
    (30, 49)   -0.9722222
    (31, 36)   0.1087668
    (31, 38)   0.7222222
    (31, 44)   0.25
    (31, 48)   -0.1947711
    (31, 50)   -0.9722222
    (32, 36)   0.1257342
    (32, 39)   0.7222222
    (32, 45)   0.25
    (32, 48)   -0.2303917
    (32, 51)   -0.9722222
    (33, 36)   0.1278394
    (33, 40)   0.7222222
    (33, 46)   0.25
    (33, 48)   -0.2362845
    (33, 52)   -0.9722222
    (34, 36)   0.1026879
    (34, 41)   0.7222222
    (34, 47)   0.25
    (34, 48)   -0.18039
    (34, 53)   -0.9722222
    (35, 25)   -0.9583187
    (35, 55)   1.863354
    (35, 60)   -0.2069954
    (36, 26)   -0.9583187
    (36, 56)   1.490683
    (36, 60)   -0.2356469
    (37, 27)   -0.9583187
    (37, 57)   1.118012
    (37, 60)   -0.2475675
    (38, 28)   -0.9583187
    (38, 58)   0.7453416
    (38, 60)   -0.2074873
    (39, 25)   0.5
    (39, 48)   -0.1581626
    (39, 49)   -0.9722222
    (39, 54)   0.05322864
    (39, 55)   0.4722222
    (40, 26)   0.5
    (40, 48)   -0.1947711
    (40, 50)   -0.9722222
    (40, 54)   0.07574542
    (40, 56)   0.4722222
    (41, 27)   0.5
    (41, 48)   -0.2303917
    (41, 51)   -0.9722222
    (41, 54)   0.1061028
    (41, 57)   0.4722222
    (42, 28)   0.5
    (42, 48)   -0.2362845
    (42, 52)   -0.9722222
    (42, 54)   0.1333878
    (42, 58)   0.4722222
    (43, 29)   0.5
    (43, 48)   -0.18039
    (43, 53)   -0.9722222
    (43, 54)   0.1315353
    (43, 59)   0.4722222
    (44, 55)   -1.863354
    (44, 56)   -1.490683
    (44, 57)   -1.118012
    (44, 58)   -0.7453416
    (44, 59)   -0.3726708
    (44, 60)   1
    (45, 43)   -0.8242248
    (45, 61)   1.863354
    (45, 66)   -0.1443354
    (46, 44)   -0.8242248
    (46, 62)   1.490683
    (46, 66)   -0.1918557
    (47, 45)   -0.8242248
    (47, 63)   1.118012
    (47, 66)   -0.2421498
    (48, 46)   -0.8242248
    (48, 64)   0.7453416
    (48, 66)   -0.2541193
    (49, 43)   0.5
    (49, 54)   -0.1064573
    (49, 55)   -0.9444444
    (49, 61)   0.4444444
    (50, 44)   0.5
    (50, 54)   -0.1514908
    (50, 56)   -0.9444444
    (50, 62)   0.4444444
    (51, 45)   0.5
    (51, 54)   -0.2122056
    (51, 57)   -0.9444444
    (51, 63)   0.4444444
    (52, 46)   0.5
    (52, 54)   -0.2667757
    (52, 58)   -0.9444444
    (52, 64)   0.4444444
    (53, 47)   0.5
    (53, 54)   -0.2630706
    (53, 59)   -0.9444444
    (53, 65)   0.4444444
    (54, 61)   -1.863354
    (54, 62)   -1.490683
    (54, 63)   -1.118012
    (54, 64)   -0.7453416
    (54, 65)   -0.3726708
    (54, 66)   1
    (55, 18)   1
    (56, 7)   1
    (56, 8)   1
    (56, 9)   1
    (56, 10)   1
    (56, 11)   1
    (57, 12)   1
    (57, 13)   1
    (57, 14)   1
    (57, 15)   1
    (57, 16)   1
    (58, 20)   1
    (58, 21)   1
    (58, 22)   1
    (58, 23)   1
    (58, 24)   1
    (59, 31)   1
    (59, 32)   1
    (59, 33)   1
    (59, 34)   1
    (59, 35)   1
    (60, 1)   1
    (60, 2)   1
    (60, 3)   1
    (60, 4)   1
    (60, 5)   1
    (61, 37)   1
    (61, 38)   1
    (61, 39)   1
    (61, 40)   1
    (61, 41)   1
    (62, 49)   1
    (62, 50)   1
    (62, 51)   1
    (62, 52)   1
    (62, 53)   1
    (63, 25)   1
    (63, 26)   1
    (63, 27)   1
    (63, 28)   1
    (63, 29)   1
    (64, 55)   1
    (64, 56)   1
    (64, 57)   1
    (64, 58)   1
    (64, 59)   1
    (65, 43)   1
    (65, 44)   1
    (65, 45)   1
    (65, 46)   1
    (65, 47)   1
    (66, 61)   1
    (66, 62)   1
    (66, 63)   1
    (66, 64)   1
    (66, 65)   1
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.2788416
    (0, 5)   -0.2680186
    (0, 6)   -0.2323717
    (0, 7)   -0.1575082
    (0, 8)   -0.06325978
    (0, 24)   0.1394208
    (0, 25)   0.1340093
    (0, 26)   0.1161859
    (0, 27)   0.07875411
    (0, 28)   0.03162989
    (1, 0)   3.14159265358979
    (1, 4)   -0.8
    (1, 20)   -0.9159533
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.9159533
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.9159533
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.9159533
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    (6, 4)   0.1344622
    (6, 5)   0.1175679
    (6, 6)   0.08859262
    (6, 7)   0.04759439
    (6, 8)   0.01178291
    (7, 0)   -0.8341818
    (7, 4)   0.4
    (7, 56)   1
    (8, 1)   -0.8341818
    (8, 5)   0.4
    (8, 56)   1
    (9, 2)   -0.8341818
    (9, 6)   0.4
    (9, 56)   1
    (10, 3)   -0.8341818
    (10, 7)   0.4
    (10, 56)   1
    (11, 8)   0.4
    (11, 56)   1
    (12, 0)   1.265823
    (12, 4)   0.4
    (12, 9)   -1.265823
    (12, 10)   0.3333333
    (12, 57)   1
    (13, 1)   1.012658
    (13, 5)   0.4
    (13, 9)   -1.012658
    (13, 11)   0.3333333
    (13, 57)   1
    (14, 2)   0.7594937
    (14, 6)   0.4
    (14, 9)   -0.7594937
    (14, 12)   0.3333333
    (14, 57)   1
    (15, 3)   0.5063291
    (15, 7)   0.4
    (15, 9)   -0.5063291
    (15, 13)   0.3333333
    (15, 57)   1
    (16, 8)   0.4
    (16, 9)   -0.2531646
    (16, 14)   0.3333333
    (16, 57)   1
    (17, 0)   -0.3361556
    (17, 1)   -0.2939196
    (17, 2)   -0.2214815
    (17, 3)   -0.118986
    (17, 9)   1
    (18, 14)   0.6666667
    (18, 55)   1
    (19, 10)   -0.2071759
    (19, 11)   -0.2140392
    (19, 12)   -0.2144206
    (19, 13)   -0.1986768
    (19, 14)   -0.1656874
    (19, 15)   0.1243055
    (19, 16)   0.1284235
    (19, 17)   0.1286524
    (19, 18)   0.1192061
    (19, 19)   0.09941246
    (20, 10)   -1
    (20, 15)   0.6
    (20, 58)   1
    (21, 11)   -1
    (21, 16)   0.6
    (21, 58)   1
    (22, 12)   -1
    (22, 17)   0.6
    (22, 58)   1
    (23, 13)   -1
    (23, 18)   0.6
    (23, 58)   1
    (24, 14)   -1
    (24, 19)   0.6
    (24, 58)   1
    (25, 15)   0.45
    (25, 35)   -0.9583187
    (25, 39)   0.5
    (25, 63)   1
    (26, 16)   0.45
    (26, 36)   -0.9583187
    (26, 40)   0.5
    (26, 63)   1
    (27, 17)   0.45
    (27, 37)   -0.9583187
    (27, 41)   0.5
    (27, 63)   1
    (28, 18)   0.45
    (28, 38)   -0.9583187
    (28, 42)   0.5
    (28, 63)   1
    (29, 19)   0.45
    (29, 43)   0.5
    (29, 63)   1
    (30, 15)   -0.2070986
    (30, 16)   -0.2232997
    (30, 17)   -0.2286264
    (30, 18)   -0.2024528
    (30, 19)   -0.1385226
    (30, 24)   -0.2070986
    (30, 25)   -0.2232997
    (30, 26)   -0.2286264
    (30, 27)   -0.2024528
    (30, 28)   -0.1385226
    (31, 15)   -1.05
    (31, 24)   -1.05
    (31, 59)   1
    (32, 16)   -1.05
    (32, 25)   -1.05
    (32, 59)   1
    (33, 17)   -1.05
    (33, 26)   -1.05
    (33, 59)   1
    (34, 18)   -1.05
    (34, 27)   -1.05
    (34, 59)   1
    (35, 19)   -1.05
    (35, 28)   -1.05
    (35, 59)   1
    (36, 24)   0.08147449
    (36, 25)   0.09789015
    (36, 26)   0.1131608
    (36, 27)   0.1150555
    (36, 28)   0.09241909
    (36, 30)   0.09052721
    (36, 31)   0.1087668
    (36, 32)   0.1257342
    (36, 33)   0.1278394
    (36, 34)   0.1026879
    (37, 20)   1.567398
    (37, 24)   0.65
    (37, 29)   -1.567398
    (37, 30)   0.7222222
    (37, 61)   1
    (38, 21)   1.253918
    (38, 25)   0.65
    (38, 29)   -1.253918
    (38, 31)   0.7222222
    (38, 61)   1
    (39, 22)   0.9404389
    (39, 26)   0.65
    (39, 29)   -0.9404389
    (39, 32)   0.7222222
    (39, 61)   1
    (40, 23)   0.6269592
    (40, 27)   0.65
    (40, 29)   -0.6269592
    (40, 33)   0.7222222
    (40, 61)   1
    (41, 28)   0.65
    (41, 29)   -0.3134796
    (41, 34)   0.7222222
    (41, 61)   1
    (42, 20)   -0.2788416
    (42, 21)   -0.2680186
    (42, 22)   -0.2323717
    (42, 23)   -0.1575082
    (42, 29)   1
    (43, 30)   0.25
    (43, 45)   -0.8242248
    (43, 49)   0.5
    (43, 65)   1
    (44, 31)   0.25
    (44, 46)   -0.8242248
    (44, 50)   0.5
    (44, 65)   1
    (45, 32)   0.25
    (45, 47)   -0.8242248
    (45, 51)   0.5
    (45, 65)   1
    (46, 33)   0.25
    (46, 48)   -0.8242248
    (46, 52)   0.5
    (46, 65)   1
    (47, 34)   0.25
    (47, 53)   0.5
    (47, 65)   1
    (48, 30)   -0.1581626
    (48, 31)   -0.1947711
    (48, 32)   -0.2303917
    (48, 33)   -0.2362845
    (48, 34)   -0.18039
    (48, 39)   -0.1581626
    (48, 40)   -0.1947711
    (48, 41)   -0.2303917
    (48, 42)   -0.2362845
    (48, 43)   -0.18039
    (49, 30)   -0.9722222
    (49, 39)   -0.9722222
    (49, 62)   1
    (50, 31)   -0.9722222
    (50, 40)   -0.9722222
    (50, 62)   1
    (51, 32)   -0.9722222
    (51, 41)   -0.9722222
    (51, 62)   1
    (52, 33)   -0.9722222
    (52, 42)   -0.9722222
    (52, 62)   1
    (53, 34)   -0.9722222
    (53, 43)   -0.9722222
    (53, 62)   1
    (54, 39)   0.05322864
    (54, 40)   0.07574542
    (54, 41)   0.1061028
    (54, 42)   0.1333878
    (54, 43)   0.1315353
    (54, 49)   -0.1064573
    (54, 50)   -0.1514908
    (54, 51)   -0.2122056
    (54, 52)   -0.2667757
    (54, 53)   -0.2630706
    (55, 35)   1.863354
    (55, 39)   0.4722222
    (55, 44)   -1.863354
    (55, 49)   -0.9444444
    (55, 64)   1
    (56, 36)   1.490683
    (56, 40)   0.4722222
    (56, 44)   -1.490683
    (56, 50)   -0.9444444
    (56, 64)   1
    (57, 37)   1.118012
    (57, 41)   0.4722222
    (57, 44)   -1.118012
    (57, 51)   -0.9444444
    (57, 64)   1
    (58, 38)   0.7453416
    (58, 42)   0.4722222
    (58, 44)   -0.7453416
    (58, 52)   -0.9444444
    (58, 64)   1
    (59, 43)   0.4722222
    (59, 44)   -0.3726708
    (59, 53)   -0.9444444
    (59, 64)   1
    (60, 35)   -0.2069954
    (60, 36)   -0.2356469
    (60, 37)   -0.2475675
    (60, 38)   -0.2074873
    (60, 44)   1
    (61, 45)   1.863354
    (61, 49)   0.4444444
    (61, 54)   -1.863354
    (61, 66)   1
    (62, 46)   1.490683
    (62, 50)   0.4444444
    (62, 54)   -1.490683
    (62, 66)   1
    (63, 47)   1.118012
    (63, 51)   0.4444444
    (63, 54)   -1.118012
    (63, 66)   1
    (64, 48)   0.7453416
    (64, 52)   0.4444444
    (64, 54)   -0.7453416
    (64, 66)   1
    (65, 53)   0.4444444
    (65, 54)   -0.3726708
    (65, 66)   1
    (66, 45)   -0.1443354
    (66, 46)   -0.1918557
    (66, 47)   -0.2421498
    (66, 48)   -0.2541193
    (66, 54)   1
[ OK ]
Test DisplayGraph_brutal...                     
############################# TRIAL: 0

########### cover.mtx: pr: -1 (nothing)

########### cover.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 7 entries: 12 type: int32

########### cover.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12

########### cover.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

########### cover.mtx: pr: 3 (all)
skipped for brutal tests

########### cover.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unknown
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

########### cover.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 1

########### cover.mtx: pr: -1 (nothing)

########### cover.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 7 entries: 12 type: int32

########### cover.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12

########### cover.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

########### cover.mtx: pr: 3 (all)
skipped for brutal tests

########### cover.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8

########### cover.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 0

########### ldbc-directed-example.mtx: pr: -1 (nothing)

########### ldbc-directed-example.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 10 entries: 18 type: double

########### ldbc-directed-example.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18

########### ldbc-directed-example.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

########### ldbc-directed-example.mtx: pr: 3 (all)
skipped for brutal tests

########### ldbc-directed-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

########### ldbc-directed-example.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 1

########### ldbc-directed-example.mtx: pr: -1 (nothing)

########### ldbc-directed-example.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 10 entries: 18 type: double

########### ldbc-directed-example.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18

########### ldbc-directed-example.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

########### ldbc-directed-example.mtx: pr: 3 (all)
skipped for brutal tests

########### ldbc-directed-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
Graph: kind: directed, nodes: 10 entries: 18 type: double
  structural symmetry: unsymmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 1)   3.14159265358979
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 18
    (0, 2)   0.53
    (0, 7)   0.39
    (1, 0)   3.14159265358979
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52

########### ldbc-directed-example.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 0

########### ldbc-undirected-example.mtx: pr: -1 (nothing)

########### ldbc-undirected-example.mtx: pr: 0 (single line)
Graph: kind: undirected, nodes: 9 entries: 24 type: double

########### ldbc-undirected-example.mtx: pr: 1 (terse)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24

########### ldbc-undirected-example.mtx: pr: 2 (summary)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 3 (all)
skipped for brutal tests

########### ldbc-undirected-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 1

########### ldbc-undirected-example.mtx: pr: -1 (nothing)

########### ldbc-undirected-example.mtx: pr: 0 (single line)
Graph: kind: undirected, nodes: 9 entries: 24 type: double

########### ldbc-undirected-example.mtx: pr: 1 (terse)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24

########### ldbc-undirected-example.mtx: pr: 2 (summary)
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 3 (all)
skipped for brutal tests

########### ldbc-undirected-example.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric  self-edges: 0
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   3.14159265358979
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

########### ldbc-undirected-example.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 0

########### west0067.mtx: pr: -1 (nothing)

########### west0067.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 67 entries: 295 type: double

########### west0067.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295

########### west0067.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...

########### west0067.mtx: pr: 3 (all)
skipped for brutal tests

########### west0067.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unknown
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...

########### west0067.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests

############################# TRIAL: 1

########### west0067.mtx: pr: -1 (nothing)

########### west0067.mtx: pr: 0 (single line)
Graph: kind: directed, nodes: 67 entries: 295 type: double

########### west0067.mtx: pr: 1 (terse)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295

########### west0067.mtx: pr: 2 (summary)
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.278842
    (0, 5)   -0.268019
    (0, 6)   -0.232372
    (0, 7)   -0.157508
    (0, 8)   -0.0632598
    (0, 24)   0.139421
    (0, 25)   0.134009
    (0, 26)   0.116186
    (0, 27)   0.0787541
    (0, 28)   0.0316299
    (1, 0)   3.14159
    (1, 4)   -0.8
    (1, 20)   -0.915953
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.915953
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.915953
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.915953
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    ...

########### west0067.mtx: pr: 3 (all)
skipped for brutal tests

########### west0067.mtx: pr: 4 (summary (doubles in full precision))
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
Graph: kind: directed, nodes: 67 entries: 295 type: double
  structural symmetry: unsymmetric  self-edges: 2
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 1)   3.14159265358979
    (0, 7)   -0.8341818
    (0, 12)   1.265823
    (0, 17)   -0.3361556
    (1, 8)   -0.8341818
    (1, 13)   1.012658
    (1, 17)   -0.2939196
    (2, 9)   -0.8341818
    (2, 14)   0.7594937
    (2, 17)   -0.2214815
    (3, 10)   -0.8341818
    (3, 15)   0.5063291
    (3, 17)   -0.118986
    (4, 0)   -0.2788416
    (4, 1)   -0.8
    (4, 6)   0.1344622
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.2680186
    (5, 2)   -0.8
    (5, 6)   0.1175679
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.2323717
    (6, 3)   -0.8
    (6, 6)   0.08859262
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.1575082
    (7, 4)   -0.8
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 295
    (0, 4)   -0.2788416
    (0, 5)   -0.2680186
    (0, 6)   -0.2323717
    (0, 7)   -0.1575082
    (0, 8)   -0.06325978
    (0, 24)   0.1394208
    (0, 25)   0.1340093
    (0, 26)   0.1161859
    (0, 27)   0.07875411
    (0, 28)   0.03162989
    (1, 0)   3.14159265358979
    (1, 4)   -0.8
    (1, 20)   -0.9159533
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.9159533
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.9159533
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.9159533
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    ...

########### west0067.mtx: pr: 5 (all (doubles in full precision))
skipped for brutal tests
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_DisplayGraph" end time: Dec 07 10:31 EST
"ctest_DisplayGraph" time elapsed: 00:00:00
----------------------------------------------------------

7/40 Testing: ctest_Init
7/40 Test: ctest_Init
Command: "/home/afanasyev/LAGraph/build/src/test/test_Init"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Init" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Init...                                    
library: SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
include: SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)

status: -3 msg: failed to initialize LAGraph
status 0
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Init" end time: Dec 07 10:31 EST
"ctest_Init" time elapsed: 00:00:00
----------------------------------------------------------

8/40 Testing: ctest_IsEqual
8/40 Test: ctest_IsEqual
Command: "/home/afanasyev/LAGraph/build/src/test/test_IsEqual"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_IsEqual" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test IsEqual...                                 
Testing IsEqual:
test  0: A.mtx cover.mtx (GrB_BOOL)
test  1: A.mtx A2.mtx (GrB_BOOL)
test  2: cover.mtx cover_structure.mtx (GrB_BOOL)
test  3: cover.mtx cover_structure.mtx (GrB_INT32)
test  4: LFAT5.mtx LFAT5.mtx (GrB_FP64)
test  5: sample2.mtx sample.mtx (GrB_BOOL)
test  6: sample.mtx sample.mtx (GrB_BOOL)
test  7: matrix_int32.mtx matrix_int32.mtx (GrB_FP64)
test  8: matrix_int32.mtx matrix_int32.mtx (GrB_INT32)
test  9: matrix_int32.mtx matrix_int64.mtx (GrB_INT32)
test 10: matrix_int32.mtx matrix_int64.mtx (GrB_BOOL)
test 11: west0067.mtx west0067_jumbled.mtx (GrB_FP64)
test 12: west0067.mtx west0067_noheader.mtx (GrB_FP64)
test 13: LFAT5.mtx west0067.mtx (GrB_FP64)
test 14: empty.mtx full.mtx (GrB_FP64)
test 15: full.mtx full_noheader.mtx (GrB_FP64)
[ OK ]
Test Vector_IsEqual...                          [ OK ]
Test IsEqual_failures...                        
Test IsEqual: error handling and special cases
msg: required input is NULL
msg: required input is NULL
msg: required input is NULL
msg: required input is NULL
msg: required input is NULL
msg: required input is NULL
msg: unsupported type
msg: unsupported type
[ OK ]
Test IsEqual_brutal...                          
Testing IsEqual:
test  0: A.mtx cover.mtx (GrB_BOOL)
test  1: A.mtx A2.mtx (GrB_BOOL)
test  2: cover.mtx cover_structure.mtx (GrB_BOOL)
test  3: cover.mtx cover_structure.mtx (GrB_INT32)
test  4: LFAT5.mtx LFAT5.mtx (GrB_FP64)
test  5: sample2.mtx sample.mtx (GrB_BOOL)
test  6: sample.mtx sample.mtx (GrB_BOOL)
test  7: matrix_int32.mtx matrix_int32.mtx (GrB_FP64)
test  8: matrix_int32.mtx matrix_int32.mtx (GrB_INT32)
test  9: matrix_int32.mtx matrix_int64.mtx (GrB_INT32)
test 10: matrix_int32.mtx matrix_int64.mtx (GrB_BOOL)
test 11: west0067.mtx west0067_jumbled.mtx (GrB_FP64)
test 12: west0067.mtx west0067_noheader.mtx (GrB_FP64)
test 13: LFAT5.mtx west0067.mtx (GrB_FP64)
test 14: empty.mtx full.mtx (GrB_FP64)
test 15: full.mtx full_noheader.mtx (GrB_FP64)
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_IsEqual" end time: Dec 07 10:31 EST
"ctest_IsEqual" time elapsed: 00:00:00
----------------------------------------------------------

9/40 Testing: ctest_KindName
9/40 Test: ctest_KindName
Command: "/home/afanasyev/LAGraph/build/src/test/test_KindName"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_KindName" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test KindName...                                
msg: invalid kind
[ OK ]
Test KindName_brutal...                         [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_KindName" end time: Dec 07 10:31 EST
"ctest_KindName" time elapsed: 00:00:00
----------------------------------------------------------

10/40 Testing: ctest_MMRead
10/40 Test: ctest_MMRead
Command: "/home/afanasyev/LAGraph/build/src/test/test_MMRead"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_MMRead" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test MMRead...                                  
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]

=============  0: A.mtx

Pretty-print A.mtx: pr=0:
GrB_BOOL matrix: 7-by-7 entries: 30

Pretty-print A.mtx: pr=1:
GrB_BOOL matrix: 7-by-7 entries: 30

Pretty-print A.mtx: pr=2:
GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 1)   1
    (4, 3)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 6)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1

=============  1: cover.mtx

Pretty-print cover.mtx: pr=0:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print cover.mtx: pr=1:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print cover.mtx: pr=2:
GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

=============  2: cover_structure.mtx

Pretty-print cover_structure.mtx: pr=0:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print cover_structure.mtx: pr=1:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print cover_structure.mtx: pr=2:
GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (4, 5)   1
    (5, 2)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1

=============  3: jagmesh7.mtx

Pretty-print jagmesh7.mtx: pr=0:
GrB_BOOL matrix: 1138-by-1138 entries: 7450

Pretty-print jagmesh7.mtx: pr=1:
GrB_BOOL matrix: 1138-by-1138 entries: 7450

Pretty-print jagmesh7.mtx: pr=2:
GrB_BOOL matrix: 1138-by-1138 entries: 7450
    (0, 0)   1
    (0, 1)   1
    (0, 17)   1
    (0, 28)   1
    (0, 49)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 17)   1
    (1, 18)   1
    (1, 28)   1
    (1, 39)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (2, 18)   1
    (2, 19)   1
    (2, 39)   1
    (2, 43)   1
    (3, 2)   1
    (3, 3)   1
    (3, 4)   1
    (3, 19)   1
    (3, 20)   1
    (3, 43)   1
    (3, 46)   1
    (4, 3)   1
    (4, 4)   1
    (4, 5)   1
    (4, 20)   1
    ...

=============  4: ldbc-cdlp-directed-example.mtx

Pretty-print ldbc-cdlp-directed-example.mtx: pr=0:
GrB_BOOL matrix: 8-by-8 entries: 18

Pretty-print ldbc-cdlp-directed-example.mtx: pr=1:
GrB_BOOL matrix: 8-by-8 entries: 18

Pretty-print ldbc-cdlp-directed-example.mtx: pr=2:
GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 4)   1
    (5, 6)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 5)   1

=============  5: ldbc-cdlp-undirected-example.mtx

Pretty-print ldbc-cdlp-undirected-example.mtx: pr=0:
GrB_BOOL matrix: 8-by-8 entries: 24

Pretty-print ldbc-cdlp-undirected-example.mtx: pr=1:
GrB_BOOL matrix: 8-by-8 entries: 24

Pretty-print ldbc-cdlp-undirected-example.mtx: pr=2:
GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 7)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 3)   1
    (5, 4)   1
    (5, 7)   1
    (6, 0)   1
    (6, 4)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1

=============  6: ldbc-directed-example-bool.mtx

Pretty-print ldbc-directed-example-bool.mtx: pr=0:
GrB_BOOL matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example-bool.mtx: pr=1:
GrB_BOOL matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example-bool.mtx: pr=2:
GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 7)   1
    (2, 9)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (8, 3)   1

=============  7: ldbc-directed-example.mtx

Pretty-print ldbc-directed-example.mtx: pr=0:
GrB_FP64 matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example.mtx: pr=1:
GrB_FP64 matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example.mtx: pr=2:
GrB_FP64 matrix: 10-by-10 entries: 17
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69

=============  8: ldbc-directed-example-unweighted.mtx

Pretty-print ldbc-directed-example-unweighted.mtx: pr=0:
GrB_BOOL matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example-unweighted.mtx: pr=1:
GrB_BOOL matrix: 10-by-10 entries: 17

Pretty-print ldbc-directed-example-unweighted.mtx: pr=2:
GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 7)   1
    (2, 9)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (8, 3)   1

=============  9: ldbc-undirected-example-bool.mtx

Pretty-print ldbc-undirected-example-bool.mtx: pr=0:
GrB_BOOL matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example-bool.mtx: pr=1:
GrB_BOOL matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example-bool.mtx: pr=2:
GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1

============= 10: ldbc-undirected-example.mtx

Pretty-print ldbc-undirected-example.mtx: pr=0:
GrB_FP64 matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example.mtx: pr=1:
GrB_FP64 matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example.mtx: pr=2:
GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   0.9
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63

============= 11: ldbc-undirected-example-unweighted.mtx

Pretty-print ldbc-undirected-example-unweighted.mtx: pr=0:
GrB_BOOL matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example-unweighted.mtx: pr=1:
GrB_BOOL matrix: 9-by-9 entries: 24

Pretty-print ldbc-undirected-example-unweighted.mtx: pr=2:
GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1

============= 12: ldbc-wcc-example.mtx

Pretty-print ldbc-wcc-example.mtx: pr=0:
GrB_INT64 matrix: 10-by-10 entries: 30

Pretty-print ldbc-wcc-example.mtx: pr=1:
GrB_INT64 matrix: 10-by-10 entries: 30

Pretty-print ldbc-wcc-example.mtx: pr=2:
GrB_INT64 matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 4)   1
    (0, 7)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (2, 7)   1
    (2, 9)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (7, 2)   1
    (7, 4)   1
    (8, 3)   1
    (9, 1)   1
    (9, 2)   1

============= 13: LFAT5.mtx

Pretty-print LFAT5.mtx: pr=0:
GrB_FP64 matrix: 14-by-14 entries: 46

Pretty-print LFAT5.mtx: pr=1:
GrB_FP64 matrix: 14-by-14 entries: 46

Pretty-print LFAT5.mtx: pr=2:
GrB_FP64 matrix: 14-by-14 entries: 46
    (0, 0)   1.57088
    (0, 3)   -94.2528
    (0, 4)   0.78544
    (1, 1)   1.25664e+07
    (1, 5)   -6.2832e+06
    (2, 2)   0.608806
    (2, 6)   -0.304403
    (3, 0)   -94.2528
    (3, 3)   15080.4
    (3, 7)   -7540.22
    (3, 8)   94.2528
    (4, 0)   0.78544
    (4, 4)   3.14176
    (4, 7)   -94.2528
    (4, 8)   0.78544
    (5, 1)   -6.2832e+06
    (5, 5)   1.25664e+07
    (5, 9)   -6.2832e+06
    (6, 2)   -0.304403
    (6, 6)   0.608806
    (6, 10)   -0.304403
    (7, 3)   -7540.22
    (7, 4)   -94.2528
    (7, 7)   15080.4
    (7, 11)   -7540.22
    (7, 12)   94.2528
    (8, 3)   94.2528
    (8, 4)   0.78544
    (8, 8)   3.14176
    (8, 11)   -94.2528
    ...

============= 14: msf1.mtx

Pretty-print msf1.mtx: pr=0:
GrB_INT64 matrix: 6-by-6 entries: 8

Pretty-print msf1.mtx: pr=1:
GrB_INT64 matrix: 6-by-6 entries: 8

Pretty-print msf1.mtx: pr=2:
GrB_INT64 matrix: 6-by-6 entries: 8
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 2)   1
    (2, 3)   1
    (3, 2)   1
    (4, 5)   1
    (5, 3)   1

============= 15: msf2.mtx

Pretty-print msf2.mtx: pr=0:
GrB_INT64 matrix: 8-by-8 entries: 12

Pretty-print msf2.mtx: pr=1:
GrB_INT64 matrix: 8-by-8 entries: 12

Pretty-print msf2.mtx: pr=2:
GrB_INT64 matrix: 8-by-8 entries: 12
    (0, 1)   2
    (0, 3)   4
    (1, 2)   5
    (1, 4)   1
    (1, 7)   3
    (2, 4)   4
    (2, 5)   3
    (2, 6)   2
    (3, 5)   2
    (3, 7)   1
    (4, 6)   2
    (5, 7)   6

============= 16: msf3.mtx

Pretty-print msf3.mtx: pr=0:
GrB_INT64 matrix: 5-by-5 entries: 7

Pretty-print msf3.mtx: pr=1:
GrB_INT64 matrix: 5-by-5 entries: 7

Pretty-print msf3.mtx: pr=2:
GrB_INT64 matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 2)   1
    (1, 3)   2
    (1, 4)   2
    (2, 3)   2
    (2, 4)   2
    (3, 4)   1

============= 17: sample2.mtx

Pretty-print sample2.mtx: pr=0:
GrB_BOOL matrix: 8-by-8 entries: 28

Pretty-print sample2.mtx: pr=1:
GrB_BOOL matrix: 8-by-8 entries: 28

Pretty-print sample2.mtx: pr=2:
GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (5, 7)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1

============= 18: sample.mtx

Pretty-print sample.mtx: pr=0:
GrB_BOOL matrix: 8-by-8 entries: 12

Pretty-print sample.mtx: pr=1:
GrB_BOOL matrix: 8-by-8 entries: 12

Pretty-print sample.mtx: pr=2:
GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (4, 5)   1
    (4, 6)   1
    (5, 7)   1
    (6, 7)   1

============= 19: sources_7.mtx

Pretty-print sources_7.mtx: pr=0:
GrB_INT64 matrix: 64-by-1 entries: 64

Pretty-print sources_7.mtx: pr=1:
GrB_INT64 matrix: 64-by-1 entries: 64

Pretty-print sources_7.mtx: pr=2:
GrB_INT64 matrix: 64-by-1 entries: 64
    (0, 0)   2
    (1, 0)   5
    (2, 0)   3
    (3, 0)   6
    (4, 0)   2
    (5, 0)   4
    (6, 0)   4
    (7, 0)   3
    (8, 0)   2
    (9, 0)   4
    (10, 0)   3
    (11, 0)   6
    (12, 0)   7
    (13, 0)   5
    (14, 0)   7
    (15, 0)   1
    (16, 0)   4
    (17, 0)   2
    (18, 0)   3
    (19, 0)   3
    (20, 0)   4
    (21, 0)   1
    (22, 0)   6
    (23, 0)   3
    (24, 0)   3
    (25, 0)   6
    (26, 0)   6
    (27, 0)   7
    (28, 0)   2
    (29, 0)   6
    ...

============= 20: olm1000.mtx

Pretty-print olm1000.mtx: pr=0:
GrB_FP64 matrix: 1000-by-1000 entries: 3996

Pretty-print olm1000.mtx: pr=1:
GrB_FP64 matrix: 1000-by-1000 entries: 3996

Pretty-print olm1000.mtx: pr=2:
GrB_FP64 matrix: 1000-by-1000 entries: 3996
    (0, 0)   -5081.64
    (0, 1)   -45777.1
    (0, 2)   2543.17
    (0, 3)   22888.5
    (1, 0)   0.5
    (1, 1)   -0.5
    (2, 0)   2543.17
    (2, 1)   22888.5
    (2, 2)   -5081.64
    (2, 3)   -45777.1
    (2, 4)   2543.17
    (2, 5)   22888.5
    (3, 2)   0.5
    (3, 3)   -0.5
    (4, 2)   2543.17
    (4, 3)   22888.5
    (4, 4)   -5081.64
    (4, 5)   -45777.1
    (4, 6)   2543.17
    (4, 7)   22888.5
    (5, 4)   0.5
    (5, 5)   -0.5
    (6, 4)   2543.17
    (6, 5)   22888.5
    (6, 6)   -5081.64
    (6, 7)   -45777.1
    (6, 8)   2543.17
    (6, 9)   22888.5
    (7, 6)   0.5
    (7, 7)   -0.5
    ...

============= 21: bcsstk13.mtx

Pretty-print bcsstk13.mtx: pr=0:
GrB_FP64 matrix: 2003-by-2003 entries: 83883

Pretty-print bcsstk13.mtx: pr=1:
GrB_FP64 matrix: 2003-by-2003 entries: 83883

Pretty-print bcsstk13.mtx: pr=2:
GrB_FP64 matrix: 2003-by-2003 entries: 83883
    (0, 0)   2.77281e+08
    (0, 1)   3.10192e+06
    (0, 2)   -5.11313e+07
    (0, 3)   -1.31227e+06
    (0, 4)   -6.12603e+07
    (0, 5)   1.0235e+09
    (0, 6)   -4.75432e+07
    (0, 7)   -1.32204e+06
    (0, 8)   3.74131e+06
    (0, 9)   1.24027e+06
    (0, 10)   84564.5
    (0, 11)   -3.7798e+07
    (0, 36)   -2.03602e+08
    (0, 40)   6.09325e+07
    (0, 41)   1.0613e+09
    (0, 156)   -1.59304e+07
    (0, 157)   -1.11585e+06
    (0, 158)   5.11313e+07
    (0, 159)   1.24027e+06
    (0, 160)   84564.5
    (0, 161)   264.818
    (0, 162)   -1.16509e+07
    (0, 163)   -664028
    (0, 164)   -3.74131e+06
    (0, 165)   -1.31227e+06
    (0, 166)   -6.12603e+07
    (0, 167)   26864.5
    (0, 168)   1.44571e+06
    (0, 172)   6.09325e+07
    (0, 173)   26599.7
    ...

============= 22: cryg2500.mtx

Pretty-print cryg2500.mtx: pr=0:
GrB_FP64 matrix: 2500-by-2500 entries: 12349

Pretty-print cryg2500.mtx: pr=1:
GrB_FP64 matrix: 2500-by-2500 entries: 12349

Pretty-print cryg2500.mtx: pr=2:
GrB_FP64 matrix: 2500-by-2500 entries: 12349
    (0, 0)   -5679.84
    (0, 1)   4615.53
    (0, 50)   522.446
    (0, 2450)   54.1859
    (1, 0)   2171.26
    (1, 1)   -5319.48
    (1, 2)   2084.32
    (1, 51)   522.245
    (1, 2451)   54.1651
    (2, 1)   1997.82
    (2, 2)   -4976.52
    (2, 3)   1916.1
    (2, 52)   521.61
    (2, 2452)   54.0992
    (3, 2)   1833.36
    (3, 3)   -4650.39
    (3, 4)   1756.71
    (3, 53)   520.488
    (3, 2453)   53.9829
    (4, 3)   1677.67
    (4, 4)   -4340.54
    (4, 5)   1605.95
    (4, 54)   518.824
    (4, 2454)   53.8103
    (5, 4)   1530.54
    (5, 5)   -4046.44
    (5, 6)   1463.59
    (5, 55)   516.559
    (5, 2455)   53.5754
    (6, 5)   1391.76
    ...

============= 23: tree-example.mtx

Pretty-print tree-example.mtx: pr=0:
GrB_INT64 matrix: 6-by-6 entries: 10

Pretty-print tree-example.mtx: pr=1:
GrB_INT64 matrix: 6-by-6 entries: 10

Pretty-print tree-example.mtx: pr=2:
GrB_INT64 matrix: 6-by-6 entries: 10
    (0, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 4)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (5, 3)   1

============= 24: west0067.mtx

Pretty-print west0067.mtx: pr=0:
GrB_FP64 matrix: 67-by-67 entries: 294

Pretty-print west0067.mtx: pr=1:
GrB_FP64 matrix: 67-by-67 entries: 294

Pretty-print west0067.mtx: pr=2:
GrB_FP64 matrix: 67-by-67 entries: 294
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    ...

============= 25: lp_afiro.mtx

Pretty-print lp_afiro.mtx: pr=0:
GrB_FP64 matrix: 27-by-51 entries: 102

Pretty-print lp_afiro.mtx: pr=1:
GrB_FP64 matrix: 27-by-51 entries: 102

Pretty-print lp_afiro.mtx: pr=2:
GrB_FP64 matrix: 27-by-51 entries: 102
    (0, 19)   -1
    (0, 20)   1
    (0, 21)   1
    (1, 19)   -1.06
    (1, 22)   1
    (2, 0)   1
    (2, 19)   1
    (3, 1)   1
    (3, 20)   -1
    (3, 31)   1.4
    (4, 23)   -1
    (4, 24)   -1
    (4, 25)   -1
    (4, 26)   -1
    (4, 31)   1
    (4, 32)   1
    (5, 23)   -1.06
    (5, 24)   -1.06
    (5, 25)   -0.96
    (5, 26)   -0.86
    (5, 33)   1
    (6, 2)   1
    (6, 23)   1
    (6, 27)   -1
    (7, 3)   1
    (7, 24)   1
    (7, 28)   -1
    (8, 4)   1
    (8, 25)   1
    (8, 29)   -1
    ...

============= 26: lp_afiro_structure.mtx

Pretty-print lp_afiro_structure.mtx: pr=0:
GrB_BOOL matrix: 27-by-51 entries: 102

Pretty-print lp_afiro_structure.mtx: pr=1:
GrB_BOOL matrix: 27-by-51 entries: 102

Pretty-print lp_afiro_structure.mtx: pr=2:
GrB_BOOL matrix: 27-by-51 entries: 102
    (0, 19)   1
    (0, 20)   1
    (0, 21)   1
    (1, 19)   1
    (1, 22)   1
    (2, 0)   1
    (2, 19)   1
    (3, 1)   1
    (3, 20)   1
    (3, 31)   1
    (4, 23)   1
    (4, 24)   1
    (4, 25)   1
    (4, 26)   1
    (4, 31)   1
    (4, 32)   1
    (5, 23)   1
    (5, 24)   1
    (5, 25)   1
    (5, 26)   1
    (5, 33)   1
    (6, 2)   1
    (6, 23)   1
    (6, 27)   1
    (7, 3)   1
    (7, 24)   1
    (7, 28)   1
    (8, 4)   1
    (8, 25)   1
    (8, 29)   1
    ...

============= 27: karate.mtx

Pretty-print karate.mtx: pr=0:
GrB_BOOL matrix: 34-by-34 entries: 156

Pretty-print karate.mtx: pr=1:
GrB_BOOL matrix: 34-by-34 entries: 156

Pretty-print karate.mtx: pr=2:
GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...

============= 28: matrix_bool.mtx

Pretty-print matrix_bool.mtx: pr=0:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print matrix_bool.mtx: pr=1:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print matrix_bool.mtx: pr=2:
GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   0
    (1, 4)   1
    (1, 6)   1
    (2, 5)   0
    (3, 0)   0
    (3, 2)   1
    (4, 5)   1
    (5, 2)   0
    (6, 2)   1
    (6, 3)   1
    (6, 4)   0

============= 29: matrix_int8.mtx

Pretty-print matrix_int8.mtx: pr=0:
GrB_INT8 matrix: 7-by-7 entries: 12

Pretty-print matrix_int8.mtx: pr=1:
GrB_INT8 matrix: 7-by-7 entries: 12

Pretty-print matrix_int8.mtx: pr=2:
GrB_INT8 matrix: 7-by-7 entries: 12
    (0, 1)   127
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -128
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 30: matrix_int16.mtx

Pretty-print matrix_int16.mtx: pr=0:
GrB_INT16 matrix: 7-by-7 entries: 12

Pretty-print matrix_int16.mtx: pr=1:
GrB_INT16 matrix: 7-by-7 entries: 12

Pretty-print matrix_int16.mtx: pr=2:
GrB_INT16 matrix: 7-by-7 entries: 12
    (0, 1)   32767
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -32768
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 31: matrix_int32.mtx

Pretty-print matrix_int32.mtx: pr=0:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print matrix_int32.mtx: pr=1:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print matrix_int32.mtx: pr=2:
GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2147483647
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -2147483648
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 32: matrix_int64.mtx

Pretty-print matrix_int64.mtx: pr=0:
GrB_INT64 matrix: 7-by-7 entries: 12

Pretty-print matrix_int64.mtx: pr=1:
GrB_INT64 matrix: 7-by-7 entries: 12

Pretty-print matrix_int64.mtx: pr=2:
GrB_INT64 matrix: 7-by-7 entries: 12
    (0, 1)   9223372036854775807
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -9223372036854775808
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 33: matrix_uint8.mtx

Pretty-print matrix_uint8.mtx: pr=0:
GrB_UINT8 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint8.mtx: pr=1:
GrB_UINT8 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint8.mtx: pr=2:
GrB_UINT8 matrix: 7-by-7 entries: 12
    (0, 1)   255
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   0
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 34: matrix_uint16.mtx

Pretty-print matrix_uint16.mtx: pr=0:
GrB_UINT16 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint16.mtx: pr=1:
GrB_UINT16 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint16.mtx: pr=2:
GrB_UINT16 matrix: 7-by-7 entries: 12
    (0, 1)   65535
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   0
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 35: matrix_uint32.mtx

Pretty-print matrix_uint32.mtx: pr=0:
GrB_UINT32 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint32.mtx: pr=1:
GrB_UINT32 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint32.mtx: pr=2:
GrB_UINT32 matrix: 7-by-7 entries: 12
    (0, 1)   4294967295
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   0
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 36: matrix_uint64.mtx

Pretty-print matrix_uint64.mtx: pr=0:
GrB_UINT64 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint64.mtx: pr=1:
GrB_UINT64 matrix: 7-by-7 entries: 12

Pretty-print matrix_uint64.mtx: pr=2:
GrB_UINT64 matrix: 7-by-7 entries: 12
    (0, 1)   4294967295
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   0
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 37: matrix_fp32.mtx

Pretty-print matrix_fp32.mtx: pr=0:
GrB_FP32 matrix: 7-by-7 entries: 12

Pretty-print matrix_fp32.mtx: pr=1:
GrB_FP32 matrix: 7-by-7 entries: 12

Pretty-print matrix_fp32.mtx: pr=2:
GrB_FP32 matrix: 7-by-7 entries: 12
    (0, 1)   inf
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -inf
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 38: matrix_fp32_structure.mtx

Pretty-print matrix_fp32_structure.mtx: pr=0:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print matrix_fp32_structure.mtx: pr=1:
GrB_BOOL matrix: 7-by-7 entries: 12

Pretty-print matrix_fp32_structure.mtx: pr=2:
GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (4, 5)   1
    (5, 2)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1

============= 39: matrix_fp64.mtx

Pretty-print matrix_fp64.mtx: pr=0:
GrB_FP64 matrix: 7-by-7 entries: 12

Pretty-print matrix_fp64.mtx: pr=1:
GrB_FP64 matrix: 7-by-7 entries: 12

Pretty-print matrix_fp64.mtx: pr=2:
GrB_FP64 matrix: 7-by-7 entries: 12
    (0, 1)   inf
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -inf
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1

============= 40: west0067_jumbled.mtx

Pretty-print west0067_jumbled.mtx: pr=0:
GrB_FP64 matrix: 67-by-67 entries: 294

Pretty-print west0067_jumbled.mtx: pr=1:
GrB_FP64 matrix: 67-by-67 entries: 294

Pretty-print west0067_jumbled.mtx: pr=2:
GrB_FP64 matrix: 67-by-67 entries: 294
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    ...

============= 41: skew_fp32.mtx

Pretty-print skew_fp32.mtx: pr=0:
GrB_FP32 matrix: 6-by-6 entries: 20

Pretty-print skew_fp32.mtx: pr=1:
GrB_FP32 matrix: 6-by-6 entries: 20

Pretty-print skew_fp32.mtx: pr=2:
GrB_FP32 matrix: 6-by-6 entries: 20
    (0, 3)   0.12565
    (0, 4)   -inf
    (0, 5)   0.37818
    (1, 2)   -0.7261
    (1, 3)   -0.78287
    (1, 4)   0.7709
    (2, 1)   0.7261
    (2, 3)   -0.0098
    (2, 5)   -0.70433
    (3, 0)   -0.12565
    (3, 1)   0.78287
    (3, 2)   0.0098
    (3, 5)   -1.6518
    (4, 0)   inf
    (4, 1)   -0.7709
    (4, 5)   0.1816
    (5, 0)   -0.37818
    (5, 2)   0.70433
    (5, 3)   1.6518
    (5, 4)   -0.1816

============= 42: skew_fp64.mtx

Pretty-print skew_fp64.mtx: pr=0:
GrB_FP64 matrix: 6-by-6 entries: 20

Pretty-print skew_fp64.mtx: pr=1:
GrB_FP64 matrix: 6-by-6 entries: 20

Pretty-print skew_fp64.mtx: pr=2:
GrB_FP64 matrix: 6-by-6 entries: 20
    (0, 3)   0.125655
    (0, 4)   -inf
    (0, 5)   0.378186
    (1, 2)   -0.726104
    (1, 3)   -0.782872
    (1, 4)   0.770954
    (2, 1)   0.726104
    (2, 3)   -0.00980225
    (2, 5)   -0.70434
    (3, 0)   -0.125655
    (3, 1)   0.782872
    (3, 2)   0.00980225
    (3, 5)   -1.65185
    (4, 0)   inf
    (4, 1)   -0.770954
    (4, 5)   0.181617
    (5, 0)   -0.378186
    (5, 2)   0.70434
    (5, 3)   1.65185
    (5, 4)   -0.181617

============= 43: skew_int8.mtx

Pretty-print skew_int8.mtx: pr=0:
GrB_INT8 matrix: 6-by-6 entries: 20

Pretty-print skew_int8.mtx: pr=1:
GrB_INT8 matrix: 6-by-6 entries: 20

Pretty-print skew_int8.mtx: pr=2:
GrB_INT8 matrix: 6-by-6 entries: 20
    (0, 3)   12
    (0, 4)   -30
    (0, 5)   37
    (1, 2)   -72
    (1, 3)   -78
    (1, 4)   77
    (2, 1)   72
    (2, 3)   0
    (2, 5)   -70
    (3, 0)   -12
    (3, 1)   78
    (3, 2)   0
    (3, 5)   -125
    (4, 0)   30
    (4, 1)   -77
    (4, 5)   18
    (5, 0)   -37
    (5, 2)   70
    (5, 3)   125
    (5, 4)   -18

============= 44: skew_int16.mtx

Pretty-print skew_int16.mtx: pr=0:
GrB_INT16 matrix: 6-by-6 entries: 20

Pretty-print skew_int16.mtx: pr=1:
GrB_INT16 matrix: 6-by-6 entries: 20

Pretty-print skew_int16.mtx: pr=2:
GrB_INT16 matrix: 6-by-6 entries: 20
    (0, 3)   12
    (0, 4)   -30000
    (0, 5)   37
    (1, 2)   -72
    (1, 3)   -78
    (1, 4)   77
    (2, 1)   72
    (2, 3)   0
    (2, 5)   -70
    (3, 0)   -12
    (3, 1)   78
    (3, 2)   0
    (3, 5)   -125
    (4, 0)   30000
    (4, 1)   -77
    (4, 5)   18
    (5, 0)   -37
    (5, 2)   70
    (5, 3)   125
    (5, 4)   -18

============= 45: skew_int32.mtx

Pretty-print skew_int32.mtx: pr=0:
GrB_INT32 matrix: 6-by-6 entries: 20

Pretty-print skew_int32.mtx: pr=1:
GrB_INT32 matrix: 6-by-6 entries: 20

Pretty-print skew_int32.mtx: pr=2:
GrB_INT32 matrix: 6-by-6 entries: 20
    (0, 3)   12
    (0, 4)   -30000000
    (0, 5)   37
    (1, 2)   -72
    (1, 3)   -78
    (1, 4)   77
    (2, 1)   72
    (2, 3)   0
    (2, 5)   -70
    (3, 0)   -12
    (3, 1)   78
    (3, 2)   0
    (3, 5)   -125
    (4, 0)   30000000
    (4, 1)   -77
    (4, 5)   18
    (5, 0)   -37
    (5, 2)   70
    (5, 3)   125
    (5, 4)   -18

============= 46: skew_int64.mtx

Pretty-print skew_int64.mtx: pr=0:
GrB_INT64 matrix: 6-by-6 entries: 20

Pretty-print skew_int64.mtx: pr=1:
GrB_INT64 matrix: 6-by-6 entries: 20

Pretty-print skew_int64.mtx: pr=2:
GrB_INT64 matrix: 6-by-6 entries: 20
    (0, 3)   12
    (0, 4)   -9223372036854775807
    (0, 5)   37
    (1, 2)   -72
    (1, 3)   -78
    (1, 4)   77
    (2, 1)   72
    (2, 3)   0
    (2, 5)   -70
    (3, 0)   -12
    (3, 1)   78
    (3, 2)   0
    (3, 5)   -125
    (4, 0)   9223372036854775807
    (4, 1)   -77
    (4, 5)   18
    (5, 0)   -37
    (5, 2)   70
    (5, 3)   125
    (5, 4)   -18

============= 47: structure.mtx

Pretty-print structure.mtx: pr=0:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print structure.mtx: pr=1:
GrB_INT32 matrix: 7-by-7 entries: 12

Pretty-print structure.mtx: pr=2:
GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (4, 5)   1
    (5, 2)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1

============= 48: full.mtx

Pretty-print full.mtx: pr=0:
GrB_FP64 matrix: 3-by-3 entries: 9

Pretty-print full.mtx: pr=1:
GrB_FP64 matrix: 3-by-3 entries: 9

Pretty-print full.mtx: pr=2:
GrB_FP64 matrix: 3-by-3 entries: 9
    (0, 0)   0.646
    (0, 1)   0.276
    (0, 2)   0.162
    (1, 0)   0.709
    (1, 1)   0.679
    (1, 2)   0.118
    (2, 0)   0.754
    (2, 1)   0.655
    (2, 2)   0.498

============= 49: full_symmetric.mtx

Pretty-print full_symmetric.mtx: pr=0:
GrB_FP64 matrix: 4-by-4 entries: 16

Pretty-print full_symmetric.mtx: pr=1:
GrB_FP64 matrix: 4-by-4 entries: 16

Pretty-print full_symmetric.mtx: pr=2:
GrB_FP64 matrix: 4-by-4 entries: 16
    (0, 0)   10.7622
    (0, 1)   18.1895
    (0, 2)   28.2394
    (0, 3)   22.2696
    (1, 0)   18.1895
    (1, 1)   7.08495
    (1, 2)   18.7506
    (1, 3)   19.2033
    (2, 0)   28.2394
    (2, 1)   18.7506
    (2, 2)   7.2891
    (2, 3)   19.8997
    (3, 0)   22.2696
    (3, 1)   19.2033
    (3, 2)   19.8997
    (3, 3)   3.96359

============= 50: empty.mtx

Pretty-print empty.mtx: pr=0:
GrB_INT32 matrix: 3-by-4 entries: 0

Pretty-print empty.mtx: pr=1:
GrB_INT32 matrix: 3-by-4 entries: 0

Pretty-print empty.mtx: pr=2:
GrB_INT32 matrix: 3-by-4 entries: 0

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test karate...                                  
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]
GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...
GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test MMRead_failures...                         
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]

Testing error handling of LAGraph_MMRead when giving it mangled matrices:
msg: [inputs are NULL]
msg: [inputs are NULL]
msg: [inputs are NULL]
file: [/home/afanasyev/LAGraph/data/mangled1.mtx]
    got the error we expected: -1002 [invalid object]
file: [/home/afanasyev/LAGraph/data/mangled2.mtx]
    got the error we expected: -1002 [invalid format]
file: [/home/afanasyev/LAGraph/data/mangled3.mtx]
    got the error we expected: -1002 [invalid type]
file: [/home/afanasyev/LAGraph/data/complex.mtx]
    got the error we expected: -1 [complex types not yet supported]
file: [/home/afanasyev/LAGraph/data/mangled4.mtx]
    got the error we expected: -1002 [invalid storage]
file: [/home/afanasyev/LAGraph/data/mangled5.mtx]
    got the error we expected: -1002 [invalid pattern combination]
file: [/home/afanasyev/LAGraph/data/mangled6.mtx]
    got the error we expected: -1002 [invalid complex combination]
file: [/home/afanasyev/LAGraph/data/mangled7.mtx]
    got the error we expected: -1002 [type not supported]
file: [/home/afanasyev/LAGraph/data/mangled8.mtx]
    got the error we expected: -1002 [invalid 1st line]
file: [/home/afanasyev/LAGraph/data/mangled9.mtx]
    got the error we expected: -1002 [invalid rectangular]
file: [/home/afanasyev/LAGraph/data/mangled10.mtx]
    got the error we expected: -1002 [premature EOF]
file: [/home/afanasyev/LAGraph/data/mangled11.mtx]
    got the error we expected: -1002 [indices invalid]
file: [/home/afanasyev/LAGraph/data/mangled12.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled13.mtx]
    got the error we expected: -4 [/home/afanasyev/LAGraph/src/utility/LAGraph_MMRead.c, line 914: GrB failure: -4]
file: [/home/afanasyev/LAGraph/data/mangled14.mtx]
    got the error we expected: -1002 [duplicate entries present]
file: [/home/afanasyev/LAGraph/data/mangled_bool.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_int8.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_int16.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_int32.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_uint8.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_uint16.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_uint32.mtx]
    got the error we expected: -1002 [entry invalid]
file: [/home/afanasyev/LAGraph/data/mangled_skew.mtx]
    got the error we expected: -1002 [skew-symmetric matrices cannot have an unsigned type]

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test jumbled...                                 
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test MMWrite...                                 
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]

=============  0: west0067.mtx

=============  1: full.mtx

=============  2: cover.mtx

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test MMWrite_failures...                        
setup: /home/afanasyev/LAGraph/src/test/test_MMRead.c
data is in [/home/afanasyev/LAGraph/data/]

Testing error handling of LAGraph_MMWrite
msg: [inputs are NULL]
msg: [user-defined types not supported]
msg: [unsupported matrix type]

SuiteSparse:GraphBLAS 6.0.2 (Nov 30, 2021)
[ OK ]
Test MMReadWrite_brutal...                      
=============  0: A.mtx

......................... MMWrite ok: 24 mallocs
............. MMRead ok: 12 mallocs

=============  1: cover.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

=============  2: cover_structure.mtx

................ MMWrite ok: 15 mallocs
............. MMRead ok: 12 mallocs

=============  3: jagmesh7.mtx

............................. MMWrite ok: 28 mallocs
...................... MMRead ok: 21 mallocs

=============  4: ldbc-cdlp-directed-example.mtx

................ MMWrite ok: 15 mallocs
............. MMRead ok: 12 mallocs

=============  5: ldbc-cdlp-undirected-example.mtx

......................... MMWrite ok: 24 mallocs
............. MMRead ok: 12 mallocs

=============  6: ldbc-directed-example-bool.mtx

.................. MMWrite ok: 17 mallocs
............. MMRead ok: 12 mallocs

=============  7: ldbc-directed-example.mtx

................................ MMWrite ok: 31 mallocs
............................... MMRead ok: 30 mallocs

=============  8: ldbc-directed-example-unweighted.mtx

.................. MMWrite ok: 17 mallocs
............. MMRead ok: 12 mallocs

=============  9: ldbc-undirected-example-bool.mtx

......................... MMWrite ok: 24 mallocs
............. MMRead ok: 12 mallocs

============= 10: ldbc-undirected-example.mtx

............................... MMWrite ok: 30 mallocs
............................... MMRead ok: 30 mallocs

============= 11: ldbc-undirected-example-unweighted.mtx

......................... MMWrite ok: 24 mallocs
............. MMRead ok: 12 mallocs

============= 12: ldbc-wcc-example.mtx

.............................. MMWrite ok: 29 mallocs
............. MMRead ok: 12 mallocs

============= 13: LFAT5.mtx

............................... MMWrite ok: 30 mallocs
............................... MMRead ok: 30 mallocs

============= 14: msf1.mtx

.......................... MMWrite ok: 25 mallocs
............. MMRead ok: 12 mallocs

============= 15: msf2.mtx

.................................... MMWrite ok: 35 mallocs
............................... MMRead ok: 30 mallocs

============= 16: msf3.mtx

.................................... MMWrite ok: 35 mallocs
........................... MMRead ok: 26 mallocs

============= 17: sample2.mtx

......................... MMWrite ok: 24 mallocs
............. MMRead ok: 12 mallocs

============= 18: sample.mtx

.................... MMWrite ok: 19 mallocs
............. MMRead ok: 12 mallocs

============= 19: sources_7.mtx

........ MMWrite ok: 7 mallocs
........................ MMRead ok: 23 mallocs

============= 20: olm1000.mtx

.................................. MMWrite ok: 33 mallocs
......................................... MMRead ok: 40 mallocs

============= 21: bcsstk13.mtx

.................................... MMWrite ok: 35 mallocs
........................................................ MMRead ok: 55 mallocs

============= 22: cryg2500.mtx

.................................. MMWrite ok: 33 mallocs
............................................... MMRead ok: 46 mallocs

============= 23: tree-example.mtx

.............................. MMWrite ok: 29 mallocs
............. MMRead ok: 12 mallocs

============= 24: west0067.mtx

.................................. MMWrite ok: 33 mallocs
................................ MMRead ok: 31 mallocs

============= 25: lp_afiro.mtx

........... MMWrite ok: 10 mallocs
............................. MMRead ok: 28 mallocs

============= 26: lp_afiro_structure.mtx

..... MMWrite ok: 4 mallocs
............. MMRead ok: 12 mallocs

============= 27: karate.mtx

............................. MMWrite ok: 28 mallocs
............ MMRead ok: 11 mallocs

============= 28: matrix_bool.mtx

................ MMWrite ok: 15 mallocs
.............................. MMRead ok: 29 mallocs

============= 29: matrix_int8.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 30: matrix_int16.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 31: matrix_int32.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 32: matrix_int64.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 33: matrix_uint8.mtx

..................... MMWrite ok: 20 mallocs
.............................. MMRead ok: 29 mallocs

============= 34: matrix_uint16.mtx

..................... MMWrite ok: 20 mallocs
.............................. MMRead ok: 29 mallocs

============= 35: matrix_uint32.mtx

..................... MMWrite ok: 20 mallocs
.............................. MMRead ok: 29 mallocs

============= 36: matrix_uint64.mtx

..................... MMWrite ok: 20 mallocs
.............................. MMRead ok: 29 mallocs

============= 37: matrix_fp32.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 38: matrix_fp32_structure.mtx

................ MMWrite ok: 15 mallocs
............. MMRead ok: 12 mallocs

============= 39: matrix_fp64.mtx

.......................... MMWrite ok: 25 mallocs
.............................. MMRead ok: 29 mallocs

============= 40: west0067_jumbled.mtx

.................................. MMWrite ok: 33 mallocs
................................ MMRead ok: 31 mallocs

============= 41: skew_fp32.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 42: skew_fp64.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 43: skew_int8.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 44: skew_int16.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 45: skew_int32.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 46: skew_int64.mtx

............................... MMWrite ok: 30 mallocs
.............................. MMRead ok: 29 mallocs

============= 47: structure.mtx

........................... MMWrite ok: 26 mallocs
............. MMRead ok: 12 mallocs

============= 48: full.mtx

........................ MMWrite ok: 23 mallocs
.............. MMRead ok: 13 mallocs

============= 49: full_symmetric.mtx

.............................. MMWrite ok: 29 mallocs
.............. MMRead ok: 13 mallocs

============= 50: empty.mtx

...... MMWrite ok: 5 mallocs
.... MMRead ok: 3 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   2.30 sec
----------------------------------------------------------
Test Passed.
"ctest_MMRead" end time: Dec 07 10:31 EST
"ctest_MMRead" time elapsed: 00:00:02
----------------------------------------------------------

11/40 Testing: ctest_Malloc
11/40 Test: ctest_Malloc
Command: "/home/afanasyev/LAGraph/build/src/test/test_Malloc"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Malloc" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_malloc...                             [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Malloc" end time: Dec 07 10:31 EST
"ctest_Malloc" time elapsed: 00:00:00
----------------------------------------------------------

12/40 Testing: ctest_Multiply_size_t
12/40 Test: ctest_Multiply_size_t
Command: "/home/afanasyev/LAGraph/build/src/test/test_Multiply_size_t"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Multiply_size_t" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_multiply...                           [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Multiply_size_t" end time: Dec 07 10:31 EST
"ctest_Multiply_size_t" time elapsed: 00:00:00
----------------------------------------------------------

13/40 Testing: ctest_New
13/40 Test: ctest_New
Command: "/home/afanasyev/LAGraph/build/src/test/test_New"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_New" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test New...                                     [ OK ]
Test New_failures...                            
msg: &G cannot be NULL on input
msg: graph adjacency matrix is NULL
[ OK ]
Test New_brutal...                              
brutal test at line  131: LG_nmalloc: 44
method: LAGraph_New (&G, &A, atype, kind, msg)
brutal test at line  131: LG_nmalloc: 45, succeeded with 1 mallocs
brutal test at line  135: LG_nmalloc: 45
method: LAGraph_CheckGraph (G, msg)
brutal test at line  135: LG_nmalloc: 45, succeeded with 0 mallocs
brutal test at line  138: LG_nmalloc: 45
method: LAGraph_Delete (&G, msg)
brutal test at line  138: LG_nmalloc: 41, succeeded with 0 mallocs
brutal test at line  131: LG_nmalloc: 44
method: LAGraph_New (&G, &A, atype, kind, msg)
brutal test at line  131: LG_nmalloc: 45, succeeded with 1 mallocs
brutal test at line  135: LG_nmalloc: 45
method: LAGraph_CheckGraph (G, msg)
brutal test at line  135: LG_nmalloc: 45, succeeded with 0 mallocs
brutal test at line  138: LG_nmalloc: 45
method: LAGraph_Delete (&G, msg)
brutal test at line  138: LG_nmalloc: 41, succeeded with 0 mallocs
brutal test at line  131: LG_nmalloc: 44
method: LAGraph_New (&G, &A, atype, kind, msg)
brutal test at line  131: LG_nmalloc: 45, succeeded with 1 mallocs
brutal test at line  135: LG_nmalloc: 45
method: LAGraph_CheckGraph (G, msg)
brutal test at line  135: LG_nmalloc: 45, succeeded with 0 mallocs
brutal test at line  138: LG_nmalloc: 45
method: LAGraph_Delete (&G, msg)
brutal test at line  138: LG_nmalloc: 41, succeeded with 0 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_New" end time: Dec 07 10:31 EST
"ctest_New" time elapsed: 00:00:00
----------------------------------------------------------

14/40 Testing: ctest_NumThreads
14/40 Test: ctest_NumThreads
Command: "/home/afanasyev/LAGraph/build/src/test/test_NumThreads"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_NumThreads" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test NumThreads...                              
msg: nthreads is NULL
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_NumThreads" end time: Dec 07 10:31 EST
"ctest_NumThreads" time elapsed: 00:00:00
----------------------------------------------------------

15/40 Testing: ctest_PageRankGAP
15/40 Test: ctest_PageRankGAP
Command: "/home/afanasyev/LAGraph/build/src/test/test_PageRankGAP"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_PageRankGAP" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_ranker...                             matrix has 156 156
 edgeshi Elijah
SPMV time 0.001156 (ms)
SPMV perf 0.026982 (GFLop/s)
SPMV BW 0.215855 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000332 (ms)
SPMV perf 0.093998 (GFLop/s)
SPMV BW 0.751981 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000281 (ms)
SPMV perf 0.111077 (GFLop/s)
SPMV BW 0.888614 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000266 (ms)
SPMV perf 0.117300 (GFLop/s)
SPMV BW 0.938396 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000262 (ms)
SPMV perf 0.119135 (GFLop/s)
SPMV BW 0.953080 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000259 (ms)
SPMV perf 0.120506 (GFLop/s)
SPMV BW 0.964050 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000259 (ms)
SPMV perf 0.120506 (GFLop/s)
SPMV BW 0.964050 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000255 (ms)
SPMV perf 0.122265 (GFLop/s)
SPMV BW 0.978124 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122803 (GFLop/s)
SPMV BW 0.982427 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122803 (GFLop/s)
SPMV BW 0.982427 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122984 (GFLop/s)
SPMV BW 0.983869 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000253 (ms)
SPMV perf 0.123346 (GFLop/s)
SPMV BW 0.986767 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000253 (ms)
SPMV perf 0.123165 (GFLop/s)
SPMV BW 0.985316 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000253 (ms)
SPMV perf 0.123165 (GFLop/s)
SPMV BW 0.985316 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000255 (ms)
SPMV perf 0.122265 (GFLop/s)
SPMV BW 0.978124 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122803 (GFLop/s)
SPMV BW 0.982427 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000253 (ms)
SPMV perf 0.123346 (GFLop/s)
SPMV BW 0.986767 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122803 (GFLop/s)
SPMV BW 0.982427 (GB/s)
matrix has 156 156
 edgeshi Elijah
SPMV time 0.000254 (ms)
SPMV perf 0.122803 (GFLop/s)
SPMV BW 0.982427 (GB/s)

karate:   err: 4.013628e-05
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000402 (ms)
SPMV perf 0.146284 (GFLop/s)
SPMV BW 1.170269 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000300 (ms)
SPMV perf 0.196075 (GFLop/s)
SPMV BW 1.568597 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000269 (ms)
SPMV perf 0.218615 (GFLop/s)
SPMV BW 1.748920 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000275 (ms)
SPMV perf 0.213586 (GFLop/s)
SPMV BW 1.708688 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000267 (ms)
SPMV perf 0.220140 (GFLop/s)
SPMV BW 1.761116 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000264 (ms)
SPMV perf 0.222938 (GFLop/s)
SPMV BW 1.783503 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000260 (ms)
SPMV perf 0.226132 (GFLop/s)
SPMV BW 1.809055 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000266 (ms)
SPMV perf 0.221064 (GFLop/s)
SPMV BW 1.768516 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000262 (ms)
SPMV perf 0.224524 (GFLop/s)
SPMV BW 1.796188 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000260 (ms)
SPMV perf 0.226132 (GFLop/s)
SPMV BW 1.809055 (GB/s)
matrix has 294 294
 edgeshi Elijah
SPMV time 0.000262 (ms)
SPMV perf 0.224205 (GFLop/s)
SPMV BW 1.793637 (GB/s)
west0067: err: 2.117641e-05
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_PageRankGAP" end time: Dec 07 10:31 EST
"ctest_PageRankGAP" time elapsed: 00:00:00
----------------------------------------------------------

16/40 Testing: ctest_Property_ASymmetricStructure
16/40 Test: ctest_Property_ASymmetricStructure
Command: "/home/afanasyev/LAGraph/build/src/test/test_Property_ASymmetricStructure"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Property_ASymmetricStructure" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Property_ASymmetric_Structure...           
status: -2, msg: graph is NULL
[ OK ]
Test Property_ASymmetric_Structure_brutal...    [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.15 sec
----------------------------------------------------------
Test Passed.
"ctest_Property_ASymmetricStructure" end time: Dec 07 10:31 EST
"ctest_Property_ASymmetricStructure" time elapsed: 00:00:00
----------------------------------------------------------

17/40 Testing: ctest_Property_AT
17/40 Test: ctest_Property_AT
Command: "/home/afanasyev/LAGraph/build/src/test/test_Property_AT"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Property_AT" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Property_AT...                             [ OK ]
Test Property_AT_brutal...                      [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Property_AT" end time: Dec 07 10:31 EST
"ctest_Property_AT" time elapsed: 00:00:00
----------------------------------------------------------

18/40 Testing: ctest_Property_Degree
18/40 Test: ctest_Property_Degree
Command: "/home/afanasyev/LAGraph/build/src/test/test_Property_Degree"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Property_Degree" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Property_Degree...                         
status: -2, msg: graph is NULL
status: -2, msg: graph is NULL
[ OK ]
Test Property_Degree_brutal...                  [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_Property_Degree" end time: Dec 07 10:31 EST
"ctest_Property_Degree" time elapsed: 00:00:00
----------------------------------------------------------

19/40 Testing: ctest_Property_NDiag
19/40 Test: ctest_Property_NDiag
Command: "/home/afanasyev/LAGraph/build/src/test/test_Property_NDiag"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Property_NDiag" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test NDiag...                                   [ OK ]
Test NDiag_brutal...                            [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.14 sec
----------------------------------------------------------
Test Passed.
"ctest_Property_NDiag" end time: Dec 07 10:31 EST
"ctest_Property_NDiag" time elapsed: 00:00:00
----------------------------------------------------------

20/40 Testing: ctest_SampleDegree
20/40 Test: ctest_SampleDegree
Command: "/home/afanasyev/LAGraph/build/src/test/test_SampleDegree"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_SampleDegree" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test SampleDegree...                            
==================== Test case: A.mtx

==================== Test case: LFAT5.mtx

==================== Test case: cover.mtx

==================== Test case: full.mtx

==================== Test case: full_symmetric.mtx

==================== Test case: karate.mtx

==================== Test case: karate.mtx

==================== Test case: karate.mtx

==================== Test case: ldbc-cdlp-directed-example.mtx
[ OK ]
Test SampleDegree_brutal...                     
==================== Test case: A.mtx

==================== Test case: LFAT5.mtx

==================== Test case: cover.mtx

==================== Test case: full.mtx

==================== Test case: full_symmetric.mtx

==================== Test case: karate.mtx

==================== Test case: karate.mtx

==================== Test case: karate.mtx

==================== Test case: ldbc-cdlp-directed-example.mtx
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_SampleDegree" end time: Dec 07 10:31 EST
"ctest_SampleDegree" time elapsed: 00:00:00
----------------------------------------------------------

21/40 Testing: ctest_SingleSourceShortestPath
21/40 Test: ctest_SingleSourceShortestPath
Command: "/home/afanasyev/LAGraph/build/src/test/test_SingleSourceShortestPath"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_SingleSourceShortestPath" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test SSSP...                                    
Matrix: A.mtx
src 0 delta 30 n 7
src 0 delta 100 n 7
src 0 delta 50000 n 7
src 2 delta 30 n 7
src 2 delta 100 n 7
src 2 delta 50000 n 7
src 4 delta 30 n 7
src 4 delta 100 n 7
src 4 delta 50000 n 7
src 6 delta 30 n 7
src 6 delta 100 n 7
src 6 delta 50000 n 7
GrB_INT32 vector: n: 7 entries: 7
    (0)   0
    (1)   -1
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   1

Matrix: cover.mtx
src 0 delta 30 n 7
src 0 delta 100 n 7
src 0 delta 50000 n 7
src 2 delta 30 n 7
src 2 delta 100 n 7
src 2 delta 50000 n 7
src 4 delta 30 n 7
src 4 delta 100 n 7
src 4 delta 50000 n 7
src 6 delta 30 n 7
src 6 delta 100 n 7
src 6 delta 50000 n 7
GrB_INT32 vector: n: 7 entries: 7
    (0)   0
    (1)   -1
    (2)   8
    (3)   7
    (4)   4
    (5)   9
    (6)   7

Matrix: jagmesh7.mtx
src 0 delta 30 n 1138
src 853 delta 30 n 1138
GrB_INT32 vector: n: 1138 entries: 1138
    (0)   0
    (1)   -1
    (2)   0
    (3)   1
    (4)   2
    (5)   3
    (6)   4
    (7)   4
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   4
    (14)   3
    (15)   2
    (16)   1
    (17)   0
    (18)   0
    (19)   1
    (20)   2
    (21)   3
    (22)   1
    (23)   2
    (24)   3
    (25)   2
    (26)   3
    (27)   3
    (28)   0
    (29)   1
    ...

Matrix: ldbc-cdlp-directed-example.mtx
src 0 delta 30 n 8
src 0 delta 100 n 8
src 0 delta 50000 n 8
src 3 delta 30 n 8
src 3 delta 100 n 8
src 3 delta 50000 n 8
src 6 delta 30 n 8
src 6 delta 100 n 8
src 6 delta 50000 n 8
GrB_INT32 vector: n: 8 entries: 8
    (0)   0
    (1)   -1
    (2)   0
    (3)   3
    (4)   2
    (5)   2
    (6)   1
    (7)   2

Matrix: ldbc-cdlp-undirected-example.mtx
src 0 delta 30 n 8
src 0 delta 100 n 8
src 0 delta 50000 n 8
src 3 delta 30 n 8
src 3 delta 100 n 8
src 3 delta 50000 n 8
src 6 delta 30 n 8
src 6 delta 100 n 8
src 6 delta 50000 n 8
GrB_INT32 vector: n: 8 entries: 8
    (0)   0
    (1)   -1
    (2)   0
    (3)   3
    (4)   2
    (5)   3
    (6)   1
    (7)   2

Matrix: ldbc-directed-example.mtx
src 0 delta 30 n 10
src 0 delta 100 n 10
src 0 delta 50000 n 10
src 3 delta 30 n 10
src 3 delta 100 n 10
src 3 delta 50000 n 10
src 6 delta 30 n 10
src 6 delta 100 n 10
src 6 delta 50000 n 10
src 9 delta 30 n 10
src 9 delta 100 n 10
src 9 delta 50000 n 10
GrB_INT32 vector: n: 10 entries: 10
    (0)   0
    (1)   -1
    (2)   1
    (3)   0
    (4)   0
    (5)   2147483647
    (6)   2147483647
    (7)   1
    (8)   2147483647
    (9)   0

Matrix: ldbc-undirected-example.mtx
src 0 delta 30 n 9
src 0 delta 100 n 9
src 0 delta 50000 n 9
src 3 delta 30 n 9
src 3 delta 100 n 9
src 3 delta 50000 n 9
src 6 delta 30 n 9
src 6 delta 100 n 9
src 6 delta 50000 n 9
GrB_INT32 vector: n: 9 entries: 9
    (0)   0
    (1)   -1
    (2)   0
    (3)   0
    (4)   1
    (5)   2
    (6)   0
    (7)   2
    (8)   2

Matrix: ldbc-wcc-example.mtx
src 0 delta 30 n 10
src 0 delta 100 n 10
src 0 delta 50000 n 10
src 3 delta 30 n 10
src 3 delta 100 n 10
src 3 delta 50000 n 10
src 6 delta 30 n 10
src 6 delta 100 n 10
src 6 delta 50000 n 10
src 9 delta 30 n 10
src 9 delta 100 n 10
src 9 delta 50000 n 10
GrB_INT32 vector: n: 10 entries: 10
    (0)   0
    (1)   -1
    (2)   1
    (3)   0
    (4)   0
    (5)   1
    (6)   1
    (7)   1
    (8)   1
    (9)   0

Matrix: LFAT5.mtx
src 0 delta 30 n 14
src 0 delta 100 n 14
src 0 delta 50000 n 14
src 4 delta 30 n 14
src 4 delta 100 n 14
src 4 delta 50000 n 14
src 8 delta 30 n 14
src 8 delta 100 n 14
src 8 delta 50000 n 14
src 12 delta 30 n 14
src 12 delta 100 n 14
src 12 delta 50000 n 14
GrB_INT32 vector: n: 14 entries: 14
    (0)   0
    (1)   -1
    (2)   2147483647
    (3)   96
    (4)   1
    (5)   63
    (6)   2147483647
    (7)   97
    (8)   2
    (9)   127
    (10)   2147483647
    (11)   98
    (12)   3
    (13)   4

Matrix: msf1.mtx
src 0 delta 30 n 6
src 0 delta 100 n 6
src 0 delta 50000 n 6
src 2 delta 30 n 6
src 2 delta 100 n 6
src 2 delta 50000 n 6
src 4 delta 30 n 6
src 4 delta 100 n 6
src 4 delta 50000 n 6
GrB_INT32 vector: n: 6 entries: 6
    (0)   0
    (1)   -1
    (2)   0
    (3)   1
    (4)   2147483647
    (5)   1

Matrix: msf2.mtx
src 0 delta 30 n 8
src 0 delta 100 n 8
src 0 delta 50000 n 8
src 3 delta 30 n 8
src 3 delta 100 n 8
src 3 delta 50000 n 8
src 6 delta 30 n 8
src 6 delta 100 n 8
src 6 delta 50000 n 8
GrB_INT32 vector: n: 8 entries: 8
    (0)   0
    (1)   -1
    (2)   4
    (3)   4
    (4)   0
    (5)   6
    (6)   2
    (7)   2

Matrix: msf3.mtx
src 0 delta 30 n 5
src 0 delta 100 n 5
src 0 delta 50000 n 5
src 2 delta 30 n 5
src 2 delta 100 n 5
src 2 delta 50000 n 5
src 4 delta 30 n 5
src 4 delta 100 n 5
src 4 delta 50000 n 5
GrB_INT32 vector: n: 5 entries: 5
    (0)   0
    (1)   -1
    (2)   1
    (3)   1
    (4)   1

Matrix: sample2.mtx
src 0 delta 30 n 8
src 0 delta 100 n 8
src 0 delta 50000 n 8
src 3 delta 30 n 8
src 3 delta 100 n 8
src 3 delta 50000 n 8
src 6 delta 30 n 8
src 6 delta 100 n 8
src 6 delta 50000 n 8
GrB_INT32 vector: n: 8 entries: 8
    (0)   0
    (1)   -1
    (2)   0
    (3)   1
    (4)   1
    (5)   0
    (6)   1
    (7)   1

Matrix: sample.mtx
src 0 delta 30 n 8
src 0 delta 100 n 8
src 0 delta 50000 n 8
src 3 delta 30 n 8
src 3 delta 100 n 8
src 3 delta 50000 n 8
src 6 delta 30 n 8
src 6 delta 100 n 8
src 6 delta 50000 n 8
GrB_INT32 vector: n: 8 entries: 8
    (0)   0
    (1)   -1
    (2)   0
    (3)   1
    (4)   0
    (5)   1
    (6)   1
    (7)   2

Matrix: olm1000.mtx
src 0 delta 30 n 1000
src 750 delta 30 n 1000
GrB_INT32 vector: n: 1000 entries: 1000
    (0)   0
    (1)   -1
    (2)   105
    (3)   104
    (4)   210
    (5)   209
    (6)   315
    (7)   314
    (8)   420
    (9)   419
    (10)   525
    (11)   524
    (12)   630
    (13)   629
    (14)   735
    (15)   734
    (16)   840
    (17)   839
    (18)   945
    (19)   944
    (20)   1050
    (21)   1049
    (22)   1155
    (23)   1154
    (24)   1260
    (25)   1259
    (26)   1365
    (27)   1364
    (28)   1470
    (29)   1469
    ...

Matrix: bcsstk13.mtx
src 0 delta 30 n 2003
LG_check_sssp init  time: 5.03995e-05 sec
LG_check_sssp time: 0.000726633 sec
LG_check_sssp check time: 4.57838e-06 sec
src 1502 delta 30 n 2003
LG_check_sssp init  time: 4.4018e-05 sec
LG_check_sssp time: 0.000707328 sec
LG_check_sssp check time: 4.27291e-06 sec
GrB_INT32 vector: n: 2003 entries: 2003
    (0)   0
    (1)   -1
    (2)   11
    (3)   17
    (4)   6
    (5)   2
    (6)   6
    (7)   10
    (8)   5
    (9)   3
    (10)   3
    (11)   2
    (12)   5
    (13)   5
    (14)   6
    (15)   5
    (16)   5
    (17)   5
    (18)   19
    (19)   11
    (20)   6
    (21)   6
    (22)   6
    (23)   6
    (24)   18
    (25)   7
    (26)   11
    (27)   9
    (28)   22
    (29)   8
    ...

Matrix: cryg2500.mtx
src 0 delta 30 n 2500
LG_check_sssp init  time: 7.41631e-05 sec
LG_check_sssp time: 0.000314683 sec
LG_check_sssp check time: 4.42937e-06 sec
src 1875 delta 30 n 2500
LG_check_sssp init  time: 8.56109e-05 sec
LG_check_sssp time: 0.000293136 sec
LG_check_sssp check time: 4.36977e-06 sec
GrB_INT32 vector: n: 2500 entries: 2500
    (0)   0
    (1)   -1
    (2)   35
    (3)   159
    (4)   263
    (5)   264
    (6)   265
    (7)   265
    (8)   262
    (9)   258
    (10)   254
    (11)   249
    (12)   243
    (13)   236
    (14)   228
    (15)   219
    (16)   209
    (17)   197
    (18)   185
    (19)   172
    (20)   158
    (21)   143
    (22)   126
    (23)   110
    (24)   92
    (25)   182
    (26)   253
    (27)   229
    (28)   193
    (29)   166
    ...

Matrix: tree-example.mtx
src 0 delta 30 n 6
src 0 delta 100 n 6
src 0 delta 50000 n 6
src 2 delta 30 n 6
src 2 delta 100 n 6
src 2 delta 50000 n 6
src 4 delta 30 n 6
src 4 delta 100 n 6
src 4 delta 50000 n 6
GrB_INT32 vector: n: 6 entries: 6
    (0)   0
    (1)   -1
    (2)   1
    (3)   0
    (4)   1
    (5)   1

Matrix: west0067.mtx
src 0 delta 30 n 67
src 0 delta 100 n 67
src 0 delta 50000 n 67
src 17 delta 30 n 67
src 17 delta 100 n 67
src 17 delta 50000 n 67
src 34 delta 30 n 67
src 34 delta 100 n 67
src 34 delta 50000 n 67
src 51 delta 30 n 67
src 51 delta 100 n 67
src 51 delta 50000 n 67
GrB_INT32 vector: n: 67 entries: 67
    (0)   0
    (1)   -1
    (2)   2
    (3)   2
    (4)   2
    (5)   1
    (6)   1
    (7)   1
    (8)   0
    (9)   2
    (10)   2
    (11)   1
    (12)   1
    (13)   0
    (14)   2
    (15)   1
    (16)   1
    (17)   0
    (18)   3
    (19)   1
    (20)   2
    (21)   2
    (22)   1
    (23)   4
    (24)   2
    (25)   2
    (26)   2
    (27)   1
    (28)   3
    (29)   2
    ...

Matrix: karate.mtx
src 0 delta 30 n 34
src 0 delta 100 n 34
src 0 delta 50000 n 34
src 9 delta 30 n 34
src 9 delta 100 n 34
src 9 delta 50000 n 34
src 18 delta 30 n 34
src 18 delta 100 n 34
src 18 delta 50000 n 34
src 27 delta 30 n 34
src 27 delta 100 n 34
src 27 delta 50000 n 34
GrB_INT32 vector: n: 34 entries: 34
    (0)   0
    (1)   -1
    (2)   0
    (3)   0
    (4)   1
    (5)   1
    (6)   1
    (7)   0
    (8)   1
    (9)   1
    (10)   1
    (11)   1
    (12)   1
    (13)   0
    (14)   2
    (15)   2
    (16)   2
    (17)   0
    (18)   2
    (19)   0
    (20)   2
    (21)   0
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   1
    (28)   1
    (29)   2
    ...

Matrix: matrix_bool.mtx
src 0 delta 30 n 7
src 0 delta 100 n 7
src 0 delta 50000 n 7
src 2 delta 30 n 7
src 2 delta 100 n 7
src 2 delta 50000 n 7
src 4 delta 30 n 7
src 4 delta 100 n 7
src 4 delta 50000 n 7
src 6 delta 30 n 7
src 6 delta 100 n 7
src 6 delta 50000 n 7
GrB_INT32 vector: n: 7 entries: 7
    (0)   0
    (1)   -1
    (2)   1
    (3)   1
    (4)   0
    (5)   1
    (6)   0

Matrix: test_BF.mtx
src 0 delta 30 n 7
src 0 delta 100 n 7
src 0 delta 50000 n 7
src 2 delta 30 n 7
src 2 delta 100 n 7
src 2 delta 50000 n 7
src 4 delta 30 n 7
src 4 delta 100 n 7
src 4 delta 50000 n 7
src 6 delta 30 n 7
src 6 delta 100 n 7
src 6 delta 50000 n 7
GrB_INT32 vector: n: 7 entries: 7
    (0)   0
    (1)   -1
    (2)   8
    (3)   7
    (4)   4
    (5)   9
    (6)   7

Matrix: test_FW_1000.mtx
src 0 delta 30 n 1000
src 750 delta 30 n 1000
GrB_INT32 vector: n: 1000 entries: 1000
    (0)   0
    (1)   -1
    (2)   25
    (3)   226
    (4)   50
    (5)   251
    (6)   75
    (7)   276
    (8)   100
    (9)   301
    (10)   125
    (11)   326
    (12)   150
    (13)   351
    (14)   175
    (15)   376
    (16)   200
    (17)   401
    (18)   225
    (19)   426
    (20)   250
    (21)   451
    (22)   275
    (23)   476
    (24)   300
    (25)   501
    (26)   325
    (27)   526
    (28)   350
    (29)   551
    ...

Matrix: test_FW_2003.mtx
src 0 delta 30 n 2003
LG_check_sssp init  time: 4.65289e-05 sec
LG_check_sssp time: 0.000353456 sec
LG_check_sssp check time: 4.16115e-06 sec
src 1502 delta 30 n 2003
LG_check_sssp init  time: 0.000101 sec
LG_check_sssp time: 0.000349429 sec
LG_check_sssp check time: 4.72739e-06 sec
GrB_INT32 vector: n: 2003 entries: 2003
    (0)   0
    (1)   -1
    (2)   3
    (3)   0
    (4)   5
    (5)   5
    (6)   2
    (7)   1
    (8)   6
    (9)   0
    (10)   5
    (11)   3
    (12)   2
    (13)   1
    (14)   6
    (15)   2
    (16)   5
    (17)   6
    (18)   4
    (19)   3
    (20)   3
    (21)   2
    (22)   7
    (23)   6
    (24)   4
    (25)   5
    (26)   4
    (27)   5
    (28)   9
    (29)   22
    ...

Matrix: test_FW_2500.mtx
src 0 delta 30 n 2500
LG_check_sssp init  time: 0.00010372 sec
LG_check_sssp time: 0.000147372 sec
LG_check_sssp check time: 5.58048e-06 sec
src 1875 delta 30 n 2500
LG_check_sssp init  time: 0.000113249 sec
LG_check_sssp time: 1.91629e-05 sec
LG_check_sssp check time: 5.49108e-06 sec
GrB_INT32 vector: n: 2500 entries: 2500
    (0)   0
    (1)   -1
    (2)   35
    (3)   159
    (4)   379
    (5)   448
    (6)   631
    (7)   680
    (8)   859
    (9)   919
    (10)   1125
    (11)   1228
    (12)   1235
    (13)   1409
    (14)   1501
    (15)   1517
    (16)   1720
    (17)   1861
    (18)   1945
    (19)   1968
    (20)   2184
    (21)   2361
    (22)   2504
    (23)   2619
    (24)   2708
    (25)   2798
    (26)   2869
    (27)   2925
    (28)   2968
    (29)   3000
    ...

Matrix: skew_fp32.mtx
src 0 delta 30 n 6
src 0 delta 100 n 6
src 0 delta 50000 n 6
src 2 delta 30 n 6
src 2 delta 100 n 6
src 2 delta 50000 n 6
src 4 delta 30 n 6
src 4 delta 100 n 6
src 4 delta 50000 n 6
GrB_INT32 vector: n: 6 entries: 6
    (0)   0
    (1)   -1
    (2)   0
    (3)   0
    (4)   0
    (5)   1
[ OK ]
Test SSSP_brutal...                             
Matrix: A.mtx
src 0 delta 30 n 7

Matrix: cover.mtx
src 0 delta 30 n 7

Matrix: jagmesh7.mtx
skipped -- only using small matrices for brutal test

Matrix: ldbc-cdlp-directed-example.mtx
src 0 delta 30 n 8

Matrix: ldbc-cdlp-undirected-example.mtx
src 0 delta 30 n 8

Matrix: ldbc-directed-example.mtx
src 0 delta 30 n 10

Matrix: ldbc-undirected-example.mtx
src 0 delta 30 n 9

Matrix: ldbc-wcc-example.mtx
src 0 delta 30 n 10
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   1.76 sec
----------------------------------------------------------
Test Passed.
"ctest_SingleSourceShortestPath" end time: Dec 07 10:31 EST
"ctest_SingleSourceShortestPath" time elapsed: 00:00:01
----------------------------------------------------------

22/40 Testing: ctest_Sort
22/40 Test: ctest_Sort
Command: "/home/afanasyev/LAGraph/build/src/test/test_Sort"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Sort" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_sort1...                              [ OK ]
Test test_sort2...                              [ OK ]
Test test_sort1_brutal...                       [ OK ]
Test test_sort2_brutal...                       [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.06 sec
----------------------------------------------------------
Test Passed.
"ctest_Sort" end time: Dec 07 10:31 EST
"ctest_Sort" time elapsed: 00:00:00
----------------------------------------------------------

23/40 Testing: ctest_SortByDegree
23/40 Test: ctest_SortByDegree
Command: "/home/afanasyev/LAGraph/build/src/test/test_SortByDegree"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_SortByDegree" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test SortByDegree...                            
############################################# A.mtx

#### case: directed graph

Graph: kind: directed, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 1)   1
    (4, 3)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 6)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 1)   1
    (4, 3)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 6)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   5
    (2)   5
    (3)   5
    (4)   3
    (5)   4
    (6)   5
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   5
    (2)   5
    (3)   5
    (4)   3
    (5)   4
    (6)   5

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3

#### case: undirected graph

Graph: kind: undirected, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 1)   1
    (4, 3)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 6)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   5
    (2)   5
    (3)   5
    (4)   3
    (5)   4
    (6)   5

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 3)   1
    (0, 4)   1
    (0, 6)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   3
    (2)   4
    (3)   5
    (4)   5
    (5)   5
    (6)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 7 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 30
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 3)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   5
    (1)   5
    (2)   5
    (3)   5
    (4)   4
    (5)   3
    (6)   3

############################################# LFAT5.mtx

#### case: directed graph

Graph: kind: directed, nodes: 14 entries: 46 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 14-by-14 entries: 46
    (0, 0)   1.57088
    (0, 3)   -94.2528
    (0, 4)   0.78544
    (1, 1)   1.25664e+07
    (1, 5)   -6.2832e+06
    (2, 2)   0.608806
    (2, 6)   -0.304403
    (3, 0)   -94.2528
    (3, 3)   15080.4
    (3, 7)   -7540.22
    (3, 8)   94.2528
    (4, 0)   0.78544
    (4, 4)   3.14176
    (4, 7)   -94.2528
    (4, 8)   0.78544
    (5, 1)   -6.2832e+06
    (5, 5)   1.25664e+07
    (5, 9)   -6.2832e+06
    (6, 2)   -0.304403
    (6, 6)   0.608806
    (6, 10)   -0.304403
    (7, 3)   -7540.22
    (7, 4)   -94.2528
    (7, 7)   15080.4
    (7, 11)   -7540.22
    (7, 12)   94.2528
    (8, 3)   94.2528
    (8, 4)   0.78544
    (8, 8)   3.14176
    (8, 11)   -94.2528
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 14-by-14 entries: 46
    (0, 0)   1.57088
    (0, 3)   -94.2528
    (0, 4)   0.78544
    (1, 1)   1.25664e+07
    (1, 5)   -6.2832e+06
    (2, 2)   0.608806
    (2, 6)   -0.304403
    (3, 0)   -94.2528
    (3, 3)   15080.4
    (3, 7)   -7540.22
    (3, 8)   94.2528
    (4, 0)   0.78544
    (4, 4)   3.14176
    (4, 7)   -94.2528
    (4, 8)   0.78544
    (5, 1)   -6.2832e+06
    (5, 5)   1.25664e+07
    (5, 9)   -6.2832e+06
    (6, 2)   -0.304403
    (6, 6)   0.608806
    (6, 10)   -0.304403
    (7, 3)   -7540.22
    (7, 4)   -94.2528
    (7, 7)   15080.4
    (7, 11)   -7540.22
    (7, 12)   94.2528
    (8, 3)   94.2528
    (8, 4)   0.78544
    (8, 8)   3.14176
    (8, 11)   -94.2528
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   3
    (1)   2
    (2)   2
    (3)   4
    (4)   4
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   2
    (10)   2
    (11)   4
    (12)   4
    (13)   3
  column degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   3
    (1)   2
    (2)   2
    (3)   4
    (4)   4
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   2
    (10)   2
    (11)   4
    (12)   4
    (13)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5
  column degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2
  column degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5
  column degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2
  column degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2

#### case: undirected graph

Graph: kind: undirected, nodes: 14 entries: 46 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 14-by-14 entries: 46
    (0, 0)   1.57088
    (0, 3)   -94.2528
    (0, 4)   0.78544
    (1, 1)   1.25664e+07
    (1, 5)   -6.2832e+06
    (2, 2)   0.608806
    (2, 6)   -0.304403
    (3, 0)   -94.2528
    (3, 3)   15080.4
    (3, 7)   -7540.22
    (3, 8)   94.2528
    (4, 0)   0.78544
    (4, 4)   3.14176
    (4, 7)   -94.2528
    (4, 8)   0.78544
    (5, 1)   -6.2832e+06
    (5, 5)   1.25664e+07
    (5, 9)   -6.2832e+06
    (6, 2)   -0.304403
    (6, 6)   0.608806
    (6, 10)   -0.304403
    (7, 3)   -7540.22
    (7, 4)   -94.2528
    (7, 7)   15080.4
    (7, 11)   -7540.22
    (7, 12)   94.2528
    (8, 3)   94.2528
    (8, 4)   0.78544
    (8, 8)   3.14176
    (8, 11)   -94.2528
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   3
    (1)   2
    (2)   2
    (3)   4
    (4)   4
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   2
    (10)   2
    (11)   4
    (12)   4
    (13)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 5)   1
    (1, 1)   1
    (1, 6)   1
    (2, 2)   1
    (2, 5)   1
    (3, 3)   1
    (3, 6)   1
    (4, 4)   1
    (4, 8)   1
    (4, 9)   1
    (5, 0)   1
    (5, 2)   1
    (5, 5)   1
    (6, 1)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    (7, 10)   1
    (7, 11)   1
    (8, 4)   1
    (8, 8)   1
    (8, 12)   1
    (8, 13)   1
    (9, 4)   1
    (9, 9)   1
    (9, 12)   1
    (9, 13)   1
    (10, 7)   1
    (10, 10)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   2
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   4
    (9)   4
    (10)   4
    (11)   4
    (12)   5
    (13)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 14 entries: 46 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 14-by-14 entries: 46
    (0, 0)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 6)   1
    (3, 0)   1
    (3, 1)   1
    (3, 3)   1
    (3, 6)   1
    (4, 0)   1
    (4, 1)   1
    (4, 4)   1
    (4, 9)   1
    (5, 0)   1
    (5, 1)   1
    (5, 5)   1
    (5, 9)   1
    (6, 2)   1
    (6, 3)   1
    (6, 6)   1
    (7, 7)   1
    ...
  row degree: GrB_INT64 vector: n: 14 entries: 14
    (0)   5
    (1)   5
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   2
    (11)   2
    (12)   2
    (13)   2

############################################# cover.mtx

#### case: directed graph

Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   2
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   4
    (3, 2)   1
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   4
    (1, 0)   2
    (2, 3)   1
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   1
    (3)   2
    (4)   1
    (5)   1
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 2)   1
    (2, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 1)   1
    (4, 6)   1
    (5, 0)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (0, 5)   1
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 5)   1
    (4, 3)   1
    (5, 3)   1
    (5, 6)   1
    (6, 4)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   2
    (6)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 5)   1
    (3, 1)   1
    (3, 4)   1
    (4, 6)   1
    (5, 6)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 3)   1
    (2, 1)   1
    (3, 0)   1
    (3, 1)   1
    (4, 0)   1
    (4, 3)   1
    (4, 6)   1
    (5, 0)   1
    (5, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   3
    (5)   2
    (6)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 0)   1
    (3, 6)   1
    (4, 5)   1
    (5, 6)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (2, 1)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (4, 2)   1
    (5, 4)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   3
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (1, 4)   1
    (2, 3)   1
    (3, 0)   1
    (4, 1)   1
    (4, 5)   1
    (5, 2)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (5, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
matrix is unsymmetric; skip undirected case

############################################# full.mtx

#### case: directed graph

Graph: kind: directed, nodes: 3 entries: 9 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 3-by-3 entries: 9
    (0, 0)   0.646
    (0, 1)   0.276
    (0, 2)   0.162
    (1, 0)   0.709
    (1, 1)   0.679
    (1, 2)   0.118
    (2, 0)   0.754
    (2, 1)   0.655
    (2, 2)   0.498
  adjacency matrix transposed: GrB_FP64 matrix: 3-by-3 entries: 9
    (0, 0)   0.646
    (0, 1)   0.709
    (0, 2)   0.754
    (1, 0)   0.276
    (1, 1)   0.679
    (1, 2)   0.655
    (2, 0)   0.162
    (2, 1)   0.118
    (2, 2)   0.498
  row degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
  column degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 3 entries: 9 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  row degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
  column degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 3 entries: 9 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  row degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
  column degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 3 entries: 9 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  row degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
  column degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 3 entries: 9 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 3-by-3 entries: 9
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
  row degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
  column degree: GrB_INT64 vector: n: 3 entries: 3
    (0)   3
    (1)   3
    (2)   3
matrix is unsymmetric; skip undirected case

############################################# full_symmetric.mtx

#### case: directed graph

Graph: kind: directed, nodes: 4 entries: 16 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 4-by-4 entries: 16
    (0, 0)   10.7622
    (0, 1)   18.1895
    (0, 2)   28.2394
    (0, 3)   22.2696
    (1, 0)   18.1895
    (1, 1)   7.08495
    (1, 2)   18.7506
    (1, 3)   19.2033
    (2, 0)   28.2394
    (2, 1)   18.7506
    (2, 2)   7.2891
    (2, 3)   19.8997
    (3, 0)   22.2696
    (3, 1)   19.2033
    (3, 2)   19.8997
    (3, 3)   3.96359
  adjacency matrix transposed: GrB_FP64 matrix: 4-by-4 entries: 16
    (0, 0)   10.7622
    (0, 1)   18.1895
    (0, 2)   28.2394
    (0, 3)   22.2696
    (1, 0)   18.1895
    (1, 1)   7.08495
    (1, 2)   18.7506
    (1, 3)   19.2033
    (2, 0)   28.2394
    (2, 1)   18.7506
    (2, 2)   7.2891
    (2, 3)   19.8997
    (3, 0)   22.2696
    (3, 1)   19.2033
    (3, 2)   19.8997
    (3, 3)   3.96359
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4
  column degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4
  column degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4
  column degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4
  column degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4
  column degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

#### case: undirected graph

Graph: kind: undirected, nodes: 4 entries: 16 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 4-by-4 entries: 16
    (0, 0)   10.7622
    (0, 1)   18.1895
    (0, 2)   28.2394
    (0, 3)   22.2696
    (1, 0)   18.1895
    (1, 1)   7.08495
    (1, 2)   18.7506
    (1, 3)   19.2033
    (2, 0)   28.2394
    (2, 1)   18.7506
    (2, 2)   7.2891
    (2, 3)   19.8997
    (3, 0)   22.2696
    (3, 1)   19.2033
    (3, 2)   19.8997
    (3, 3)   3.96359
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 4 entries: 16 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 4-by-4 entries: 16
    (0, 0)   1
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 0)   1
    (1, 1)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (2, 2)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 3)   1
  row degree: GrB_INT64 vector: n: 4 entries: 4
    (0)   4
    (1)   4
    (2)   4
    (3)   4

############################################# karate.mtx

#### case: directed graph

Graph: kind: directed, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   16
    (1)   9
    (2)   10
    (3)   6
    (4)   3
    (5)   4
    (6)   4
    (7)   4
    (8)   5
    (9)   2
    (10)   3
    (11)   1
    (12)   2
    (13)   5
    (14)   2
    (15)   2
    (16)   2
    (17)   2
    (18)   2
    (19)   3
    (20)   2
    (21)   2
    (22)   2
    (23)   5
    (24)   3
    (25)   3
    (26)   2
    (27)   4
    (28)   3
    (29)   4
    ...
  column degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   16
    (1)   9
    (2)   10
    (3)   6
    (4)   3
    (5)   4
    (6)   4
    (7)   4
    (8)   5
    (9)   2
    (10)   3
    (11)   1
    (12)   2
    (13)   5
    (14)   2
    (15)   2
    (16)   2
    (17)   2
    (18)   2
    (19)   3
    (20)   2
    (21)   2
    (22)   2
    (23)   5
    (24)   3
    (25)   3
    (26)   2
    (27)   4
    (28)   3
    (29)   4
    ...

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...
  column degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...
  column degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...
  column degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...
  column degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...

#### case: undirected graph

Graph: kind: undirected, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   16
    (1)   9
    (2)   10
    (3)   6
    (4)   3
    (5)   4
    (6)   4
    (7)   4
    (8)   5
    (9)   2
    (10)   3
    (11)   1
    (12)   2
    (13)   5
    (14)   2
    (15)   2
    (16)   2
    (17)   2
    (18)   2
    (19)   3
    (20)   2
    (21)   2
    (22)   2
    (23)   5
    (24)   3
    (25)   3
    (26)   2
    (27)   4
    (28)   3
    (29)   4
    ...

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 32)   1
    (1, 30)   1
    (1, 33)   1
    (2, 27)   1
    (2, 32)   1
    (3, 31)   1
    (3, 33)   1
    (4, 31)   1
    (4, 33)   1
    (5, 18)   1
    (5, 19)   1
    (6, 29)   1
    (6, 32)   1
    (7, 31)   1
    (7, 33)   1
    (8, 31)   1
    (8, 33)   1
    (9, 29)   1
    (9, 32)   1
    (10, 31)   1
    (10, 33)   1
    (11, 22)   1
    (11, 33)   1
    (12, 13)   1
    (12, 19)   1
    (12, 32)   1
    (13, 12)   1
    (13, 18)   1
    (13, 32)   1
    (14, 29)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   2
    (9)   2
    (10)   2
    (11)   2
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   4
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   5
    (26)   5
    (27)   6
    (28)   6
    (29)   9
    ...

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 34 entries: 156 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (0, 13)   1
    (0, 14)   1
    (0, 15)   1
    (0, 18)   1
    (0, 21)   1
    (0, 22)   1
    (0, 24)   1
    (0, 25)   1
    (0, 28)   1
    (0, 29)   1
    (0, 31)   1
    (0, 32)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (1, 7)   1
    (1, 8)   1
    (1, 10)   1
    (1, 11)   1
    (1, 12)   1
    (1, 16)   1
    (1, 17)   1
    (1, 18)   1
    (1, 23)   1
    ...
  row degree: GrB_INT64 vector: n: 34 entries: 34
    (0)   17
    (1)   16
    (2)   12
    (3)   10
    (4)   9
    (5)   6
    (6)   6
    (7)   5
    (8)   5
    (9)   5
    (10)   4
    (11)   4
    (12)   4
    (13)   4
    (14)   4
    (15)   4
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   2
    (23)   2
    (24)   2
    (25)   2
    (26)   2
    (27)   2
    (28)   2
    (29)   2
    ...

############################################# ldbc-cdlp-directed-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 8 entries: 18 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 4)   1
    (5, 6)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (5, 7)   1
    (6, 0)   1
    (6, 4)   1
    (6, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   3
    (5)   2
    (6)   3
    (7)   1
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   2
    (3)   1
    (4)   3
    (5)   4
    (6)   3
    (7)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 18 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 4)   1
    (1, 2)   1
    (1, 5)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 2)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 7)   1
    (7, 0)   1
    (7, 4)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 7)   1
    (1, 2)   1
    (1, 5)   1
    (2, 1)   1
    (2, 5)   1
    (3, 6)   1
    (4, 0)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 7)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   3
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   1
    (1)   2
    (2)   2
    (3)   1
    (4)   4
    (5)   2
    (6)   3
    (7)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 18 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (1, 2)   1
    (1, 5)   1
    (1, 6)   1
    (2, 1)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 4)   1
    (4, 0)   1
    (4, 3)   1
    (5, 1)   1
    (5, 6)   1
    (6, 1)   1
    (6, 2)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 3)   1
    (0, 4)   1
    (1, 2)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (2, 6)   1
    (3, 0)   1
    (3, 4)   1
    (4, 0)   1
    (4, 3)   1
    (5, 1)   1
    (6, 1)   1
    (6, 2)   1
    (6, 5)   1
    (6, 7)   1
    (7, 2)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   3
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   2
    (7)   1
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   1
    (6)   4
    (7)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 18 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 5)   1
    (0, 7)   1
    (1, 7)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 2)   1
    (3, 4)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 6)   1
    (5, 7)   1
    (6, 1)   1
    (6, 5)   1
    (6, 7)   1
    (7, 5)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 5)   1
    (1, 6)   1
    (2, 3)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (4, 2)   1
    (4, 3)   1
    (5, 0)   1
    (5, 6)   1
    (5, 7)   1
    (6, 2)   1
    (6, 5)   1
    (6, 7)   1
    (7, 0)   1
    (7, 1)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   1
    (2)   3
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 18 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (2, 7)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 3)   1
    (4, 5)   1
    (5, 3)   1
    (5, 4)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 18
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (1, 0)   1
    (1, 2)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 4)   1
    (3, 5)   1
    (4, 3)   1
    (4, 5)   1
    (5, 3)   1
    (5, 4)   1
    (6, 1)   1
    (7, 2)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   1
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   1
    (7)   1
matrix is unsymmetric; skip undirected case

############################################# ldbc-cdlp-undirected-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 7)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 3)   1
    (5, 4)   1
    (5, 7)   1
    (6, 0)   1
    (6, 4)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 7)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 3)   1
    (5, 4)   1
    (5, 7)   1
    (6, 0)   1
    (6, 4)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   3
    (1)   2
    (2)   2
    (3)   3
    (4)   4
    (5)   3
    (6)   3
    (7)   4
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   3
    (1)   2
    (2)   2
    (3)   3
    (4)   4
    (5)   3
    (6)   3
    (7)   4

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2

#### case: undirected graph

Graph: kind: undirected, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 7)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 3)   1
    (5, 4)   1
    (5, 7)   1
    (6, 0)   1
    (6, 4)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   3
    (1)   2
    (2)   2
    (3)   3
    (4)   4
    (5)   3
    (6)   3
    (7)   4

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 2)   1
    (5, 6)   1
    (5, 7)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   4
    (7)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 8 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 24
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 0)   1
    (3, 1)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (6, 2)   1
    (6, 7)   1
    (7, 2)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2

############################################# ldbc-directed-example-bool.mtx

#### case: directed graph

Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 7)   1
    (2, 9)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (8, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 7)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (7, 2)   1
    (7, 4)   1
    (9, 1)   1
    (9, 2)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (4)   3
    (5)   2
    (6)   1
    (7)   1
    (8)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   2
    (2)   3
    (3)   5
    (4)   3
    (7)   2
    (9)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (2, 0)   1
    (3, 5)   1
    (4, 0)   1
    (5, 8)   1
    (5, 9)   1
    (6, 0)   1
    (6, 9)   1
    (7, 0)   1
    (7, 1)   1
    (7, 8)   1
    (8, 0)   1
    (8, 3)   1
    (8, 9)   1
    (9, 1)   1
    (9, 3)   1
    (9, 5)   1
    (9, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 7)   1
    (1, 9)   1
    (3, 8)   1
    (3, 9)   1
    (5, 3)   1
    (5, 9)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
    (9, 5)   1
    (9, 6)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (2)   1
    (3)   1
    (4)   1
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   4
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   2
    (3)   2
    (5)   2
    (8)   3
    (9)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 9)   1
    (1, 2)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 6)   1
    (2, 8)   1
    (3, 0)   1
    (3, 2)   1
    (4, 0)   1
    (4, 8)   1
    (5, 8)   1
    (6, 3)   1
    (7, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 6)   1
    (6, 0)   1
    (6, 2)   1
    (8, 1)   1
    (8, 2)   1
    (8, 4)   1
    (8, 5)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   4
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   1
    (6)   1
    (7)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   3
    (2)   3
    (3)   2
    (6)   2
    (8)   5
    (9)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 6)   1
    (0, 8)   1
    (0, 9)   1
    (1, 7)   1
    (1, 9)   1
    (2, 9)   1
    (3, 9)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
    (7, 8)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (4, 5)   1
    (4, 7)   1
    (5, 7)   1
    (5, 8)   1
    (6, 0)   1
    (6, 7)   1
    (7, 1)   1
    (7, 4)   1
    (7, 8)   1
    (8, 0)   1
    (8, 4)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
    (9, 2)   1
    (9, 3)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   3
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   1
    (7)   4
    (8)   3
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (4)   2
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 4)   1
    (3, 1)   1
    (3, 2)   1
    (4, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 5)   1
    (7, 0)   1
    (7, 1)   1
    (8, 0)   1
    (9, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (2, 1)   1
    (2, 3)   1
    (2, 6)   1
    (3, 1)   1
    (3, 4)   1
    (4, 1)   1
    (4, 2)   1
    (5, 1)   1
    (5, 6)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (1)   4
    (2)   3
    (3)   2
    (4)   1
    (6)   3
    (7)   2
    (8)   1
    (9)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   2
matrix is unsymmetric; skip undirected case

############################################# ldbc-directed-example-unweighted.mtx

#### case: directed graph

Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 7)   1
    (2, 9)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (8, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 7)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (7, 2)   1
    (7, 4)   1
    (9, 1)   1
    (9, 2)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (4)   3
    (5)   2
    (6)   1
    (7)   1
    (8)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   2
    (2)   3
    (3)   5
    (4)   3
    (7)   2
    (9)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (2, 0)   1
    (3, 5)   1
    (4, 0)   1
    (5, 8)   1
    (5, 9)   1
    (6, 0)   1
    (6, 9)   1
    (7, 0)   1
    (7, 1)   1
    (7, 8)   1
    (8, 0)   1
    (8, 3)   1
    (8, 9)   1
    (9, 1)   1
    (9, 3)   1
    (9, 5)   1
    (9, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 7)   1
    (1, 9)   1
    (3, 8)   1
    (3, 9)   1
    (5, 3)   1
    (5, 9)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
    (9, 5)   1
    (9, 6)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (2)   1
    (3)   1
    (4)   1
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   4
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   2
    (3)   2
    (5)   2
    (8)   3
    (9)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 9)   1
    (1, 2)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 6)   1
    (2, 8)   1
    (3, 0)   1
    (3, 2)   1
    (4, 0)   1
    (4, 8)   1
    (5, 8)   1
    (6, 3)   1
    (7, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 6)   1
    (6, 0)   1
    (6, 2)   1
    (8, 1)   1
    (8, 2)   1
    (8, 4)   1
    (8, 5)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   4
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   1
    (6)   1
    (7)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   3
    (2)   3
    (3)   2
    (6)   2
    (8)   5
    (9)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 6)   1
    (0, 8)   1
    (0, 9)   1
    (1, 7)   1
    (1, 9)   1
    (2, 9)   1
    (3, 9)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
    (7, 8)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (4, 5)   1
    (4, 7)   1
    (5, 7)   1
    (5, 8)   1
    (6, 0)   1
    (6, 7)   1
    (7, 1)   1
    (7, 4)   1
    (7, 8)   1
    (8, 0)   1
    (8, 4)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
    (9, 2)   1
    (9, 3)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   3
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   1
    (7)   4
    (8)   3
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (4)   2
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 4)   1
    (3, 1)   1
    (3, 2)   1
    (4, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 5)   1
    (7, 0)   1
    (7, 1)   1
    (8, 0)   1
    (9, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (2, 1)   1
    (2, 3)   1
    (2, 6)   1
    (3, 1)   1
    (3, 4)   1
    (4, 1)   1
    (4, 2)   1
    (5, 1)   1
    (5, 6)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (1)   4
    (2)   3
    (3)   2
    (4)   1
    (6)   3
    (7)   2
    (8)   1
    (9)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   2
matrix is unsymmetric; skip undirected case

############################################# ldbc-directed-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 10 entries: 17 type: double
  structural symmetry: unsymmetric
  adjacency matrix: GrB_FP64 matrix: 10-by-10 entries: 17
    (0, 2)   0.5
    (0, 4)   0.3
    (1, 3)   0.1
    (1, 4)   0.3
    (1, 9)   0.12
    (2, 0)   0.53
    (2, 4)   0.62
    (2, 7)   0.21
    (2, 9)   0.52
    (4, 2)   0.69
    (4, 3)   0.53
    (4, 7)   0.1
    (5, 2)   0.23
    (5, 3)   0.39
    (6, 3)   0.83
    (7, 0)   0.39
    (8, 3)   0.69
  adjacency matrix transposed: GrB_FP64 matrix: 10-by-10 entries: 17
    (0, 2)   0.53
    (0, 7)   0.39
    (2, 0)   0.5
    (2, 4)   0.69
    (2, 5)   0.23
    (3, 1)   0.1
    (3, 4)   0.53
    (3, 5)   0.39
    (3, 6)   0.83
    (3, 8)   0.69
    (4, 0)   0.3
    (4, 1)   0.3
    (4, 2)   0.62
    (7, 2)   0.21
    (7, 4)   0.1
    (9, 1)   0.12
    (9, 2)   0.52
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (4)   3
    (5)   2
    (6)   1
    (7)   1
    (8)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   2
    (2)   3
    (3)   5
    (4)   3
    (7)   2
    (9)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (2, 0)   1
    (3, 5)   1
    (4, 0)   1
    (5, 8)   1
    (5, 9)   1
    (6, 0)   1
    (6, 9)   1
    (7, 0)   1
    (7, 1)   1
    (7, 8)   1
    (8, 0)   1
    (8, 3)   1
    (8, 9)   1
    (9, 1)   1
    (9, 3)   1
    (9, 5)   1
    (9, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 4)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 7)   1
    (1, 9)   1
    (3, 8)   1
    (3, 9)   1
    (5, 3)   1
    (5, 9)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
    (9, 5)   1
    (9, 6)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (2)   1
    (3)   1
    (4)   1
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   4
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   2
    (3)   2
    (5)   2
    (8)   3
    (9)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 9)   1
    (1, 2)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 6)   1
    (2, 8)   1
    (3, 0)   1
    (3, 2)   1
    (4, 0)   1
    (4, 8)   1
    (5, 8)   1
    (6, 3)   1
    (7, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 6)   1
    (6, 0)   1
    (6, 2)   1
    (8, 1)   1
    (8, 2)   1
    (8, 4)   1
    (8, 5)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   4
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   1
    (6)   1
    (7)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   3
    (2)   3
    (3)   2
    (6)   2
    (8)   5
    (9)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 6)   1
    (0, 8)   1
    (0, 9)   1
    (1, 7)   1
    (1, 9)   1
    (2, 9)   1
    (3, 9)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
    (7, 8)   1
    (8, 5)   1
    (8, 7)   1
    (8, 9)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (4, 5)   1
    (4, 7)   1
    (5, 7)   1
    (5, 8)   1
    (6, 0)   1
    (6, 7)   1
    (7, 1)   1
    (7, 4)   1
    (7, 8)   1
    (8, 0)   1
    (8, 4)   1
    (8, 7)   1
    (9, 0)   1
    (9, 1)   1
    (9, 2)   1
    (9, 3)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (0)   3
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   1
    (7)   4
    (8)   3
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (4)   2
    (5)   2
    (6)   2
    (7)   3
    (8)   3
    (9)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 17 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 17
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 4)   1
    (3, 1)   1
    (3, 2)   1
    (4, 3)   1
    (6, 0)   1
    (6, 2)   1
    (6, 5)   1
    (7, 0)   1
    (7, 1)   1
    (8, 0)   1
    (9, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 17
    (0, 2)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 9)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (2, 1)   1
    (2, 3)   1
    (2, 6)   1
    (3, 1)   1
    (3, 4)   1
    (4, 1)   1
    (4, 2)   1
    (5, 1)   1
    (5, 6)   1
  row degree: GrB_INT64 vector: n: 10 entries: 8
    (1)   4
    (2)   3
    (3)   2
    (4)   1
    (6)   3
    (7)   2
    (8)   1
    (9)   1
  column degree: GrB_INT64 vector: n: 10 entries: 6
    (0)   5
    (1)   3
    (2)   3
    (3)   2
    (4)   2
    (5)   2
matrix is unsymmetric; skip undirected case

############################################# ldbc-undirected-example-bool.mtx

#### case: directed graph

Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

#### case: undirected graph

Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

############################################# ldbc-undirected-example-unweighted.mtx

#### case: directed graph

Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

#### case: undirected graph

Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (3, 4)   1
    (3, 6)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (4, 8)   1
    (5, 4)   1
    (5, 7)   1
    (6, 1)   1
    (6, 3)   1
    (6, 4)   1
    (7, 4)   1
    (7, 5)   1
    (8, 4)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

############################################# ldbc-undirected-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   0.9
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63
  adjacency matrix transposed: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   0.9
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1
  column degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

#### case: undirected graph

Graph: kind: undirected, nodes: 9 entries: 24 type: double
  structural symmetry: symmetric
  adjacency matrix: GrB_FP64 matrix: 9-by-9 entries: 24
    (0, 1)   0.9
    (0, 2)   0.69
    (1, 0)   0.9
    (1, 2)   0.13
    (1, 3)   0.5
    (1, 6)   0.32
    (2, 0)   0.69
    (2, 1)   0.13
    (3, 1)   0.5
    (3, 4)   0.63
    (3, 6)   0.12
    (4, 3)   0.63
    (4, 5)   0.53
    (4, 6)   0.64
    (4, 7)   0.23
    (4, 8)   0.63
    (5, 4)   0.53
    (5, 7)   0.36
    (6, 1)   0.32
    (6, 3)   0.12
    (6, 4)   0.64
    (7, 4)   0.23
    (7, 5)   0.36
    (8, 4)   0.63
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   2
    (1)   4
    (2)   2
    (3)   3
    (4)   5
    (5)   2
    (6)   3
    (7)   2
    (8)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 8)   1
    (1, 2)   1
    (1, 7)   1
    (2, 1)   1
    (2, 7)   1
    (3, 4)   1
    (3, 8)   1
    (4, 3)   1
    (4, 8)   1
    (5, 6)   1
    (5, 7)   1
    (5, 8)   1
    (6, 5)   1
    (6, 7)   1
    (6, 8)   1
    (7, 1)   1
    (7, 2)   1
    (7, 5)   1
    (7, 6)   1
    (8, 0)   1
    (8, 3)   1
    (8, 4)   1
    (8, 5)   1
    (8, 6)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   1
    (1)   2
    (2)   2
    (3)   2
    (4)   2
    (5)   3
    (6)   3
    (7)   4
    (8)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 9 entries: 24 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 9-by-9 entries: 24
    (0, 2)   1
    (0, 3)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 4)   1
    (6, 0)   1
    (6, 7)   1
    (7, 0)   1
    (7, 6)   1
    (8, 0)   1
  row degree: GrB_INT64 vector: n: 9 entries: 9
    (0)   5
    (1)   4
    (2)   3
    (3)   3
    (4)   2
    (5)   2
    (6)   2
    (7)   2
    (8)   1

############################################# ldbc-wcc-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 10 entries: 30 type: int64
  structural symmetry: symmetric
  adjacency matrix: GrB_INT64 matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 4)   1
    (0, 7)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (2, 7)   1
    (2, 9)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (7, 2)   1
    (7, 4)   1
    (8, 3)   1
    (9, 1)   1
    (9, 2)   1
  adjacency matrix transposed: GrB_INT64 matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 4)   1
    (0, 7)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (2, 7)   1
    (2, 9)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (7, 2)   1
    (7, 4)   1
    (8, 3)   1
    (9, 1)   1
    (9, 2)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   3
    (1)   3
    (2)   5
    (3)   5
    (4)   5
    (5)   2
    (6)   1
    (7)   3
    (8)   1
    (9)   2
  column degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   3
    (1)   3
    (2)   5
    (3)   5
    (4)   5
    (5)   2
    (6)   1
    (7)   3
    (8)   1
    (9)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5
  column degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1
  column degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5
  column degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  adjacency matrix transposed: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1
  column degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1

#### case: undirected graph

Graph: kind: undirected, nodes: 10 entries: 30 type: int64
  structural symmetry: symmetric
  adjacency matrix: GrB_INT64 matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 4)   1
    (0, 7)   1
    (1, 3)   1
    (1, 4)   1
    (1, 9)   1
    (2, 0)   1
    (2, 4)   1
    (2, 5)   1
    (2, 7)   1
    (2, 9)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (3, 6)   1
    (3, 8)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (4, 7)   1
    (5, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 0)   1
    (7, 2)   1
    (7, 4)   1
    (8, 3)   1
    (9, 1)   1
    (9, 2)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   3
    (1)   3
    (2)   5
    (3)   5
    (4)   5
    (5)   2
    (6)   1
    (7)   3
    (8)   1
    (9)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 8)   1
    (1, 8)   1
    (2, 7)   1
    (2, 8)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (4, 7)   1
    (4, 9)   1
    (5, 3)   1
    (5, 8)   1
    (5, 9)   1
    (6, 4)   1
    (6, 7)   1
    (6, 9)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
    (7, 9)   1
    (8, 0)   1
    (8, 1)   1
    (8, 2)   1
    (8, 5)   1
    (8, 9)   1
    (9, 4)   1
    (9, 5)   1
    (9, 6)   1
    (9, 7)   1
    (9, 8)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (4)   3
    (5)   3
    (6)   3
    (7)   5
    (8)   5
    (9)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 10 entries: 30 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 10-by-10 entries: 30
    (0, 2)   1
    (0, 3)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (1, 2)   1
    (1, 4)   1
    (1, 6)   1
    (1, 8)   1
    (1, 9)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (3, 5)   1
    (4, 1)   1
    (4, 2)   1
    (4, 7)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (7, 0)   1
    (7, 4)   1
    (8, 1)   1
    (9, 1)   1
  row degree: GrB_INT64 vector: n: 10 entries: 10
    (0)   5
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   3
    (6)   2
    (7)   2
    (8)   1
    (9)   1

############################################# matrix_int16.mtx

#### case: directed graph

Graph: kind: directed, nodes: 7 entries: 12 type: int16
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT16 matrix: 7-by-7 entries: 12
    (0, 1)   32767
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -32768
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT16 matrix: 7-by-7 entries: 12
    (0, 3)   -32768
    (1, 0)   32767
    (2, 3)   0
    (2, 5)   5
    (2, 6)   9
    (3, 0)   7
    (3, 6)   1
    (4, 1)   5
    (4, 6)   1
    (5, 2)   1
    (5, 4)   7
    (6, 1)   8
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   1
    (3)   2
    (4)   1
    (5)   1
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 2)   1
    (2, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 1)   1
    (4, 6)   1
    (5, 0)   0
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (0, 5)   0
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 5)   1
    (4, 3)   1
    (5, 3)   1
    (5, 6)   1
    (6, 4)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   2
    (6)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 5)   1
    (3, 1)   1
    (3, 4)   0
    (4, 6)   1
    (5, 6)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 3)   1
    (2, 1)   1
    (3, 0)   1
    (3, 1)   1
    (4, 0)   1
    (4, 3)   0
    (4, 6)   1
    (5, 0)   1
    (5, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   3
    (5)   2
    (6)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 0)   1
    (3, 6)   0
    (4, 5)   1
    (5, 6)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (2, 1)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (4, 2)   1
    (5, 4)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   0
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   3
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   0
    (1, 4)   1
    (2, 3)   1
    (3, 0)   1
    (4, 1)   1
    (4, 5)   1
    (5, 2)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   0
    (0, 3)   1
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (5, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
matrix is unsymmetric; skip undirected case

############################################# msf1.mtx

#### case: directed graph

Graph: kind: directed, nodes: 6 entries: 8 type: int64
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT64 matrix: 6-by-6 entries: 8
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 2)   1
    (2, 3)   1
    (3, 2)   1
    (4, 5)   1
    (5, 3)   1
  adjacency matrix transposed: GrB_INT64 matrix: 6-by-6 entries: 8
    (0, 1)   1
    (1, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 2)   1
    (3, 5)   1
    (5, 0)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   2
    (1)   2
    (2)   1
    (3)   1
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 5
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (5)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 8 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (1, 0)   1
    (2, 3)   1
    (3, 1)   1
    (4, 3)   1
    (4, 5)   1
    (5, 0)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 3)   1
    (3, 2)   1
    (3, 4)   1
    (4, 5)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   1
    (4)   2
    (5)   2
  column degree: GrB_INT64 vector: n: 6 entries: 5
    (0)   2
    (1)   2
    (3)   2
    (4)   1
    (5)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 8 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 2)   1
    (2, 3)   1
    (3, 2)   1
    (4, 5)   1
    (5, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (1, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 2)   1
    (3, 5)   1
    (5, 0)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   2
    (1)   2
    (2)   1
    (3)   1
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 5
    (0)   1
    (1)   1
    (2)   2
    (3)   2
    (5)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 8 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 5)   1
    (1, 2)   1
    (1, 5)   1
    (2, 1)   1
    (2, 3)   1
    (3, 4)   1
    (4, 3)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 8
    (1, 2)   1
    (2, 1)   1
    (3, 2)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 0)   1
    (5, 1)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 5
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 8 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (1, 0)   1
    (2, 1)   1
    (3, 2)   1
    (3, 4)   1
    (4, 0)   1
    (4, 3)   1
    (5, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 8
    (0, 1)   1
    (0, 4)   1
    (1, 0)   1
    (1, 2)   1
    (2, 3)   1
    (2, 5)   1
    (3, 4)   1
    (4, 3)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 5
    (0)   2
    (1)   2
    (2)   2
    (3)   1
    (4)   1
matrix is unsymmetric; skip undirected case

############################################# msf2.mtx

#### case: directed graph

Graph: kind: directed, nodes: 8 entries: 12 type: int64
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT64 matrix: 8-by-8 entries: 12
    (0, 1)   2
    (0, 3)   4
    (1, 2)   5
    (1, 4)   1
    (1, 7)   3
    (2, 4)   4
    (2, 5)   3
    (2, 6)   2
    (3, 5)   2
    (3, 7)   1
    (4, 6)   2
    (5, 7)   6
  adjacency matrix transposed: GrB_INT64 matrix: 8-by-8 entries: 12
    (1, 0)   2
    (2, 1)   5
    (3, 0)   4
    (4, 1)   1
    (4, 2)   4
    (5, 2)   3
    (5, 3)   2
    (6, 2)   2
    (6, 4)   2
    (7, 1)   3
    (7, 3)   1
    (7, 5)   6
  row degree: GrB_INT64 vector: n: 8 entries: 6
    (0)   2
    (1)   3
    (2)   3
    (3)   2
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   2
    (7)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (2, 0)   1
    (3, 1)   1
    (4, 5)   1
    (4, 6)   1
    (5, 1)   1
    (5, 3)   1
    (6, 1)   1
    (6, 2)   1
    (6, 7)   1
    (7, 0)   1
    (7, 2)   1
    (7, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 2)   1
    (0, 7)   1
    (1, 3)   1
    (1, 5)   1
    (1, 6)   1
    (2, 6)   1
    (2, 7)   1
    (3, 5)   1
    (3, 7)   1
    (5, 4)   1
    (6, 4)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 6
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   3
    (7)   3
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   2
    (1)   3
    (2)   2
    (3)   2
    (5)   1
    (6)   1
    (7)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 4)   1
    (0, 7)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (5, 7)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 2)   1
    (1, 0)   1
    (3, 2)   1
    (4, 0)   1
    (4, 1)   1
    (5, 1)   1
    (5, 3)   1
    (6, 1)   1
    (6, 4)   1
    (7, 0)   1
    (7, 3)   1
    (7, 5)   1
  row degree: GrB_INT64 vector: n: 8 entries: 6
    (0)   3
    (1)   3
    (2)   2
    (3)   2
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   1
    (1)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   2
    (7)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (1, 7)   1
    (2, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 5)   1
    (3, 7)   1
    (4, 6)   1
    (5, 7)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 0)   1
    (2, 1)   1
    (3, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 2)   1
    (5, 3)   1
    (6, 2)   1
    (6, 4)   1
    (7, 1)   1
    (7, 3)   1
    (7, 5)   1
  row degree: GrB_INT64 vector: n: 8 entries: 6
    (0)   2
    (1)   3
    (2)   3
    (3)   2
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   2
    (7)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 3)   1
    (2, 0)   1
    (4, 0)   1
    (4, 1)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
    (6, 0)   1
    (6, 2)   1
    (7, 4)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 2)   1
    (0, 4)   1
    (0, 6)   1
    (1, 4)   1
    (1, 5)   1
    (2, 5)   1
    (2, 6)   1
    (3, 1)   1
    (3, 5)   1
    (4, 7)   1
    (5, 4)   1
    (6, 7)   1
  row degree: GrB_INT64 vector: n: 8 entries: 6
    (1)   1
    (2)   1
    (4)   3
    (5)   3
    (6)   2
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
matrix is unsymmetric; skip undirected case

############################################# msf3.mtx

#### case: directed graph

Graph: kind: directed, nodes: 5 entries: 7 type: int64
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT64 matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 2)   1
    (1, 3)   2
    (1, 4)   2
    (2, 3)   2
    (2, 4)   2
    (3, 4)   1
  adjacency matrix transposed: GrB_INT64 matrix: 5-by-5 entries: 7
    (1, 0)   1
    (2, 0)   1
    (3, 1)   2
    (3, 2)   2
    (4, 1)   2
    (4, 2)   2
    (4, 3)   1
  row degree: GrB_INT64 vector: n: 5 entries: 4
    (0)   2
    (1)   2
    (2)   2
    (3)   1
  column degree: GrB_INT64 vector: n: 5 entries: 4
    (1)   1
    (2)   1
    (3)   2
    (4)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 5 entries: 7 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 5-by-5 entries: 7
    (1, 0)   1
    (2, 3)   1
    (2, 4)   1
    (3, 0)   1
    (3, 1)   1
    (4, 0)   1
    (4, 1)   1
  adjacency matrix transposed: GrB_BOOL matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 3)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (3, 2)   1
    (4, 2)   1
  row degree: GrB_INT64 vector: n: 5 entries: 4
    (1)   1
    (2)   2
    (3)   2
    (4)   2
  column degree: GrB_INT64 vector: n: 5 entries: 4
    (0)   3
    (1)   2
    (3)   1
    (4)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 5 entries: 7 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (3, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 5-by-5 entries: 7
    (1, 0)   1
    (2, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
  row degree: GrB_INT64 vector: n: 5 entries: 4
    (0)   2
    (1)   2
    (2)   2
    (3)   1
  column degree: GrB_INT64 vector: n: 5 entries: 4
    (1)   1
    (2)   1
    (3)   2
    (4)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 5 entries: 7 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (3, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 5-by-5 entries: 7
    (1, 0)   1
    (2, 0)   1
    (3, 1)   1
    (3, 2)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
  row degree: GrB_INT64 vector: n: 5 entries: 4
    (0)   2
    (1)   2
    (2)   2
    (3)   1
  column degree: GrB_INT64 vector: n: 5 entries: 4
    (1)   1
    (2)   1
    (3)   2
    (4)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 5 entries: 7 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 5-by-5 entries: 7
    (1, 0)   1
    (2, 0)   1
    (2, 1)   1
    (3, 0)   1
    (3, 1)   1
    (4, 2)   1
    (4, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 5-by-5 entries: 7
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 2)   1
    (1, 3)   1
    (2, 4)   1
    (3, 4)   1
  row degree: GrB_INT64 vector: n: 5 entries: 4
    (1)   1
    (2)   2
    (3)   2
    (4)   2
  column degree: GrB_INT64 vector: n: 5 entries: 4
    (0)   3
    (1)   2
    (2)   1
    (3)   1
matrix is unsymmetric; skip undirected case

############################################# structure.mtx

#### case: directed graph

Graph: kind: directed, nodes: 7 entries: 12 type: int32
  structural symmetry: unsymmetric
  adjacency matrix: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (3, 0)   1
    (3, 2)   1
    (4, 5)   1
    (5, 2)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_INT32 matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (2, 3)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 6)   1
    (4, 1)   1
    (4, 6)   1
    (5, 2)   1
    (5, 4)   1
    (6, 1)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   1
    (3)   2
    (4)   1
    (5)   1
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   3
    (3)   2
    (4)   2
    (5)   2
    (6)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 2)   1
    (2, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 1)   1
    (4, 6)   1
    (5, 0)   1
    (5, 3)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (0, 5)   1
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 0)   1
    (2, 1)   1
    (3, 5)   1
    (4, 3)   1
    (5, 3)   1
    (5, 6)   1
    (6, 4)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   2
    (6)   1

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 5)   1
    (3, 1)   1
    (3, 4)   1
    (4, 6)   1
    (5, 6)   1
    (6, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 2)   1
    (1, 3)   1
    (2, 1)   1
    (3, 0)   1
    (3, 1)   1
    (4, 0)   1
    (4, 3)   1
    (4, 6)   1
    (5, 0)   1
    (5, 2)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   3
    (5)   2
    (6)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (2, 6)   1
    (3, 0)   1
    (3, 6)   1
    (4, 5)   1
    (5, 6)   1
    (6, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (2, 1)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (4, 2)   1
    (5, 4)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   2
    (1)   2
    (2)   3
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   2
    (6)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 7 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 3)   1
    (1, 0)   1
    (1, 4)   1
    (2, 3)   1
    (3, 0)   1
    (4, 1)   1
    (4, 5)   1
    (5, 2)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
  adjacency matrix transposed: GrB_BOOL matrix: 7-by-7 entries: 12
    (0, 1)   1
    (0, 3)   1
    (0, 6)   1
    (1, 4)   1
    (1, 6)   1
    (2, 5)   1
    (2, 6)   1
    (3, 0)   1
    (3, 2)   1
    (4, 1)   1
    (5, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   1
    (1)   2
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   3
  column degree: GrB_INT64 vector: n: 7 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
matrix is unsymmetric; skip undirected case

############################################# sample.mtx

#### case: directed graph

Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (1, 2)   1
    (1, 4)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (4, 5)   1
    (4, 6)   1
    (5, 7)   1
    (6, 7)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 0)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (3, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 3)   1
    (5, 4)   1
    (6, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   3
    (1)   2
    (2)   1
    (3)   2
    (4)   2
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   3
    (3)   1
    (4)   3
    (5)   1
    (6)   1
    (7)   2

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 6)   1
    (2, 0)   1
    (3, 0)   1
    (4, 1)   1
    (4, 6)   1
    (5, 1)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (7, 1)   1
    (7, 4)   1
    (7, 5)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 2)   1
    (0, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 7)   1
    (2, 6)   1
    (3, 6)   1
    (4, 7)   1
    (5, 7)   1
    (6, 1)   1
    (6, 4)   1
    (6, 5)   1
  row degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   1
    (3)   1
    (4)   2
    (5)   2
    (6)   2
    (7)   3
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   2
    (1)   3
    (2)   1
    (3)   1
    (4)   1
    (5)   1
    (6)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (1, 3)   1
    (1, 4)   1
    (2, 3)   1
    (2, 4)   1
    (3, 5)   1
    (3, 6)   1
    (4, 3)   1
    (5, 7)   1
    (6, 7)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 0)   1
    (2, 0)   1
    (3, 1)   1
    (3, 2)   1
    (3, 4)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 3)   1
    (6, 3)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   2
    (4)   1
    (5)   1
    (6)   1
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   1
    (3)   3
    (4)   3
    (5)   1
    (6)   1
    (7)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (0, 2)   1
    (0, 6)   1
    (1, 6)   1
    (1, 7)   1
    (2, 6)   1
    (2, 7)   1
    (3, 5)   1
    (4, 5)   1
    (6, 7)   1
    (7, 3)   1
    (7, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (1, 0)   1
    (2, 0)   1
    (3, 7)   1
    (4, 7)   1
    (5, 3)   1
    (5, 4)   1
    (6, 0)   1
    (6, 1)   1
    (6, 2)   1
    (7, 1)   1
    (7, 2)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (6)   1
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (1)   1
    (2)   1
    (3)   1
    (4)   1
    (5)   2
    (6)   3
    (7)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 12 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 1)   1
    (1, 5)   1
    (1, 6)   1
    (3, 0)   1
    (3, 1)   1
    (4, 0)   1
    (4, 1)   1
    (5, 2)   1
    (6, 2)   1
    (7, 0)   1
    (7, 3)   1
    (7, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 12
    (0, 3)   1
    (0, 4)   1
    (0, 7)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (2, 5)   1
    (2, 6)   1
    (3, 7)   1
    (4, 7)   1
    (5, 1)   1
    (6, 1)   1
  row degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   1
    (1)   2
    (3)   2
    (4)   2
    (5)   1
    (6)   1
    (7)   3
  column degree: GrB_INT64 vector: n: 8 entries: 7
    (0)   3
    (1)   3
    (2)   2
    (3)   1
    (4)   1
    (5)   1
    (6)   1
matrix is unsymmetric; skip undirected case

############################################# sample2.mtx

#### case: directed graph

Graph: kind: directed, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (5, 7)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (5, 7)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (3)   3
    (4)   5
    (5)   5
    (6)   3
    (7)   3
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (3)   3
    (4)   5
    (5)   5
    (6)   3
    (7)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2
  column degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2

#### case: undirected graph

Graph: kind: undirected, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (1, 0)   1
    (1, 2)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 4)   1
    (3, 2)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (4, 5)   1
    (4, 6)   1
    (4, 7)   1
    (5, 1)   1
    (5, 3)   1
    (5, 4)   1
    (5, 6)   1
    (5, 7)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 4)   1
    (7, 5)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   4
    (3)   3
    (4)   5
    (5)   5
    (6)   3
    (7)   3

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 5)   1
    (1, 0)   1
    (1, 5)   1
    (1, 7)   1
    (2, 5)   1
    (2, 6)   1
    (2, 7)   1
    (3, 4)   1
    (3, 6)   1
    (3, 7)   1
    (4, 3)   1
    (4, 6)   1
    (4, 7)   1
    (5, 0)   1
    (5, 1)   1
    (5, 2)   1
    (5, 6)   1
    (6, 2)   1
    (6, 3)   1
    (6, 4)   1
    (6, 5)   1
    (6, 7)   1
    (7, 1)   1
    (7, 2)   1
    (7, 3)   1
    (7, 4)   1
    (7, 6)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   2
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   4
    (6)   5
    (7)   5

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 8 entries: 28 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 8-by-8 entries: 28
    (0, 1)   1
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (1, 0)   1
    (1, 3)   1
    (1, 4)   1
    (1, 5)   1
    (1, 6)   1
    (2, 0)   1
    (2, 3)   1
    (2, 4)   1
    (2, 7)   1
    (3, 1)   1
    (3, 2)   1
    (3, 7)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (5, 0)   1
    (5, 1)   1
    (5, 6)   1
    (6, 0)   1
    (6, 1)   1
    (6, 5)   1
    (7, 2)   1
    (7, 3)   1
  row degree: GrB_INT64 vector: n: 8 entries: 8
    (0)   5
    (1)   5
    (2)   4
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   2

############################################# skew_fp32.mtx

#### case: directed graph

Graph: kind: directed, nodes: 6 entries: 20 type: single
  structural symmetry: symmetric
  adjacency matrix: GrB_FP32 matrix: 6-by-6 entries: 20
    (0, 3)   0.12565
    (0, 4)   -inf
    (0, 5)   0.37818
    (1, 2)   -0.7261
    (1, 3)   -0.78287
    (1, 4)   0.7709
    (2, 1)   0.7261
    (2, 3)   -0.0098
    (2, 5)   -0.70433
    (3, 0)   -0.12565
    (3, 1)   0.78287
    (3, 2)   0.0098
    (3, 5)   -1.6518
    (4, 0)   inf
    (4, 1)   -0.7709
    (4, 5)   0.1816
    (5, 0)   -0.37818
    (5, 2)   0.70433
    (5, 3)   1.6518
    (5, 4)   -0.1816
  adjacency matrix transposed: GrB_FP32 matrix: 6-by-6 entries: 20
    (0, 3)   -0.12565
    (0, 4)   inf
    (0, 5)   -0.37818
    (1, 2)   0.7261
    (1, 3)   0.78287
    (1, 4)   -0.7709
    (2, 1)   -0.7261
    (2, 3)   0.0098
    (2, 5)   0.70433
    (3, 0)   0.12565
    (3, 1)   -0.78287
    (3, 2)   -0.0098
    (3, 5)   1.6518
    (4, 0)   -inf
    (4, 1)   0.7709
    (4, 5)   -0.1816
    (5, 0)   0.37818
    (5, 2)   -0.70433
    (5, 3)   -1.6518
    (5, 4)   0.1816
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   4
    (4)   3
    (5)   4
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   4
    (4)   3
    (5)   4

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 20 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 1)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 1)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 5)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 1)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 1)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 5)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   3
    (4)   4
    (5)   4
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   3
    (4)   4
    (5)   4

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 20 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (1, 0)   1
    (1, 2)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (1, 0)   1
    (1, 2)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 20 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 1)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 1)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 5)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (1, 4)   1
    (2, 1)   1
    (2, 4)   1
    (2, 5)   1
    (3, 0)   1
    (3, 1)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 2)   1
    (4, 5)   1
    (5, 0)   1
    (5, 2)   1
    (5, 3)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   3
    (4)   4
    (5)   4
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   3
    (2)   3
    (3)   3
    (4)   4
    (5)   4

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 20 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (1, 0)   1
    (1, 2)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 20
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (1, 0)   1
    (1, 2)   1
    (1, 4)   1
    (1, 5)   1
    (2, 0)   1
    (2, 1)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (3, 5)   1
    (4, 0)   1
    (4, 1)   1
    (4, 3)   1
    (5, 1)   1
    (5, 2)   1
    (5, 3)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   4
    (1)   4
    (2)   3
    (3)   3
    (4)   3
    (5)   3
matrix is unsymmetric; skip undirected case

############################################# tree-example.mtx

#### case: directed graph

Graph: kind: directed, nodes: 6 entries: 10 type: int64
  structural symmetry: symmetric
  adjacency matrix: GrB_INT64 matrix: 6-by-6 entries: 10
    (0, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 4)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (5, 3)   1
  adjacency matrix transposed: GrB_INT64 matrix: 6-by-6 entries: 10
    (0, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 4)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (5, 3)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   2
    (3)   3
    (4)   2
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   2
    (3)   3
    (4)   2
    (5)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  adjacency matrix transposed: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1
  column degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1

#### case: undirected graph

Graph: kind: undirected, nodes: 6 entries: 10 type: int64
  structural symmetry: symmetric
  adjacency matrix: GrB_INT64 matrix: 6-by-6 entries: 10
    (0, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 4)   1
    (3, 1)   1
    (3, 4)   1
    (3, 5)   1
    (4, 2)   1
    (4, 3)   1
    (5, 3)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   2
    (3)   3
    (4)   2
    (5)   1

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: undirected, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: undirected, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: undirected, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 3)   1
    (1, 5)   1
    (2, 5)   1
    (3, 0)   1
    (3, 4)   1
    (4, 3)   1
    (4, 5)   1
    (5, 1)   1
    (5, 2)   1
    (5, 4)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   1
    (1)   1
    (2)   1
    (3)   2
    (4)   2
    (5)   3

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: undirected, nodes: 6 entries: 10 type: bool
  structural symmetry: symmetric
  adjacency matrix: GrB_BOOL matrix: 6-by-6 entries: 10
    (0, 2)   1
    (0, 4)   1
    (0, 5)   1
    (1, 2)   1
    (1, 3)   1
    (2, 0)   1
    (2, 1)   1
    (3, 1)   1
    (4, 0)   1
    (5, 0)   1
  row degree: GrB_INT64 vector: n: 6 entries: 6
    (0)   3
    (1)   2
    (2)   2
    (3)   1
    (4)   1
    (5)   1

############################################# west0067.mtx

#### case: directed graph

Graph: kind: directed, nodes: 67 entries: 294 type: double
  structural symmetry: unsymmetric
  adjacency matrix: GrB_FP64 matrix: 67-by-67 entries: 294
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    ...
  adjacency matrix transposed: GrB_FP64 matrix: 67-by-67 entries: 294
    (0, 4)   -0.278842
    (0, 5)   -0.268019
    (0, 6)   -0.232372
    (0, 7)   -0.157508
    (0, 8)   -0.0632598
    (0, 24)   0.139421
    (0, 25)   0.134009
    (0, 26)   0.116186
    (0, 27)   0.0787541
    (0, 28)   0.0316299
    (1, 4)   -0.8
    (1, 20)   -0.915953
    (1, 24)   0.4
    (1, 60)   1
    (2, 5)   -0.8
    (2, 21)   -0.915953
    (2, 25)   0.4
    (2, 60)   1
    (3, 6)   -0.8
    (3, 22)   -0.915953
    (3, 26)   0.4
    (3, 60)   1
    (4, 7)   -0.8
    (4, 23)   -0.915953
    (4, 27)   0.4
    (4, 60)   1
    (5, 8)   -0.8
    (5, 28)   0.4
    (5, 60)   1
    (6, 4)   0.134462
    ...
  row degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   3
    (1)   3
    (2)   3
    (3)   3
    (4)   5
    (5)   5
    (6)   5
    (7)   5
    (8)   5
    (9)   6
    (10)   3
    (11)   3
    (12)   3
    (13)   3
    (14)   4
    (15)   5
    (16)   5
    (17)   5
    (18)   5
    (19)   5
    (20)   3
    (21)   3
    (22)   3
    (23)   3
    (24)   6
    (25)   6
    (26)   6
    (27)   6
    (28)   6
    (29)   6
    ...
  column degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   10
    (1)   4
    (2)   4
    (3)   4
    (4)   4
    (5)   3
    (6)   5
    (7)   3
    (8)   3
    (9)   3
    (10)   3
    (11)   2
    (12)   5
    (13)   5
    (14)   5
    (15)   5
    (16)   4
    (17)   5
    (18)   2
    (19)   10
    (20)   3
    (21)   3
    (22)   3
    (23)   3
    (24)   3
    (25)   4
    (26)   4
    (27)   4
    (28)   4
    (29)   3
    ...

Trial 0, graph H, sorted (ascending) by (row) degrees:
Graph: kind: directed, nodes: 67 entries: 294 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 35)   1
    (1, 7)   1
    (1, 30)   1
    (1, 34)   1
    (2, 8)   1
    (2, 31)   1
    (2, 34)   1
    (3, 21)   1
    (3, 34)   1
    (3, 58)   1
    (4, 5)   1
    (4, 32)   1
    (4, 34)   1
    (5, 7)   1
    (5, 9)   1
    (5, 36)   1
    (6, 8)   1
    (6, 10)   1
    (6, 36)   1
    (7, 11)   1
    (7, 21)   1
    (7, 36)   1
    (8, 12)   1
    (8, 32)   1
    (8, 36)   1
    (9, 2)   1
    (9, 15)   1
    (9, 45)   1
    (10, 3)   1
    (10, 16)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 13)   1
    (0, 22)   1
    (0, 42)   1
    (0, 55)   1
    (0, 65)   1
    (1, 27)   1
    (1, 28)   1
    (1, 29)   1
    (1, 30)   1
    (1, 31)   1
    (1, 59)   1
    (1, 60)   1
    (1, 61)   1
    (1, 62)   1
    (1, 63)   1
    (2, 9)   1
    (2, 27)   1
    (2, 51)   1
    (2, 59)   1
    (3, 10)   1
    (3, 28)   1
    (3, 51)   1
    (3, 60)   1
    (4, 11)   1
    (4, 29)   1
    (4, 51)   1
    (4, 61)   1
    (5, 4)   1
    (5, 30)   1
    (5, 47)   1
    ...
  row degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   1
    (1)   3
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   3
    (11)   3
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   4
    (22)   4
    (23)   4
    (24)   4
    (25)   4
    (26)   4
    (27)   5
    (28)   5
    (29)   5
    ...
  column degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   5
    (1)   10
    (2)   4
    (3)   4
    (4)   4
    (5)   3
    (6)   2
    (7)   5
    (8)   5
    (9)   3
    (10)   3
    (11)   3
    (12)   3
    (13)   3
    (14)   10
    (15)   5
    (16)   5
    (17)   4
    (18)   4
    (19)   3
    (20)   10
    (21)   5
    (22)   3
    (23)   3
    (24)   3
    (25)   3
    (26)   3
    (27)   4
    (28)   3
    (29)   5
    ...

Trial 1, graph H, sorted (descending) by (row) degrees:
Graph: kind: directed, nodes: 67 entries: 294 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 14)   1
    (0, 15)   1
    (0, 16)   1
    (0, 40)   1
    (0, 52)   1
    (0, 53)   1
    (1, 19)   1
    (1, 20)   1
    (1, 46)   1
    (1, 47)   1
    (1, 59)   1
    (1, 60)   1
    (2, 19)   1
    (2, 21)   1
    (2, 46)   1
    (2, 48)   1
    (2, 59)   1
    (2, 61)   1
    (3, 19)   1
    (3, 22)   1
    (3, 24)   1
    (3, 46)   1
    (3, 49)   1
    (3, 59)   1
    (4, 9)   1
    (4, 19)   1
    (4, 23)   1
    (4, 25)   1
    (4, 46)   1
    (4, 59)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 11)   1
    (0, 29)   1
    (0, 48)   1
    (1, 18)   1
    (1, 31)   1
    (1, 40)   1
    (2, 14)   1
    (2, 24)   1
    (2, 36)   1
    (2, 58)   1
    (3, 15)   1
    (3, 25)   1
    (3, 36)   1
    (3, 59)   1
    (4, 16)   1
    (4, 26)   1
    (4, 36)   1
    (4, 60)   1
    (5, 17)   1
    (5, 27)   1
    (5, 36)   1
    (5, 61)   1
    (6, 18)   1
    (6, 28)   1
    (6, 36)   1
    (7, 20)   1
    (7, 38)   1
    (7, 42)   1
    (7, 63)   1
    (8, 24)   1
    ...
  row degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   6
    (1)   6
    (2)   6
    (3)   6
    (4)   6
    (5)   6
    (6)   6
    (7)   6
    (8)   6
    (9)   5
    (10)   5
    (11)   5
    (12)   5
    (13)   5
    (14)   5
    (15)   5
    (16)   5
    (17)   5
    (18)   5
    (19)   5
    (20)   5
    (21)   5
    (22)   5
    (23)   5
    (24)   5
    (25)   5
    (26)   5
    (27)   5
    (28)   5
    (29)   5
    ...
  column degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   3
    (1)   3
    (2)   4
    (3)   4
    (4)   4
    (5)   4
    (6)   3
    (7)   4
    (8)   10
    (9)   4
    (10)   3
    (11)   5
    (12)   3
    (13)   3
    (14)   5
    (15)   4
    (16)   5
    (17)   2
    (18)   10
    (19)   10
    (20)   3
    (21)   3
    (22)   3
    (23)   3
    (24)   5
    (25)   5
    (26)   4
    (27)   5
    (28)   4
    (29)   5
    ...

Trial 2, graph H, sorted (ascending) by (column) degrees:
Graph: kind: directed, nodes: 67 entries: 294 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 8)   1
    (0, 46)   1
    (0, 62)   1
    (1, 10)   1
    (1, 16)   1
    (1, 33)   1
    (1, 62)   1
    (1, 63)   1
    (2, 4)   1
    (2, 26)   1
    (2, 44)   1
    (2, 46)   1
    (2, 61)   1
    (3, 6)   1
    (3, 28)   1
    (3, 44)   1
    (3, 48)   1
    (3, 61)   1
    (4, 0)   1
    (4, 2)   1
    (4, 29)   1
    (4, 44)   1
    (4, 61)   1
    (5, 29)   1
    (5, 45)   1
    (5, 46)   1
    (5, 47)   1
    (5, 48)   1
    (5, 49)   1
    (6, 7)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 4)   1
    (0, 56)   1
    (1, 47)   1
    (1, 55)   1
    (2, 4)   1
    (2, 33)   1
    (2, 59)   1
    (3, 28)   1
    (3, 56)   1
    (3, 61)   1
    (4, 2)   1
    (4, 25)   1
    (4, 56)   1
    (5, 26)   1
    (5, 44)   1
    (5, 56)   1
    (6, 3)   1
    (6, 27)   1
    (6, 56)   1
    (7, 6)   1
    (7, 48)   1
    (7, 58)   1
    (8, 0)   1
    (8, 29)   1
    (8, 58)   1
    (9, 45)   1
    (9, 49)   1
    (9, 58)   1
    (10, 1)   1
    (10, 46)   1
    ...
  row degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   3
    (1)   5
    (2)   5
    (3)   5
    (4)   5
    (5)   6
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   3
    (11)   6
    (12)   6
    (13)   5
    (14)   5
    (15)   5
    (16)   5
    (17)   3
    (18)   3
    (19)   4
    (20)   4
    (21)   4
    (22)   4
    (23)   4
    (24)   5
    (25)   3
    (26)   3
    (27)   3
    (28)   5
    (29)   5
    ...
  column degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   2
    (1)   2
    (2)   3
    (3)   3
    (4)   3
    (5)   3
    (6)   3
    (7)   3
    (8)   3
    (9)   3
    (10)   3
    (11)   3
    (12)   3
    (13)   3
    (14)   3
    (15)   3
    (16)   3
    (17)   3
    (18)   3
    (19)   3
    (20)   3
    (21)   3
    (22)   3
    (23)   3
    (24)   3
    (25)   4
    (26)   4
    (27)   4
    (28)   4
    (29)   4
    ...

Trial 3, graph H, sorted (descending) by (column) degrees:
Graph: kind: directed, nodes: 67 entries: 294 type: bool
  structural symmetry: unsymmetric
  adjacency matrix: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 7)   1
    (0, 11)   1
    (0, 43)   1
    (1, 1)   1
    (1, 2)   1
    (1, 51)   1
    (1, 52)   1
    (1, 57)   1
    (2, 3)   1
    (2, 4)   1
    (2, 12)   1
    (2, 33)   1
    (2, 59)   1
    (3, 18)   1
    (3, 21)   1
    (3, 29)   1
    (4, 22)   1
    (4, 36)   1
    (4, 41)   1
    (5, 22)   1
    (5, 38)   1
    (5, 39)   1
    (5, 40)   1
    (5, 41)   1
    (5, 64)   1
    (6, 0)   1
    (6, 6)   1
    (6, 9)   1
    (6, 25)   1
    (6, 45)   1
    ...
  adjacency matrix transposed: GrB_BOOL matrix: 67-by-67 entries: 294
    (0, 6)   1
    (0, 26)   1
    (0, 28)   1
    (0, 29)   1
    (0, 30)   1
    (0, 31)   1
    (0, 42)   1
    (0, 43)   1
    (0, 44)   1
    (0, 51)   1
    (1, 1)   1
    (1, 7)   1
    (1, 8)   1
    (1, 9)   1
    (1, 10)   1
    (1, 11)   1
    (1, 27)   1
    (1, 46)   1
    (1, 65)   1
    (1, 66)   1
    (2, 1)   1
    (2, 10)   1
    (2, 11)   1
    (2, 27)   1
    (2, 28)   1
    (2, 29)   1
    (2, 30)   1
    (2, 31)   1
    (2, 51)   1
    (2, 66)   1
    ...
  row degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   3
    (1)   5
    (2)   5
    (3)   3
    (4)   3
    (5)   6
    (6)   5
    (7)   3
    (8)   3
    (9)   4
    (10)   5
    (11)   5
    (12)   3
    (13)   3
    (14)   5
    (15)   5
    (16)   5
    (17)   1
    (18)   5
    (19)   5
    (20)   5
    (21)   5
    (22)   5
    (23)   3
    (24)   3
    (25)   3
    (26)   5
    (27)   5
    (28)   6
    (29)   6
    ...
  column degree: GrB_INT64 vector: n: 67 entries: 67
    (0)   10
    (1)   10
    (2)   10
    (3)   10
    (4)   10
    (5)   10
    (6)   5
    (7)   5
    (8)   5
    (9)   5
    (10)   5
    (11)   5
    (12)   5
    (13)   5
    (14)   5
    (15)   5
    (16)   5
    (17)   5
    (18)   5
    (19)   5
    (20)   5
    (21)   5
    (22)   5
    (23)   4
    (24)   4
    (25)   4
    (26)   4
    (27)   4
    (28)   4
    (29)   4
    ...
matrix is unsymmetric; skip undirected case
[ OK ]
Test SortByDegree_failures...                   
msg: P is null
msg: graph is NULL
msg: degree property unknown
[ OK ]
Test SortByDegree_brutal...                     
A.mtx
LFAT5.mtx
cover.mtx
full.mtx
full_symmetric.mtx
karate.mtx
ldbc-cdlp-directed-example.mtx
ldbc-cdlp-undirected-example.mtx
ldbc-directed-example-bool.mtx
ldbc-directed-example-unweighted.mtx
ldbc-directed-example.mtx
ldbc-undirected-example-bool.mtx
ldbc-undirected-example-unweighted.mtx
ldbc-undirected-example.mtx
ldbc-wcc-example.mtx
matrix_int16.mtx
msf1.mtx
msf2.mtx
msf3.mtx
structure.mtx
sample.mtx
sample2.mtx
skew_fp32.mtx
tree-example.mtx
west0067.mtx
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.02 sec
----------------------------------------------------------
Test Passed.
"ctest_SortByDegree" end time: Dec 07 10:31 EST
"ctest_SortByDegree" time elapsed: 00:00:00
----------------------------------------------------------

24/40 Testing: ctest_Structure
24/40 Test: ctest_Structure
Command: "/home/afanasyev/LAGraph/build/src/test/test_Structure"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Structure" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Structure...                               [ OK ]
Test Structure_failures...                      
msg: [&C is NULL]
msg: [A is NULL]
[ OK ]
Test Structure_brutal...                        [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.01 sec
----------------------------------------------------------
Test Passed.
"ctest_Structure" end time: Dec 07 10:31 EST
"ctest_Structure" time elapsed: 00:00:00
----------------------------------------------------------

25/40 Testing: ctest_TicToc
25/40 Test: ctest_TicToc
Command: "/home/afanasyev/LAGraph/build/src/test/test_TicToc"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_TicToc" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test TicToc...                                  
result: 64.125, time: 0.195485 sec
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.20 sec
----------------------------------------------------------
Test Passed.
"ctest_TicToc" end time: Dec 07 10:31 EST
"ctest_TicToc" time elapsed: 00:00:00
----------------------------------------------------------

26/40 Testing: ctest_TriangleCount
26/40 Test: ctest_TriangleCount
Command: "/home/afanasyev/LAGraph/build/src/test/test_TriangleCount"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_TriangleCount" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test TriangleCount_Methods1...                  [ OK ]
Test TriangleCount_Methods2...                  [ OK ]
Test TriangleCount_Methods3...                  [ OK ]
Test TriangleCount_Methods4...                  [ OK ]
Test TriangleCount_Methods5...                  [ OK ]
Test TriangleCount_Methods6...                  [ OK ]
Test TriangleCount...                           [ OK ]
Test TriangleCount_many...                      
# triangles: 45 Matrix: karate.mtx
# triangles: 11 Matrix: A.mtx
# triangles: 2016 Matrix: jagmesh7.mtx
# triangles: 6 Matrix: ldbc-cdlp-undirected-example.mtx
# triangles: 4 Matrix: ldbc-undirected-example.mtx
# triangles: 5 Matrix: ldbc-wcc-example.mtx
# triangles: 0 Matrix: LFAT5.mtx
# triangles: 342300 Matrix: bcsstk13.mtx
# triangles: 0 Matrix: tree-example.mtx
[ OK ]
Test TriangleCount_autosort...                  [ OK ]
Test TriangleCount_brutal...                    

================== Matrix: karate.mtx
brutal test at line  450: LG_nmalloc: 46
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 48, succeeded with 22 mallocs
# triangles: 45 Matrix: karate.mtx
brutal test at line  454: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  463: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 38 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 31 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 31 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 37 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 37 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs

================== Matrix: A.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 15 mallocs
# triangles: 11 Matrix: A.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 19 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 19 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs

================== Matrix: jagmesh7.mtx
brutal test at line  450: LG_nmalloc: 46
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 48, succeeded with 22 mallocs
# triangles: 2016 Matrix: jagmesh7.mtx
brutal test at line  454: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  463: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 39 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 32 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 32 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 37 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 37 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 22 mallocs

================== Matrix: ldbc-cdlp-undirected-example.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 15 mallocs
# triangles: 6 Matrix: ldbc-cdlp-undirected-example.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 19 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 19 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs

================== Matrix: ldbc-undirected-example.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 20 mallocs
# triangles: 4 Matrix: ldbc-undirected-example.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 8 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 8 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 28 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 28 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs

================== Matrix: ldbc-wcc-example.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 20 mallocs
# triangles: 5 Matrix: ldbc-wcc-example.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 15 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 5 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 23 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 14 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 28 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 28 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs

================== Matrix: LFAT5.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 22 mallocs
# triangles: 0 Matrix: LFAT5.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 8 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 8 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs

================== Matrix: bcsstk13.mtx
brutal test at line  450: LG_nmalloc: 46
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 48, succeeded with 25 mallocs
# triangles: 342300 Matrix: bcsstk13.mtx
brutal test at line  454: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  463: LG_nmalloc: 48
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 48, succeeded with 3 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 9 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 39 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 32 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 32 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 17 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 38 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 38 mallocs
brutal test at line  473: LG_nmalloc: 48
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 48, succeeded with 24 mallocs

================== Matrix: tree-example.mtx
brutal test at line  450: LG_nmalloc: 45
method: LAGraph_TriangleCount (&nt1, G, msg)
brutal test at line  450: LG_nmalloc: 47, succeeded with 22 mallocs
# triangles: 0 Matrix: tree-example.mtx
brutal test at line  454: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  454: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  463: LG_nmalloc: 47
method: LG_check_tri (&nt0, G, msg)
brutal test at line  463: LG_nmalloc: 47, succeeded with 7 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 20 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 10 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 25 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 16 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 30 mallocs
brutal test at line  473: LG_nmalloc: 47
method: LAGraph_TriangleCount_Methods (&nt1, G, method, &s, msg)
brutal test at line  473: LG_nmalloc: 47, succeeded with 22 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   1.00 sec
----------------------------------------------------------
Test Passed.
"ctest_TriangleCount" end time: Dec 07 10:31 EST
"ctest_TriangleCount" time elapsed: 00:00:00
----------------------------------------------------------

27/40 Testing: ctest_TypeName
27/40 Test: ctest_TypeName
Command: "/home/afanasyev/LAGraph/build/src/test/test_TypeName"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_TypeName" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test TypeName...                                
msg: type is NULL
msg: type is NULL
msg: name is NULL
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_TypeName" end time: Dec 07 10:31 EST
"ctest_TypeName" time elapsed: 00:00:00
----------------------------------------------------------

28/40 Testing: ctest_Vector_print
28/40 Test: ctest_Vector_print
Command: "/home/afanasyev/LAGraph/build/src/test/test_Vector_print"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Vector_print" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_print...                              
GrB_BOOL vector: n: 40 entries: 40
    (0)   1
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_INT8 vector: n: 40 entries: 40
    (0)   -8
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_INT16 vector: n: 40 entries: 40
    (0)   -16
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_INT32 vector: n: 40 entries: 40
    (0)   -32
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_INT64 vector: n: 40 entries: 40
    (0)   -64
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_UINT8 vector: n: 40 entries: 40
    (0)   8
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_UINT16 vector: n: 40 entries: 40
    (0)   16
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_UINT32 vector: n: 40 entries: 40
    (0)   32
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_UINT64 vector: n: 40 entries: 40
    (0)   64
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_FP32 vector: n: 40 entries: 40
    (0)   3.14159
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
GrB_FP64 vector: n: 40 entries: 40
    (0)   99.999
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
[ OK ]
Test test_print_brutal...                       
brutal test at line  124: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_BOOL vector: n: 40 entries: 40
GrB_BOOL vector: n: 40 entries: 40
GrB_BOOL vector: n: 40 entries: 40
    (0)   1
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  124: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  131: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_INT8 vector: n: 40 entries: 40
GrB_INT8 vector: n: 40 entries: 40
GrB_INT8 vector: n: 40 entries: 40
    (0)   -8
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  131: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  138: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_INT16 vector: n: 40 entries: 40
GrB_INT16 vector: n: 40 entries: 40
GrB_INT16 vector: n: 40 entries: 40
    (0)   -16
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  138: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  145: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_INT32 vector: n: 40 entries: 40
GrB_INT32 vector: n: 40 entries: 40
GrB_INT32 vector: n: 40 entries: 40
    (0)   -32
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  145: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  152: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_INT64 vector: n: 40 entries: 40
GrB_INT64 vector: n: 40 entries: 40
GrB_INT64 vector: n: 40 entries: 40
    (0)   -64
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  152: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  159: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_UINT8 vector: n: 40 entries: 40
GrB_UINT8 vector: n: 40 entries: 40
GrB_UINT8 vector: n: 40 entries: 40
    (0)   8
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  159: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  166: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_UINT16 vector: n: 40 entries: 40
GrB_UINT16 vector: n: 40 entries: 40
GrB_UINT16 vector: n: 40 entries: 40
    (0)   16
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  166: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  173: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_UINT32 vector: n: 40 entries: 40
GrB_UINT32 vector: n: 40 entries: 40
GrB_UINT32 vector: n: 40 entries: 40
    (0)   32
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  173: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  180: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_UINT64 vector: n: 40 entries: 40
GrB_UINT64 vector: n: 40 entries: 40
GrB_UINT64 vector: n: 40 entries: 40
    (0)   64
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  180: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  187: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_FP32 vector: n: 40 entries: 40
GrB_FP32 vector: n: 40 entries: 40
GrB_FP32 vector: n: 40 entries: 40
    (0)   3.14159
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  187: LG_nmalloc: 43, succeeded with 2 mallocs
brutal test at line  194: LG_nmalloc: 43
method: LAGraph_Vector_print (v, 2, stdout, msg)
GrB_FP64 vector: n: 40 entries: 40
GrB_FP64 vector: n: 40 entries: 40
GrB_FP64 vector: n: 40 entries: 40
    (0)   99.999
    (1)   0
    (2)   0
    (3)   0
    (4)   0
    (5)   0
    (6)   0
    (7)   0
    (8)   0
    (9)   0
    (10)   0
    (11)   0
    (12)   0
    (13)   0
    (14)   0
    (15)   0
    (16)   0
    (17)   0
    (18)   0
    (19)   0
    (20)   0
    (21)   0
    (22)   0
    (23)   0
    (24)   0
    (25)   0
    (26)   0
    (27)   0
    (28)   0
    (29)   0
    ...
brutal test at line  194: LG_nmalloc: 43, succeeded with 2 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Vector_print" end time: Dec 07 10:31 EST
"ctest_Vector_print" time elapsed: 00:00:00
----------------------------------------------------------

29/40 Testing: ctest_Xinit
29/40 Test: ctest_Xinit
Command: "/home/afanasyev/LAGraph/build/src/test/test_Xinit"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_Xinit" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Xinit...                                   
Testing LAGraph_Xinit:
msg: 
msg: 
msg: 
msg: []
msg: 
[ OK ]
Test Xinit_brutal...                            
GxB_init, finally: 2 0
LAGraph_Xinit: finally: 41 0
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Xinit" end time: Dec 07 10:31 EST
"ctest_Xinit" time elapsed: 00:00:00
----------------------------------------------------------

30/40 Testing: ctest_acutest
30/40 Test: ctest_acutest
Command: "/home/afanasyev/LAGraph/build/src/test/test_acutest"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_acutest" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test dummy...                                   [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_acutest" end time: Dec 07 10:31 EST
"ctest_acutest" time elapsed: 00:00:00
----------------------------------------------------------

31/40 Testing: ctest_export
31/40 Test: ctest_export
Command: "/home/afanasyev/LAGraph/build/src/test/test_export"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_export" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_export...                             
Matrix: A.mtx
reimport and check result

Matrix: cover.mtx
reimport and check result

Matrix: jagmesh7.mtx
reimport and check result

Matrix: ldbc-cdlp-directed-example.mtx
reimport and check result

Matrix: ldbc-cdlp-undirected-example.mtx
reimport and check result

Matrix: ldbc-directed-example.mtx
reimport and check result

Matrix: ldbc-undirected-example.mtx
reimport and check result

Matrix: ldbc-wcc-example.mtx
reimport and check result

Matrix: LFAT5.mtx
reimport and check result

Matrix: msf1.mtx
reimport and check result

Matrix: msf2.mtx
reimport and check result

Matrix: msf3.mtx
reimport and check result

Matrix: sample2.mtx
reimport and check result

Matrix: sample.mtx
reimport and check result

Matrix: olm1000.mtx
reimport and check result

Matrix: bcsstk13.mtx
reimport and check result

Matrix: cryg2500.mtx
reimport and check result

Matrix: tree-example.mtx
reimport and check result

Matrix: west0067.mtx
reimport and check result

Matrix: karate.mtx
reimport and check result

Matrix: matrix_bool.mtx
reimport and check result

Matrix: matrix_int8.mtx
reimport and check result

Matrix: matrix_int16.mtx
reimport and check result

Matrix: matrix_int32.mtx
reimport and check result

Matrix: matrix_int64.mtx
reimport and check result

Matrix: matrix_uint8.mtx
reimport and check result

Matrix: matrix_uint16.mtx
reimport and check result

Matrix: matrix_int32.mtx
reimport and check result

Matrix: matrix_uint64.mtx
reimport and check result

Matrix: skew_fp32.mtx
reimport and check result

Matrix: pushpull.mtx
reimport and check result
[ OK ]
Test test_export_brutal...                      
Matrix: A.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: cover.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: jagmesh7.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: ldbc-cdlp-directed-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: ldbc-cdlp-undirected-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: ldbc-directed-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: ldbc-undirected-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: ldbc-wcc-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: LFAT5.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: msf1.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: msf2.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: msf3.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: sample2.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: sample.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: olm1000.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: bcsstk13.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: cryg2500.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: tree-example.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 7 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: west0067.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: karate.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs

Matrix: matrix_bool.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_int8.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_int16.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_int32.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_int64.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_uint8.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_uint16.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_int32.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: matrix_uint64.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: skew_fp32.mtx
brutal test at line  173: LG_nmalloc: 45
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 48, succeeded with 8 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 49
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 49, succeeded with 8 mallocs

Matrix: pushpull.mtx
brutal test at line  173: LG_nmalloc: 46
method: LG_check_export (G, &Ap, &Aj, &Ax, &Ap_len, &Aj_len, &Ax_len, &typesize, msg)
brutal test at line  173: LG_nmalloc: 49, succeeded with 3 mallocs
reimport and check result
brutal test at line  186: LG_nmalloc: 50
method: LAGraph_IsEqual (&ok, G->A, C, msg)
brutal test at line  186: LG_nmalloc: 50, succeeded with 8 mallocs
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.27 sec
----------------------------------------------------------
Test Passed.
"ctest_export" end time: Dec 07 10:31 EST
"ctest_export" time elapsed: 00:00:00
----------------------------------------------------------

32/40 Testing: ctest_fopen
32/40 Test: ctest_fopen
Command: "/home/afanasyev/LAGraph/build/src/test/test_fopen"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_fopen" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test fopen...                                   
LAGraph source directory: [/home/afanasyev/LAGraph]
[%%MatrixMarket matrix coordinate pattern symmetric
]
[ OK ]
Test fopen_failure...                           [ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_fopen" end time: Dec 07 10:31 EST
"ctest_fopen" time elapsed: 00:00:00
----------------------------------------------------------

33/40 Testing: ctest_vector
33/40 Test: ctest_vector
Command: "/home/afanasyev/LAGraph/build/src/test/test_vector"
Directory: /home/afanasyev/LAGraph/build/src/test
"ctest_vector" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test vector...                                  [ OK ]
Test vector_brutal...                           
Finally: 23
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_vector" end time: Dec 07 10:31 EST
"ctest_vector" time elapsed: 00:00:00
----------------------------------------------------------

34/40 Testing: ctest_AllKtruss
34/40 Test: ctest_AllKtruss
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_AllKtruss"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_AllKtruss" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test allktruss...                               
================================== A.mtx:
all k-truss: kmax 5

================================== jagmesh7.mtx:
graph has 1138 self edges
now has 0 self edges
all k-truss: kmax 4

================================== bcsstk13.mtx:
graph has 2003 self edges
now has 0 self edges
all k-truss: kmax 29

================================== karate.mtx:
all k-truss: kmax 6

================================== ldbc-cdlp-undirected-example.mtx:
all k-truss: kmax 5

================================== ldbc-undirected-example-bool.mtx:
all k-truss: kmax 4

================================== ldbc-undirected-example-unweighted.mtx:
all k-truss: kmax 4

================================== ldbc-undirected-example.mtx:
all k-truss: kmax 4

================================== ldbc-wcc-example.mtx:
all k-truss: kmax 5
[ OK ]
Test allktruss_errors...                        
result: -2 input(s) are NULL

result: -104 graph is NULL

result: -1004 G->ndiag must be zero

result: -1005 G->A must be symmetric
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.98 sec
----------------------------------------------------------
Test Passed.
"ctest_AllKtruss" end time: Dec 07 10:31 EST
"ctest_AllKtruss" time elapsed: 00:00:00
----------------------------------------------------------

35/40 Testing: ctest_BF
35/40 Test: ctest_BF
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_BF"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_BF" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test test_BF...                                 transpose     time: 0.000101302

==========input graph: nodes: 34 edges: 156 source node: 0
BF_full1      time: 4.658218e-03 (sec), rate: 0.0334892 (1e6 edges/sec)
BF_full1a     time: 1.907811e-03 (sec), rate: 0.0817691 (1e6 edges/sec)
BF_full2      time: 1.277354e-03 (sec), rate: 0.122127 (1e6 edges/sec)
BF_full       time: 1.016714e-03 (sec), rate: 0.153436 (1e6 edges/sec)
t(BF_full1) / t(BF_full):      4.58164

Matrix: karate.mtx
GrB_BOOL matrix: 34-by-34 entries: 156
    (0, 1)   1
    (0, 2)   1
    (0, 3)   1
    (0, 4)   1
    (0, 5)   1
    (0, 6)   1
    (0, 7)   1
    (0, 8)   1
    (0, 10)   1
    (0, 11)   1
    (0, 12)   1
    (0, 13)   1
    (0, 17)   1
    (0, 19)   1
    (0, 21)   1
    (0, 31)   1
    (1, 0)   1
    (1, 2)   1
    (1, 3)   1
    (1, 7)   1
    (1, 13)   1
    (1, 17)   1
    (1, 19)   1
    (1, 21)   1
    (1, 30)   1
    (2, 0)   1
    (2, 1)   1
    (2, 3)   1
    (2, 7)   1
    (2, 8)   1
    ...
nthreads 96
result: 0
nthreads 96
nthreads 96
nthreads 96
result 0
BF_basic      time: 7.143989e-05 (sec), rate: 2.18365 (1e6 edges/sec)
speedup of BF_basic:       14.2317
BF_pure_c_double  : 3.147870e-06 (sec), rate: 49.5573 (1e6 edges/sec)
speedup of BF_pure_c:      322.985
BF_full_mxv   time: 1.064576e-04 (sec), rate: 1.46537 (1e6 edges/sec)
speedup of BF_full_mxv:    9.55041
BF_basic_mxv  time: 4.624948e-05 (sec), rate: 3.37301 (1e6 edges/sec)
speedup of BF_basic_mxv:   21.9832
transpose     time: 4.61303e-05

==========input graph: nodes: 67 edges: 294 source node: 0
BF_full1      time: 3.538985e-03 (sec), rate: 0.0830747 (1e6 edges/sec)
BF_full1a     time: 8.774858e-03 (sec), rate: 0.0335048 (1e6 edges/sec)
BF_full2      time: 2.758432e-03 (sec), rate: 0.106582 (1e6 edges/sec)
BF_full       time: 6.106928e-03 (sec), rate: 0.048142 (1e6 edges/sec)
t(BF_full1) / t(BF_full):      0.579503
pure_c integer:

Matrix: west0067.mtx
GrB_FP64 matrix: 67-by-67 entries: 294
    (0, 7)   -0.834182
    (0, 12)   1.26582
    (0, 17)   -0.336156
    (1, 8)   -0.834182
    (1, 13)   1.01266
    (1, 17)   -0.29392
    (2, 9)   -0.834182
    (2, 14)   0.759494
    (2, 17)   -0.221481
    (3, 10)   -0.834182
    (3, 15)   0.506329
    (3, 17)   -0.118986
    (4, 0)   -0.278842
    (4, 1)   -0.8
    (4, 6)   0.134462
    (4, 7)   0.4
    (4, 12)   0.4
    (5, 0)   -0.268019
    (5, 2)   -0.8
    (5, 6)   0.117568
    (5, 8)   0.4
    (5, 13)   0.4
    (6, 0)   -0.232372
    (6, 3)   -0.8
    (6, 6)   0.0885926
    (6, 9)   0.4
    (6, 14)   0.4
    (7, 0)   -0.157508
    (7, 4)   -0.8
    (7, 6)   0.0475944
    ...
nthreads 96
result: 1
nthreads 96
nthreads 96
nthreads 96
result 1
BF_basic      time: 6.723963e-04 (sec), rate: 0.437242 (1e6 edges/sec)
speedup of BF_basic:       9.08233
BF_pure_c_double  : 6.280839e-05 (sec), rate: 4.6809 (1e6 edges/sec)
speedup of BF_pure_c:      97.2311
BF_full_mxv   time: 1.121461e-03 (sec), rate: 0.262158 (1e6 edges/sec)
speedup of BF_full_mxv:    5.44551
BF_basic_mxv  time: 4.590340e-04 (sec), rate: 0.640475 (1e6 edges/sec)
speedup of BF_basic_mxv:   13.3039
BF_full1      time: 3.673717e-03 (sec), rate: 0.0800279 (1e6 edges/sec)
BF_full1a     time: 6.977458e-03 (sec), rate: 0.0421357 (1e6 edges/sec)
BF_full2      time: 2.979368e-03 (sec), rate: 0.0986786 (1e6 edges/sec)
BF_full       time: 7.802397e-03 (sec), rate: 0.0376807 (1e6 edges/sec)
t(BF_full1) / t(BF_full):      0.470845

-------------------------- A = abs (A)
nthreads 96
result: 0
nthreads 96
nthreads 96
nthreads 96
result 0
BF_basic      time: 9.591505e-05 (sec), rate: 3.06521 (1e6 edges/sec)
speedup of BF_basic:       81.347
BF_pure_c_double  : 4.179776e-06 (sec), rate: 70.3387 (1e6 edges/sec)
speedup of BF_pure_c:      1866.7
BF_full_mxv   time: 1.637526e-04 (sec), rate: 1.79539 (1e6 edges/sec)
speedup of BF_full_mxv:    47.6475
BF_basic_mxv  time: 6.249920e-05 (sec), rate: 4.70406 (1e6 edges/sec)
speedup of BF_basic_mxv:   124.84
transpose     time: 8.79169e-06

==========input graph: nodes: 7 edges: 12 source node: 0
BF_full1      time: 2.254747e-03 (sec), rate: 0.00532211 (1e6 edges/sec)
BF_full1a     time: 5.665760e-03 (sec), rate: 0.00211799 (1e6 edges/sec)
BF_full2      time: 2.769765e-03 (sec), rate: 0.0043325 (1e6 edges/sec)
BF_full       time: 8.618876e-03 (sec), rate: 0.00139229 (1e6 edges/sec)
t(BF_full1) / t(BF_full):      0.261606

Matrix: matrix_int8.mtx
GrB_INT8 matrix: 7-by-7 entries: 12
    (0, 1)   127
    (0, 3)   7
    (1, 4)   5
    (1, 6)   8
    (2, 5)   1
    (3, 0)   -128
    (3, 2)   0
    (4, 5)   7
    (5, 2)   5
    (6, 2)   9
    (6, 3)   1
    (6, 4)   1
nthreads 96
result: 1
nthreads 96
nthreads 96
nthreads 96
result 1
BF_basic      time: 5.764142e-05 (sec), rate: 0.208184 (1e6 edges/sec)
speedup of BF_basic:       149.526
BF_pure_c_double  : 1.709908e-06 (sec), rate: 7.01792 (1e6 edges/sec)
speedup of BF_pure_c:      5040.55
BF_full_mxv   time: 7.941201e-05 (sec), rate: 0.151111 (1e6 edges/sec)
speedup of BF_full_mxv:    108.534
BF_basic_mxv  time: 5.314127e-05 (sec), rate: 0.225813 (1e6 edges/sec)
speedup of BF_basic_mxv:   162.188
BF_full1      time: 1.904253e-03 (sec), rate: 0.00630168 (1e6 edges/sec)
BF_full1a     time: 9.010840e-03 (sec), rate: 0.00133173 (1e6 edges/sec)
BF_full2      time: 8.246314e-03 (sec), rate: 0.0014552 (1e6 edges/sec)
BF_full       time: 4.934434e-03 (sec), rate: 0.00243189 (1e6 edges/sec)
t(BF_full1) / t(BF_full):      0.385911
pure_c integer:

-------------------------- A = abs (A)
nthreads 96
result: 0
nthreads 96
nthreads 96
nthreads 96
result 0
BF_basic      time: 3.629923e-05 (sec), rate: 0.330586 (1e6 edges/sec)
speedup of BF_basic:       135.938
BF_pure_c_double  : 5.774200e-07 (sec), rate: 20.7821 (1e6 edges/sec)
speedup of BF_pure_c:      8545.66
BF_full_mxv   time: 7.149950e-05 (sec), rate: 0.167833 (1e6 edges/sec)
speedup of BF_full_mxv:    69.0135
BF_basic_mxv  time: 3.062934e-05 (sec), rate: 0.391781 (1e6 edges/sec)
speedup of BF_basic_mxv:   161.102
pure_c integer:
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.11 sec
----------------------------------------------------------
Test Passed.
"ctest_BF" end time: Dec 07 10:31 EST
"ctest_BF" time elapsed: 00:00:00
----------------------------------------------------------

36/40 Testing: ctest_KTruss
36/40 Test: ctest_KTruss
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_KTruss"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_KTruss" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test ktruss...                                  
================================== A.mtx:

3-truss:

4-truss:

5-truss:

================================== jagmesh7.mtx:
graph has 1138 self edges
now has 0 self edges

3-truss:

4-truss:

================================== karate.mtx:

3-truss:

4-truss:

5-truss:

6-truss:

================================== ldbc-cdlp-undirected-example.mtx:

3-truss:

4-truss:

5-truss:

================================== ldbc-undirected-example-bool.mtx:

3-truss:

4-truss:

================================== ldbc-undirected-example-unweighted.mtx:

3-truss:

4-truss:

================================== ldbc-undirected-example.mtx:

3-truss:

4-truss:

================================== ldbc-wcc-example.mtx:

3-truss:

4-truss:

5-truss:
[ OK ]
Test ktruss_errors...                           
result: -2 input(s) are NULL

result: -3 k invalid

result: -104 graph is NULL

result: -1004 G->ndiag must be zero

result: -1005 G->A must be symmetric
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"ctest_KTruss" end time: Dec 07 10:31 EST
"ctest_KTruss" time elapsed: 00:00:00
----------------------------------------------------------

37/40 Testing: ctest_MaximalIndependentSet
37/40 Test: ctest_MaximalIndependentSet
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_MaximalIndependentSet"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_MaximalIndependentSet" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test MIS...                                     
Matrix: A.mtx
maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 2 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 2 of 7 nodes
maximal independent set OK 1 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes
maximal independent set OK 2 of 7 nodes (1 nodes ignored)

maximal independent set OK 3 of 7 nodes

Matrix: jagmesh7.mtx
graph has 1138 self edges
now has 0 self edges
maximal independent set OK 303 of 1138 nodes
maximal independent set OK 286 of 1138 nodes (143 nodes ignored)

maximal independent set OK 306 of 1138 nodes
maximal independent set OK 287 of 1138 nodes (143 nodes ignored)

maximal independent set OK 300 of 1138 nodes
maximal independent set OK 287 of 1138 nodes (143 nodes ignored)

maximal independent set OK 306 of 1138 nodes
maximal independent set OK 287 of 1138 nodes (143 nodes ignored)

maximal independent set OK 308 of 1138 nodes
maximal independent set OK 289 of 1138 nodes (143 nodes ignored)

creating at least 114 singletons
actual # of singletons: 114
maximal independent set OK 406 of 1138 nodes
maximal independent set OK 365 of 1138 nodes (143 nodes ignored)

maximal independent set OK 403 of 1138 nodes
maximal independent set OK 365 of 1138 nodes (143 nodes ignored)

maximal independent set OK 394 of 1138 nodes
maximal independent set OK 362 of 1138 nodes (143 nodes ignored)

maximal independent set OK 402 of 1138 nodes
maximal independent set OK 359 of 1138 nodes (143 nodes ignored)

maximal independent set OK 396 of 1138 nodes
maximal independent set OK 358 of 1138 nodes (143 nodes ignored)

maximal independent set OK 406 of 1138 nodes

Matrix: bcsstk13.mtx
graph has 2003 self edges
now has 0 self edges
maximal independent set OK 196 of 2003 nodes
maximal independent set OK 192 of 2003 nodes (251 nodes ignored)

maximal independent set OK 189 of 2003 nodes
maximal independent set OK 178 of 2003 nodes (251 nodes ignored)

maximal independent set OK 189 of 2003 nodes
maximal independent set OK 186 of 2003 nodes (251 nodes ignored)

maximal independent set OK 200 of 2003 nodes
maximal independent set OK 180 of 2003 nodes (251 nodes ignored)

maximal independent set OK 199 of 2003 nodes
maximal independent set OK 192 of 2003 nodes (251 nodes ignored)

creating at least 201 singletons
actual # of singletons: 201
maximal independent set OK 392 of 2003 nodes
maximal independent set OK 338 of 2003 nodes (251 nodes ignored)

maximal independent set OK 381 of 2003 nodes
maximal independent set OK 323 of 2003 nodes (251 nodes ignored)

maximal independent set OK 388 of 2003 nodes
maximal independent set OK 329 of 2003 nodes (251 nodes ignored)

maximal independent set OK 393 of 2003 nodes
maximal independent set OK 323 of 2003 nodes (251 nodes ignored)

maximal independent set OK 390 of 2003 nodes
maximal independent set OK 333 of 2003 nodes (251 nodes ignored)

maximal independent set OK 392 of 2003 nodes

Matrix: karate.mtx
maximal independent set OK 18 of 34 nodes
maximal independent set OK 17 of 34 nodes (5 nodes ignored)

maximal independent set OK 20 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

maximal independent set OK 20 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

maximal independent set OK 20 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

maximal independent set OK 20 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

creating at least 4 singletons
actual # of singletons: 5
maximal independent set OK 21 of 34 nodes
maximal independent set OK 18 of 34 nodes (5 nodes ignored)

maximal independent set OK 23 of 34 nodes
maximal independent set OK 21 of 34 nodes (5 nodes ignored)

maximal independent set OK 23 of 34 nodes
maximal independent set OK 21 of 34 nodes (5 nodes ignored)

maximal independent set OK 22 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

maximal independent set OK 22 of 34 nodes
maximal independent set OK 20 of 34 nodes (5 nodes ignored)

maximal independent set OK 21 of 34 nodes

Matrix: ldbc-cdlp-undirected-example.mtx
maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 2 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 2 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 2 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes

Matrix: ldbc-cdlp-directed-example.mtx
maximal independent set OK 2 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 2 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes

Matrix: ldbc-undirected-example-bool.mtx
maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes

Matrix: ldbc-undirected-example-unweighted.mtx
maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes

Matrix: ldbc-undirected-example.mtx
maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 4 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes
maximal independent set OK 3 of 9 nodes (2 nodes ignored)

maximal independent set OK 5 of 9 nodes

Matrix: ldbc-wcc-example.mtx
maximal independent set OK 5 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 5 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 5 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 5 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 5 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 6 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 6 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 6 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 6 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 6 of 10 nodes
maximal independent set OK 4 of 10 nodes (2 nodes ignored)

maximal independent set OK 6 of 10 nodes

Matrix: LFAT5.mtx
graph has 14 self edges
now has 0 self edges
maximal independent set OK 7 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 6 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 7 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 6 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 7 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

creating at least 2 singletons
actual # of singletons: 2
maximal independent set OK 8 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 9 of 14 nodes
maximal independent set OK 8 of 14 nodes (2 nodes ignored)

maximal independent set OK 8 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 9 of 14 nodes
maximal independent set OK 8 of 14 nodes (2 nodes ignored)

maximal independent set OK 8 of 14 nodes
maximal independent set OK 7 of 14 nodes (2 nodes ignored)

maximal independent set OK 8 of 14 nodes

Matrix: LFAT5_two.mtx
graph has 28 self edges
now has 0 self edges
maximal independent set OK 13 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 13 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 14 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 13 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 13 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

creating at least 3 singletons
actual # of singletons: 5
maximal independent set OK 16 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 16 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 16 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 17 of 28 nodes
maximal independent set OK 14 of 28 nodes (4 nodes ignored)

maximal independent set OK 16 of 28 nodes
maximal independent set OK 13 of 28 nodes (4 nodes ignored)

maximal independent set OK 16 of 28 nodes

Matrix: cryg2500.mtx
graph has 2500 self edges
now has 0 self edges
maximal independent set OK 830 of 2500 nodes
maximal independent set OK 770 of 2500 nodes (313 nodes ignored)

maximal independent set OK 830 of 2500 nodes
maximal independent set OK 770 of 2500 nodes (313 nodes ignored)

maximal independent set OK 830 of 2500 nodes
maximal independent set OK 770 of 2500 nodes (313 nodes ignored)

maximal independent set OK 829 of 2500 nodes
maximal independent set OK 768 of 2500 nodes (313 nodes ignored)

maximal independent set OK 830 of 2500 nodes
maximal independent set OK 770 of 2500 nodes (313 nodes ignored)

creating at least 250 singletons
actual # of singletons: 250
maximal independent set OK 1049 of 2500 nodes
maximal independent set OK 925 of 2500 nodes (313 nodes ignored)

maximal independent set OK 1050 of 2500 nodes
maximal independent set OK 925 of 2500 nodes (313 nodes ignored)

maximal independent set OK 1048 of 2500 nodes
maximal independent set OK 924 of 2500 nodes (313 nodes ignored)

maximal independent set OK 1048 of 2500 nodes
maximal independent set OK 923 of 2500 nodes (313 nodes ignored)

maximal independent set OK 1048 of 2500 nodes
maximal independent set OK 923 of 2500 nodes (313 nodes ignored)

maximal independent set OK 1049 of 2500 nodes

Matrix: msf2.mtx
maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

creating at least 1 singletons
actual # of singletons: 1
maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 3 of 8 nodes
maximal independent set OK 2 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes
maximal independent set OK 3 of 8 nodes (1 nodes ignored)

maximal independent set OK 4 of 8 nodes

Matrix: olm1000.mtx
graph has 1000 self edges
now has 0 self edges
maximal independent set OK 487 of 1000 nodes
maximal independent set OK 491 of 1000 nodes (125 nodes ignored)

maximal independent set OK 493 of 1000 nodes
maximal independent set OK 497 of 1000 nodes (125 nodes ignored)

maximal independent set OK 494 of 1000 nodes
maximal independent set OK 494 of 1000 nodes (125 nodes ignored)

maximal independent set OK 488 of 1000 nodes
maximal independent set OK 496 of 1000 nodes (125 nodes ignored)

maximal independent set OK 496 of 1000 nodes
maximal independent set OK 498 of 1000 nodes (125 nodes ignored)

creating at least 100 singletons
actual # of singletons: 100
maximal independent set OK 589 of 1000 nodes
maximal independent set OK 572 of 1000 nodes (125 nodes ignored)

maximal independent set OK 593 of 1000 nodes
maximal independent set OK 572 of 1000 nodes (125 nodes ignored)

maximal independent set OK 596 of 1000 nodes
maximal independent set OK 571 of 1000 nodes (125 nodes ignored)

maximal independent set OK 592 of 1000 nodes
maximal independent set OK 573 of 1000 nodes (125 nodes ignored)

maximal independent set OK 598 of 1000 nodes
maximal independent set OK 573 of 1000 nodes (125 nodes ignored)

maximal independent set OK 589 of 1000 nodes

Matrix: west0067.mtx
graph has 2 self edges
now has 0 self edges
maximal independent set OK 18 of 67 nodes
maximal independent set OK 16 of 67 nodes (9 nodes ignored)

maximal independent set OK 16 of 67 nodes
maximal independent set OK 15 of 67 nodes (9 nodes ignored)

maximal independent set OK 17 of 67 nodes
maximal independent set OK 15 of 67 nodes (9 nodes ignored)

maximal independent set OK 16 of 67 nodes
maximal independent set OK 15 of 67 nodes (9 nodes ignored)

maximal independent set OK 17 of 67 nodes
maximal independent set OK 15 of 67 nodes (9 nodes ignored)

creating at least 7 singletons
actual # of singletons: 7
maximal independent set OK 25 of 67 nodes
maximal independent set OK 22 of 67 nodes (9 nodes ignored)

maximal independent set OK 22 of 67 nodes
maximal independent set OK 23 of 67 nodes (9 nodes ignored)

maximal independent set OK 24 of 67 nodes
maximal independent set OK 20 of 67 nodes (9 nodes ignored)

maximal independent set OK 23 of 67 nodes
maximal independent set OK 20 of 67 nodes (9 nodes ignored)

maximal independent set OK 24 of 67 nodes
maximal independent set OK 21 of 67 nodes (9 nodes ignored)

maximal independent set OK 25 of 67 nodes
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.22 sec
----------------------------------------------------------
Test Passed.
"ctest_MaximalIndependentSet" end time: Dec 07 10:31 EST
"ctest_MaximalIndependentSet" time elapsed: 00:00:00
----------------------------------------------------------

38/40 Testing: ctest_Random
38/40 Test: ctest_Random
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_Random"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_Random" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test Random...                                  
=============================== seed: 42

Dense random seed:
GrB_INT64 vector: n: 8 entries: 8
    (0)   -8906403069397274377
    (1)   -2833770890351494860
    (2)   3238861288694284657
    (3)   -9135250605969487442
    (4)   -3062618426923707925
    (5)   3010013752122071592
    (6)   9082645931167851109
    (7)   -3291465963495920990

Dense random int64:
GrB_INT64 vector: n: 8 entries: 8
    (0)   -1911501690327216603
    (1)   730608645951111483
    (2)   3372718982229439569
    (3)   1403319220867049319
    (4)   2892613603507214975
    (5)   4381943167298440596
    (6)   8176834277137580203
    (7)   -8780615413931740222

Dense random double:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.895180241741291
    (1)   0.785013011997221
    (2)   0.549861040460146
    (3)   0.377199532587353
    (4)   0.142047560992073
    (5)   0.969387960235089
    (6)   0.546739803453485
    (7)   0.311585924625985

Dense random float:
GrB_FP32 vector: n: 8 entries: 8
    (0)   0.08954209
    (1)   0.4261635
    (2)   0.4503002
    (3)   0.4744407
    (4)   0.748566
    (5)   0.8351989
    (6)   0.8593355
    (7)   0.1959551

Sparse random seed:
GrB_INT64 vector: n: 8 entries: 4
    (0)   -8906403069397274377
    (2)   3238861288694284657
    (4)   -3062618426923707925
    (6)   9082645931167851109

Sparse random int64:
GrB_INT64 vector: n: 8 entries: 4
    (0)   -1911501690327216603
    (2)   3372718982229439569
    (4)   2892613603507214975
    (6)   8176834277137580203

Sparse random double: n 8
GrB_FP64 vector: n: 8 entries: 4
    (0)   0.895180241741291
    (2)   0.549861040460146
    (4)   0.142047560992073
    (6)   0.546739803453485

Sparse random float: n 8
GrB_FP32 vector: n: 8 entries: 4
    (0)   0.08954209
    (2)   0.4503002
    (4)   0.748566
    (6)   0.8593355

=============================== seed: 987

Dense random seed:
GrB_INT64 vector: n: 8 entries: 8
    (0)   -7206400794806183388
    (1)   -1133768615760403871
    (2)   4938863563285375646
    (3)   -7435248331378396453
    (4)   -1362616152332616936
    (5)   4710016026713162581
    (6)   -7664095867950609518
    (7)   -1591463688904830001

Dense random int64:
GrB_INT64 vector: n: 8 entries: 8
    (0)   -4587267451938298877
    (1)   -6556632032149792998
    (2)   -5067337648435852751
    (3)   -3578008085718336186
    (4)   216847842969841757
    (5)   1706177406761034611
    (6)   3195471788327589514
    (7)   2378887982750648737

Dense random double:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.672722078085801
    (1)   0.250072014071976
    (2)   0.0149200424766967
    (3)   0.904752812790831
    (4)   0.669600841195551
    (5)   0.43444696236805
    (6)   0.261787361727477
    (7)   0.089127760970493

Dense random float:
GrB_FP32 vector: n: 8 entries: 8
    (0)   0.8320618
    (1)   0.8562004
    (2)   0.8803371
    (3)   0.1544643
    (4)   0.2410971
    (5)   0.2652358
    (6)   0.6018534
    (7)   0.625992

Sparse random seed:
GrB_INT64 vector: n: 8 entries: 4
    (0)   -7206400794806183388
    (2)   4938863563285375646
    (4)   -1362616152332616936
    (6)   -7664095867950609518

Sparse random int64:
GrB_INT64 vector: n: 8 entries: 4
    (0)   -4587267451938298877
    (2)   -5067337648435852751
    (4)   216847842969841757
    (6)   3195471788327589514

Sparse random double: n 8
GrB_FP64 vector: n: 8 entries: 4
    (0)   0.672722078085801
    (2)   0.0149200424766967
    (4)   0.669600841195551
    (6)   0.261787361727477

Sparse random float: n 8
GrB_FP32 vector: n: 8 entries: 4
    (0)   0.8320618
    (2)   0.8803371
    (4)   0.2410971
    (6)   0.6018534
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.00 sec
----------------------------------------------------------
Test Passed.
"ctest_Random" end time: Dec 07 10:31 EST
"ctest_Random" time elapsed: 00:00:00
----------------------------------------------------------

39/40 Testing: ctest_TriangleCentrality
39/40 Test: ctest_TriangleCentrality
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_TriangleCentrality"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_TriangleCentrality" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test TriangleCentrality...                      
================================== A.mtx:

Method: 0
# of triangles: 11

centrality:
GrB_FP64 vector: n: 7 entries: 7
    (0)   0.575758
    (1)   0.848485
    (2)   0.939394
    (3)   0.939394
    (4)   0.575758
    (5)   0.878788
    (6)   0.848485

Method: 1
# of triangles: 11

centrality:
GrB_FP64 vector: n: 7 entries: 7
    (0)   0.575758
    (1)   0.848485
    (2)   0.939394
    (3)   0.939394
    (4)   0.575758
    (5)   0.878788
    (6)   0.848485

Method: 2
# of triangles: 11

centrality:
GrB_FP64 vector: n: 7 entries: 7
    (0)   0.575758
    (1)   0.848485
    (2)   0.939394
    (3)   0.939394
    (4)   0.575758
    (5)   0.878788
    (6)   0.848485

Method: 3
# of triangles: 11

centrality:
GrB_FP64 vector: n: 7 entries: 7
    (0)   0.575758
    (1)   0.848485
    (2)   0.939394
    (3)   0.939394
    (4)   0.575758
    (5)   0.878788
    (6)   0.848485

================================== jagmesh7.mtx:
graph has 1138 self edges
now has 0 self edges

Method: 0
# of triangles: 2016

centrality:
GrB_FP64 vector: n: 1138 entries: 1138
    (0)   0.00347222
    (1)   0.00595238
    (2)   0.00694444
    (3)   0.00694444
    (4)   0.00694444
    (5)   0.00595238
    (6)   0.00347222
    (7)   0.00595238
    (8)   0.00694444
    (9)   0.00694444
    (10)   0.00694444
    (11)   0.00595238
    (12)   0.00347222
    (13)   0.00347222
    (14)   0.00347222
    (15)   0.00347222
    (16)   0.00347222
    (17)   0.00347222
    (18)   0.00595238
    (19)   0.00694444
    (20)   0.00694444
    (21)   0.00694444
    (22)   0.00595238
    (23)   0.00694444
    (24)   0.00694444
    (25)   0.00595238
    (26)   0.00694444
    (27)   0.00595238
    (28)   0.00595238
    (29)   0.00694444
    ...

Method: 1
# of triangles: 2016

centrality:
GrB_FP64 vector: n: 1138 entries: 1138
    (0)   0.00347222
    (1)   0.00595238
    (2)   0.00694444
    (3)   0.00694444
    (4)   0.00694444
    (5)   0.00595238
    (6)   0.00347222
    (7)   0.00595238
    (8)   0.00694444
    (9)   0.00694444
    (10)   0.00694444
    (11)   0.00595238
    (12)   0.00347222
    (13)   0.00347222
    (14)   0.00347222
    (15)   0.00347222
    (16)   0.00347222
    (17)   0.00347222
    (18)   0.00595238
    (19)   0.00694444
    (20)   0.00694444
    (21)   0.00694444
    (22)   0.00595238
    (23)   0.00694444
    (24)   0.00694444
    (25)   0.00595238
    (26)   0.00694444
    (27)   0.00595238
    (28)   0.00595238
    (29)   0.00694444
    ...

Method: 2
# of triangles: 2016

centrality:
GrB_FP64 vector: n: 1138 entries: 1138
    (0)   0.00347222
    (1)   0.00595238
    (2)   0.00694444
    (3)   0.00694444
    (4)   0.00694444
    (5)   0.00595238
    (6)   0.00347222
    (7)   0.00595238
    (8)   0.00694444
    (9)   0.00694444
    (10)   0.00694444
    (11)   0.00595238
    (12)   0.00347222
    (13)   0.00347222
    (14)   0.00347222
    (15)   0.00347222
    (16)   0.00347222
    (17)   0.00347222
    (18)   0.00595238
    (19)   0.00694444
    (20)   0.00694444
    (21)   0.00694444
    (22)   0.00595238
    (23)   0.00694444
    (24)   0.00694444
    (25)   0.00595238
    (26)   0.00694444
    (27)   0.00595238
    (28)   0.00595238
    (29)   0.00694444
    ...

Method: 3
# of triangles: 2016

centrality:
GrB_FP64 vector: n: 1138 entries: 1138
    (0)   0.00347222
    (1)   0.00595238
    (2)   0.00694444
    (3)   0.00694444
    (4)   0.00694444
    (5)   0.00595238
    (6)   0.00347222
    (7)   0.00595238
    (8)   0.00694444
    (9)   0.00694444
    (10)   0.00694444
    (11)   0.00595238
    (12)   0.00347222
    (13)   0.00347222
    (14)   0.00347222
    (15)   0.00347222
    (16)   0.00347222
    (17)   0.00347222
    (18)   0.00595238
    (19)   0.00694444
    (20)   0.00694444
    (21)   0.00694444
    (22)   0.00595238
    (23)   0.00694444
    (24)   0.00694444
    (25)   0.00595238
    (26)   0.00694444
    (27)   0.00595238
    (28)   0.00595238
    (29)   0.00694444
    ...

================================== bcsstk13.mtx:
graph has 2003 self edges
now has 0 self edges

Method: 0
# of triangles: 342300

centrality:
GrB_FP64 vector: n: 2003 entries: 2003
    (0)   0.00827247
    (1)   0.00769208
    (2)   0.00478528
    (3)   0.00720615
    (4)   0.00791119
    (5)   0.00763365
    (6)   0.0124141
    (7)   0.0124141
    (8)   0.00769111
    (9)   0.0117879
    (10)   0.0117879
    (11)   0.0113429
    (12)   0.0144649
    (13)   0.0144649
    (14)   0.00895706
    (15)   0.0137589
    (16)   0.0137589
    (17)   0.0132545
    (18)   0.0128036
    (19)   0.0128036
    (20)   0.00797936
    (21)   0.0121258
    (22)   0.0121258
    (23)   0.0116779
    (24)   0.00836303
    (25)   0.00807089
    (26)   0.00505794
    (27)   0.00753335
    (28)   0.00795014
    (29)   0.00766969
    ...

Method: 1
# of triangles: 342300

centrality:
GrB_FP64 vector: n: 2003 entries: 2003
    (0)   0.00827247
    (1)   0.00769208
    (2)   0.00478528
    (3)   0.00720615
    (4)   0.00791119
    (5)   0.00763365
    (6)   0.0124141
    (7)   0.0124141
    (8)   0.00769111
    (9)   0.0117879
    (10)   0.0117879
    (11)   0.0113429
    (12)   0.0144649
    (13)   0.0144649
    (14)   0.00895706
    (15)   0.0137589
    (16)   0.0137589
    (17)   0.0132545
    (18)   0.0128036
    (19)   0.0128036
    (20)   0.00797936
    (21)   0.0121258
    (22)   0.0121258
    (23)   0.0116779
    (24)   0.00836303
    (25)   0.00807089
    (26)   0.00505794
    (27)   0.00753335
    (28)   0.00795014
    (29)   0.00766969
    ...

Method: 2
# of triangles: 342300

centrality:
GrB_FP64 vector: n: 2003 entries: 2003
    (0)   0.00827247
    (1)   0.00769208
    (2)   0.00478528
    (3)   0.00720615
    (4)   0.00791119
    (5)   0.00763365
    (6)   0.0124141
    (7)   0.0124141
    (8)   0.00769111
    (9)   0.0117879
    (10)   0.0117879
    (11)   0.0113429
    (12)   0.0144649
    (13)   0.0144649
    (14)   0.00895706
    (15)   0.0137589
    (16)   0.0137589
    (17)   0.0132545
    (18)   0.0128036
    (19)   0.0128036
    (20)   0.00797936
    (21)   0.0121258
    (22)   0.0121258
    (23)   0.0116779
    (24)   0.00836303
    (25)   0.00807089
    (26)   0.00505794
    (27)   0.00753335
    (28)   0.00795014
    (29)   0.00766969
    ...

Method: 3
# of triangles: 342300

centrality:
GrB_FP64 vector: n: 2003 entries: 2003
    (0)   0.00827247
    (1)   0.00769208
    (2)   0.00478528
    (3)   0.00720615
    (4)   0.00791119
    (5)   0.00763365
    (6)   0.0124141
    (7)   0.0124141
    (8)   0.00769111
    (9)   0.0117879
    (10)   0.0117879
    (11)   0.0113429
    (12)   0.0144649
    (13)   0.0144649
    (14)   0.00895706
    (15)   0.0137589
    (16)   0.0137589
    (17)   0.0132545
    (18)   0.0128036
    (19)   0.0128036
    (20)   0.00797936
    (21)   0.0121258
    (22)   0.0121258
    (23)   0.0116779
    (24)   0.00836303
    (25)   0.00807089
    (26)   0.00505794
    (27)   0.00753335
    (28)   0.00795014
    (29)   0.00766969
    ...

================================== karate.mtx:

Method: 0
# of triangles: 45

centrality:
GrB_FP64 vector: n: 34 entries: 34
    (0)   0.674074
    (1)   0.555556
    (2)   0.644444
    (3)   0.474074
    (4)   0.185185
    (5)   0.2
    (6)   0.2
    (7)   0.422222
    (8)   0.481481
    (9)   0.577778
    (10)   0.185185
    (11)   0.4
    (12)   0.214815
    (13)   0.755556
    (14)   0.214815
    (15)   0.214815
    (16)   0.0518519
    (17)   0.22963
    (18)   0.214815
    (19)   0.562963
    (20)   0.214815
    (21)   0.22963
    (22)   0.214815
    (23)   0.296296
    (24)   0.0592593
    (25)   0.125926
    (26)   0.148148
    (27)   0.414815
    (28)   0.385185
    (29)   0.274074
    (30)   0.533333
    (31)   0.651852
    (32)   0.466667
    (33)   0.562963

Method: 1
# of triangles: 45

centrality:
GrB_FP64 vector: n: 34 entries: 34
    (0)   0.674074
    (1)   0.555556
    (2)   0.644444
    (3)   0.474074
    (4)   0.185185
    (5)   0.2
    (6)   0.2
    (7)   0.422222
    (8)   0.481481
    (9)   0.577778
    (10)   0.185185
    (11)   0.4
    (12)   0.214815
    (13)   0.755556
    (14)   0.214815
    (15)   0.214815
    (16)   0.0518519
    (17)   0.22963
    (18)   0.214815
    (19)   0.562963
    (20)   0.214815
    (21)   0.22963
    (22)   0.214815
    (23)   0.296296
    (24)   0.0592593
    (25)   0.125926
    (26)   0.148148
    (27)   0.414815
    (28)   0.385185
    (29)   0.274074
    (30)   0.533333
    (31)   0.651852
    (32)   0.466667
    (33)   0.562963

Method: 2
# of triangles: 45

centrality:
GrB_FP64 vector: n: 34 entries: 34
    (0)   0.674074
    (1)   0.555556
    (2)   0.644444
    (3)   0.474074
    (4)   0.185185
    (5)   0.2
    (6)   0.2
    (7)   0.422222
    (8)   0.481481
    (9)   0.577778
    (10)   0.185185
    (11)   0.4
    (12)   0.214815
    (13)   0.755556
    (14)   0.214815
    (15)   0.214815
    (16)   0.0518519
    (17)   0.22963
    (18)   0.214815
    (19)   0.562963
    (20)   0.214815
    (21)   0.22963
    (22)   0.214815
    (23)   0.296296
    (24)   0.0592593
    (25)   0.125926
    (26)   0.148148
    (27)   0.414815
    (28)   0.385185
    (29)   0.274074
    (30)   0.533333
    (31)   0.651852
    (32)   0.466667
    (33)   0.562963

Method: 3
# of triangles: 45

centrality:
GrB_FP64 vector: n: 34 entries: 34
    (0)   0.674074
    (1)   0.555556
    (2)   0.644444
    (3)   0.474074
    (4)   0.185185
    (5)   0.2
    (6)   0.2
    (7)   0.422222
    (8)   0.481481
    (9)   0.577778
    (10)   0.185185
    (11)   0.4
    (12)   0.214815
    (13)   0.755556
    (14)   0.214815
    (15)   0.214815
    (16)   0.0518519
    (17)   0.22963
    (18)   0.214815
    (19)   0.562963
    (20)   0.214815
    (21)   0.22963
    (22)   0.214815
    (23)   0.296296
    (24)   0.0592593
    (25)   0.125926
    (26)   0.148148
    (27)   0.414815
    (28)   0.385185
    (29)   0.274074
    (30)   0.533333
    (31)   0.651852
    (32)   0.466667
    (33)   0.562963

================================== ldbc-cdlp-undirected-example.mtx:

Method: 0
# of triangles: 6

centrality:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.333333
    (1)   0.166667
    (2)   0.166667
    (3)   0.777778
    (4)   0.833333
    (5)   0.777778
    (6)   0.666667
    (7)   0.833333

Method: 1
# of triangles: 6

centrality:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.333333
    (1)   0.166667
    (2)   0.166667
    (3)   0.777778
    (4)   0.833333
    (5)   0.777778
    (6)   0.666667
    (7)   0.833333

Method: 2
# of triangles: 6

centrality:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.333333
    (1)   0.166667
    (2)   0.166667
    (3)   0.777778
    (4)   0.833333
    (5)   0.777778
    (6)   0.666667
    (7)   0.833333

Method: 3
# of triangles: 6

centrality:
GrB_FP64 vector: n: 8 entries: 8
    (0)   0.333333
    (1)   0.166667
    (2)   0.166667
    (3)   0.777778
    (4)   0.833333
    (5)   0.777778
    (6)   0.666667
    (7)   0.833333

================================== ldbc-undirected-example-bool.mtx:

Method: 0
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 1
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 2
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 3
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

================================== ldbc-undirected-example-unweighted.mtx:

Method: 0
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 1
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 2
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 3
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

================================== ldbc-undirected-example.mtx:

Method: 0
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 1
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 2
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

Method: 3
# of triangles: 4

centrality:
GrB_FP64 vector: n: 9 entries: 9
    (0)   0.333333
    (1)   0.666667
    (2)   0.333333
    (3)   0.666667
    (4)   0.666667
    (5)   0.333333
    (6)   0.666667
    (7)   0.333333
    (8)   0.5

================================== ldbc-wcc-example.mtx:

Method: 0
# of triangles: 5

centrality:
GrB_FP64 vector: n: 10 entries: 10
    (0)   0.866667
    (1)   0.4
    (2)   0.866667
    (3)   0.4
    (4)   1
    (5)   0.8
    (6)   0.2
    (7)   0.866667
    (8)   0.2
    (9)   0.8

Method: 1
# of triangles: 5

centrality:
GrB_FP64 vector: n: 10 entries: 10
    (0)   0.866667
    (1)   0.4
    (2)   0.866667
    (3)   0.4
    (4)   1
    (5)   0.8
    (6)   0.2
    (7)   0.866667
    (8)   0.2
    (9)   0.8

Method: 2
# of triangles: 5

centrality:
GrB_FP64 vector: n: 10 entries: 10
    (0)   0.866667
    (1)   0.4
    (2)   0.866667
    (3)   0.4
    (4)   1
    (5)   0.8
    (6)   0.2
    (7)   0.866667
    (8)   0.2
    (9)   0.8

Method: 3
# of triangles: 5

centrality:
GrB_FP64 vector: n: 10 entries: 10
    (0)   0.866667
    (1)   0.4
    (2)   0.866667
    (3)   0.4
    (4)   1
    (5)   0.8
    (6)   0.2
    (7)   0.866667
    (8)   0.2
    (9)   0.8
[ OK ]
Test TriangleCentrality_errors...               
result: -2 centrality is NULL

result: -104 graph is NULL

result: -1004 G->ndiag must be zero

result: -1005 G->A must be symmetric
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.09 sec
----------------------------------------------------------
Test Passed.
"ctest_TriangleCentrality" end time: Dec 07 10:31 EST
"ctest_TriangleCentrality" time elapsed: 00:00:00
----------------------------------------------------------

40/40 Testing: ctest_dnn
40/40 Test: ctest_dnn
Command: "/home/afanasyev/LAGraph/build/experimental/test/test_dnn"
Directory: /home/afanasyev/LAGraph/build/experimental/test
"ctest_dnn" start time: Dec 07 10:31 EST
Output:
----------------------------------------------------------
Test DNN...                                     
Sparse deep neural network from https://graphchallenge.mit.edu/data-sets
# neurons: 1024, bias: -0.3
original # of layers: 120, layers used here: 30
original # of features: 60000, features used here: 1200

True categories:
GrB_BOOL vector: n: 1200 entries: 19
    (286)   1
    (294)   1
    (385)   1
    (426)   1
    (427)   1
    (528)   1
    (570)   1
    (665)   1
    (756)   1
    (942)   1
    (944)   1
    (1030)   1
    (1096)   1
    (1097)   1
    (1176)   1
    (1183)   1
    (1189)   1
    (1193)   1
    (1199)   1

Computed categories:
GrB_BOOL vector: n: 1200 entries: 19
    (286)   1
    (294)   1
    (385)   1
    (426)   1
    (427)   1
    (528)   1
    (570)   1
    (665)   1
    (756)   1
    (942)   1
    (944)   1
    (1030)   1
    (1096)   1
    (1097)   1
    (1176)   1
    (1183)   1
    (1189)   1
    (1193)   1
    (1199)   1
[ OK ]
SUCCESS: All unit tests have passed.
<end of output>
Test time =   0.86 sec
----------------------------------------------------------
Test Passed.
"ctest_dnn" end time: Dec 07 10:31 EST
"ctest_dnn" time elapsed: 00:00:00
----------------------------------------------------------

End testing: Dec 07 10:31 EST
