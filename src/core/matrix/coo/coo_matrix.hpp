/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixCOO<T>::MatrixCOO()
{
    alloc(1, 1);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixCOO<T>::~MatrixCOO()
{
    free();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixCOO<T>::alloc(VNT _size, ENT _non_zeroes_num)
{
    this->size = _size;
    this->non_zeroes_num = _non_zeroes_num;

    MemoryAPI::allocate_array(&row_ids, this->non_zeroes_num);
    MemoryAPI::allocate_array(&col_ids, this->non_zeroes_num);
    MemoryAPI::allocate_array(&vals, this->non_zeroes_num);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixCOO<T>::free()
{
    MemoryAPI::free_array(row_ids);
    MemoryAPI::free_array(col_ids);
    MemoryAPI::free_array(vals);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixCOO<T>::resize(VNT _size, ENT _non_zeroes_num)
{
    this->free();
    this->alloc(_size, _non_zeroes_num);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixCOO<T>::print()
{

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
