#pragma once

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
LA_Info GrB_Matrix_new(lablas::Matrix<T> **_matrix, GrB_Type _type, GrB_Index _nrows, GrB_Index _ncols)
{
    // types can be checked
    // *_matrix = new lablas::Matrix<T>(_nrows, _ncols); // to be implemented
    *_matrix = new lablas::Matrix<T>();
    return GrB_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
LA_Info GrB_free(lablas::Matrix<T> **_matrix)
{
    // types can be checked
    delete (*_matrix);
    *_matrix = NULL;
    return GrB_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename T>
LA_Info GrB_Matrix_nrows(GrB_Index *_nrows, lablas::Matrix<T> *_matrix)
{
    _matrix->get_nrows(_nrows);
    return GrB_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename T>
LA_Info GrB_Matrix_cols(GrB_Index *_ncols, lablas::Matrix<T> *_matrix)
{
    _matrix->get_ncols(_ncols);
    return GrB_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<typename T>
LA_Info GrB_Matrix_nvals(GrB_Index *_nvals, lablas::Matrix<T> *_matrix)
{
    _matrix->get_nvals(_nvals);
    return GrB_SUCCESS;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

