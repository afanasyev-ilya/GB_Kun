/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixLAV<T>::MatrixLAV()
{
    alloc(1, 1);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixLAV<T>::~MatrixLAV()
{
    free();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::alloc(VNT _size, ENT _nnz)
{
    this->nrows = _size;
    this->ncols = _size;
    this->nnz = _nnz;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::free()
{
    for(int i = 0; i < dense_segments_num; i++)
        dense_segments[i].free();
    delete []dense_segments;
    sparse_segment.free();

    MemoryAPI::free_array(col_old_to_new);
    MemoryAPI::free_array(col_new_to_old);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::resize(VNT _size, ENT _nnz)
{
    this->free();
    this->alloc(_size, _nnz);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
