/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixLAV<T>::MatrixLAV()
{
    alloc(1, 1);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
MatrixLAV<T>::~MatrixLAV()
{
    free();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::alloc(VNT _size, ENT _nnz)
{
    this->size = _size;
    this->nnz = _nnz;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::free()
{
    for(VNT i = 0; i < dense_segments; i++)
    {
        MemoryAPI::free_array(dense_row_ptr[i]);
        MemoryAPI::free_array(dense_col_ids[i]);
        MemoryAPI::free_array(dense_vals[i]);
    }
    MemoryAPI::free_array(sparse_row_ptr);
    MemoryAPI::free_array(sparse_col_ids);
    MemoryAPI::free_array(sparse_vals);
    MemoryAPI::free_array(new_to_old);
    MemoryAPI::free_array(old_to_new);
    delete []dense_row_ptr;
    delete []dense_col_ids;
    delete []dense_vals;
    delete []dense_vertex_groups;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <typename T>
void MatrixLAV<T>::resize(VNT _size, ENT _nnz)
{
    this->free();
    this->alloc(_size, _nnz);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
